Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 98, 128, 146, 196, 265, 279, 489, 679, 714, 813, 864, 1036, 1178], "refer": [0, 34, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 155, 279, 375, 378, 487, 488, 532, 577, 606, 607, 608, 611, 714, 739, 777, 825, 924, 927, 1056, 1134, 1135, 1136, 1139, 1178], "input": [0, 72, 78, 100, 108, 109, 150, 174, 177, 196, 206, 222, 223, 226, 230, 244, 254, 255, 258, 279, 286, 324, 397, 418, 481, 488, 489, 498, 521, 566, 602, 603, 604, 605, 634, 636, 638, 639, 641, 644, 647, 648, 649, 656, 665, 666, 673, 674, 675, 677, 678, 679, 681, 685, 693, 696, 698, 704, 714, 726, 731, 751, 754, 782, 783, 784, 786, 790, 795, 801, 802, 806, 825, 869, 963, 1032, 1033, 1035, 1036, 1083, 1178], "output": [0, 29, 31, 34, 35, 36, 37, 38, 51, 113, 147, 175, 176, 178, 179, 190, 196, 201, 206, 208, 216, 218, 222, 250, 254, 279, 289, 291, 293, 337, 485, 486, 487, 489, 497, 509, 529, 540, 545, 547, 549, 551, 569, 583, 631, 635, 637, 639, 650, 658, 659, 677, 678, 679, 701, 714, 726, 752, 753, 755, 756, 765, 766, 770, 771, 780, 782, 784, 801, 805, 808, 813, 825, 832, 833, 835, 881, 1036, 1054, 1097, 1111, 1166, 1178], "seri": [0, 1, 2, 13, 26, 63, 64, 73, 74, 75, 76, 80, 81, 82, 97, 99, 102, 104, 131, 133, 134, 138, 158, 166, 169, 171, 172, 175, 180, 183, 184, 186, 188, 197, 198, 202, 213, 214, 216, 220, 232, 236, 239, 242, 243, 259, 279, 292, 293, 304, 312, 320, 321, 323, 371, 400, 406, 416, 420, 423, 424, 427, 429, 430, 431, 443, 451, 454, 470, 474, 475, 477, 483, 485, 487, 489, 526, 532, 533, 534, 535, 536, 538, 540, 541, 542, 548, 555, 558, 569, 595, 606, 607, 608, 611, 615, 621, 622, 630, 639, 640, 641, 645, 646, 651, 653, 654, 658, 659, 661, 662, 666, 667, 669, 671, 673, 674, 675, 676, 677, 678, 679, 682, 683, 686, 687, 689, 690, 693, 695, 696, 699, 701, 702, 703, 705, 714, 726, 748, 752, 780, 807, 825, 1170, 1172, 1174, 1177, 1179, 1182, 1183, 1184, 1186], "datafram": [0, 1, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 72, 73, 74, 75, 76, 78, 79, 80, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 125, 126, 127, 131, 132, 135, 136, 144, 277, 278, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 373, 375, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 710, 714, 726, 736, 737, 740, 744, 745, 749, 752, 760, 761, 762, 763, 765, 766, 770, 771, 775, 779, 789, 790, 796, 797, 798, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 834, 849, 851, 862, 881, 882, 920, 959, 990, 991, 1001, 1036, 1054, 1109, 1125, 1126, 1147, 1155, 1156, 1166, 1178, 1185, 1186], "lazyfram": [0, 1, 57, 58, 60, 62, 72, 73, 74, 75, 76, 78, 79, 80, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 194, 207, 208, 223, 255, 279, 318, 403, 477, 714, 726, 824, 828, 1185, 1186], "express": [0, 51, 52, 53, 78, 79, 135, 138, 140, 150, 162, 164, 166, 174, 177, 196, 204, 208, 217, 222, 223, 226, 230, 244, 254, 255, 258, 265, 279, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 303, 304, 309, 312, 314, 315, 316, 318, 324, 327, 328, 329, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 356, 357, 359, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 397, 399, 400, 402, 403, 407, 409, 410, 411, 412, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 436, 441, 442, 444, 445, 446, 450, 451, 456, 458, 476, 477, 483, 484, 486, 487, 488, 489, 493, 494, 495, 496, 497, 498, 500, 502, 504, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 521, 525, 526, 527, 528, 529, 531, 535, 536, 538, 553, 554, 555, 557, 559, 561, 562, 564, 566, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 590, 591, 592, 595, 596, 597, 598, 617, 618, 621, 623, 624, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 681, 685, 687, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 702, 704, 705, 710, 713, 726, 731, 736, 737, 743, 744, 745, 748, 751, 754, 775, 782, 783, 786, 787, 788, 790, 795, 801, 802, 803, 806, 813, 825, 828, 869, 880, 890, 949, 963, 996, 997, 1001, 1036, 1077, 1083, 1084, 1098, 1099, 1100, 1105, 1106, 1107, 1108, 1109, 1119, 1120, 1178], "selector": [0, 34, 151, 157, 159, 162, 200, 206, 208, 238, 246, 248, 279, 397, 714, 726, 733, 740, 741, 744, 770, 796, 825], "extend": [0, 100, 252, 279, 400, 714, 726, 834, 949, 1178], "function": [0, 34, 63, 72, 73, 74, 75, 76, 79, 81, 82, 98, 104, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 131, 132, 133, 134, 136, 146, 147, 155, 161, 169, 196, 200, 207, 208, 241, 245, 248, 249, 260, 265, 279, 289, 293, 336, 372, 394, 395, 396, 477, 485, 486, 487, 489, 509, 521, 525, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 563, 625, 635, 639, 653, 654, 666, 667, 669, 675, 677, 678, 679, 689, 710, 714, 726, 736, 737, 739, 745, 765, 766, 770, 774, 777, 808, 813, 825, 835, 880, 921, 942, 943, 944, 945, 959, 1028, 1036, 1054, 1064, 1065, 1079, 1080, 1086, 1091, 1160, 1178, 1186], "data": [0, 1, 6, 19, 20, 22, 30, 31, 32, 33, 34, 35, 36, 40, 51, 52, 53, 57, 63, 72, 73, 75, 80, 82, 87, 88, 92, 94, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 131, 132, 133, 134, 136, 137, 138, 140, 146, 153, 163, 173, 174, 175, 176, 177, 178, 179, 190, 191, 192, 194, 196, 206, 207, 211, 216, 217, 218, 219, 228, 235, 240, 241, 245, 254, 257, 277, 279, 289, 290, 291, 295, 296, 297, 298, 299, 300, 303, 306, 307, 308, 309, 310, 312, 314, 315, 316, 319, 320, 324, 327, 328, 329, 337, 338, 343, 344, 347, 348, 349, 351, 353, 355, 356, 357, 359, 361, 363, 364, 365, 366, 368, 369, 370, 372, 373, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 399, 410, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 436, 441, 442, 444, 451, 456, 458, 464, 476, 479, 484, 489, 516, 517, 520, 521, 529, 531, 532, 535, 536, 538, 540, 552, 553, 561, 562, 563, 569, 571, 572, 574, 576, 577, 578, 579, 581, 582, 583, 590, 595, 596, 597, 598, 606, 607, 608, 611, 614, 621, 623, 624, 625, 627, 628, 631, 634, 639, 641, 657, 658, 659, 660, 661, 662, 663, 673, 674, 676, 677, 678, 679, 687, 690, 700, 701, 702, 705, 710, 714, 726, 734, 735, 736, 745, 751, 752, 753, 754, 755, 756, 774, 780, 801, 825, 832, 833, 834, 845, 849, 850, 851, 852, 854, 858, 860, 868, 869, 872, 881, 888, 889, 892, 893, 894, 896, 898, 900, 901, 905, 907, 910, 912, 913, 914, 915, 917, 918, 919, 921, 922, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 947, 948, 959, 965, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 983, 992, 993, 995, 1002, 1007, 1009, 1015, 1027, 1030, 1036, 1048, 1054, 1056, 1060, 1062, 1075, 1076, 1086, 1091, 1097, 1098, 1099, 1100, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1118, 1123, 1124, 1125, 1126, 1134, 1135, 1136, 1139, 1142, 1158, 1159, 1160, 1161, 1163, 1168, 1177, 1178, 1185], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 87, 97, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 117, 118, 119, 122, 123, 124, 126, 130, 131, 132, 133, 134, 137, 138, 147, 169, 173, 175, 176, 178, 179, 180, 191, 192, 196, 216, 235, 241, 243, 246, 279, 289, 291, 295, 296, 297, 298, 299, 300, 303, 309, 312, 314, 315, 316, 319, 320, 321, 324, 327, 328, 329, 337, 338, 343, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 397, 399, 411, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 441, 442, 444, 451, 456, 458, 476, 477, 488, 489, 529, 531, 535, 536, 538, 540, 561, 562, 569, 571, 572, 574, 576, 577, 578, 579, 581, 582, 583, 590, 595, 596, 597, 598, 606, 621, 623, 624, 625, 631, 639, 641, 657, 658, 659, 660, 661, 662, 663, 665, 666, 673, 674, 675, 676, 677, 678, 679, 687, 690, 700, 701, 702, 705, 710, 714, 726, 736, 737, 743, 745, 752, 753, 755, 756, 760, 775, 780, 788, 796, 825, 832, 833, 845, 850, 852, 854, 858, 860, 862, 869, 881, 888, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 947, 957, 965, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 983, 992, 993, 995, 1002, 1007, 1009, 1027, 1028, 1048, 1054, 1060, 1062, 1086, 1097, 1098, 1099, 1100, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1118, 1123, 1124, 1125, 1126, 1134, 1158, 1159, 1161, 1169, 1178, 1185], "config": [0, 72, 222, 254, 279, 663, 726, 736, 782, 801, 825], "except": [0, 131, 181, 193, 195, 233, 279, 665, 726, 761, 825, 828, 958, 988, 1149, 1159, 1168, 1178], "test": [0, 6, 110, 111, 113, 119, 726, 757, 764, 825], "util": [0, 104, 669, 726, 745, 825], "sql": [0, 32, 57, 61, 110, 111, 192, 226, 279, 469, 556, 694, 714, 726, 786, 825, 1020, 1083, 1178], "These": [1, 34, 110, 144, 245, 279, 386, 713, 714, 921, 935], "allow": [1, 33, 34, 51, 52, 53, 63, 82, 87, 98, 110, 122, 125, 126, 127, 128, 138, 140, 146, 190, 193, 194, 217, 218, 220, 240, 241, 246, 257, 279, 368, 375, 378, 464, 487, 489, 534, 553, 606, 607, 608, 714, 760, 761, 765, 766, 770, 796, 803, 825, 828, 917, 924, 927, 1015, 1036, 1058, 1076, 1078, 1134, 1135, 1136, 1160, 1178, 1186], "you": [1, 16, 34, 39, 53, 62, 72, 79, 80, 97, 99, 100, 101, 103, 108, 109, 110, 111, 113, 114, 117, 118, 120, 122, 126, 127, 128, 144, 163, 175, 176, 178, 179, 190, 196, 204, 208, 216, 217, 218, 219, 237, 240, 245, 265, 279, 364, 365, 368, 371, 375, 378, 386, 397, 403, 418, 450, 477, 487, 488, 489, 534, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 582, 653, 658, 663, 667, 679, 687, 690, 705, 714, 737, 741, 752, 753, 755, 756, 757, 764, 780, 788, 813, 825, 828, 834, 913, 914, 920, 924, 927, 935, 948, 963, 1001, 1036, 1058, 1063, 1110, 1136, 1159, 1168, 1178, 1186], "regist": [1, 57, 59, 60, 61, 62, 73, 74, 75, 76, 139, 141, 714, 1185], "custom": [1, 33, 34, 73, 74, 75, 76, 139, 140, 141, 147, 196, 260, 265, 279, 293, 375, 378, 477, 485, 487, 489, 541, 542, 639, 677, 678, 679, 714, 765, 766, 808, 813, 825, 835, 924, 927, 1028, 1036, 1064, 1065, 1178, 1186], "dedic": [1, 98, 190, 218, 279], "namespac": [1, 278, 713, 726, 824, 1186], "underli": [1, 63, 82, 90, 97, 99, 100, 101, 103, 110, 117, 118, 120, 126, 135, 138, 140, 162, 163, 190, 191, 218, 235, 279, 313, 344, 345, 349, 353, 355, 356, 357, 359, 361, 363, 366, 369, 370, 371, 373, 387, 388, 389, 390, 534, 552, 570, 573, 714, 744, 825, 828, 834, 853, 863, 889, 890, 894, 898, 900, 901, 905, 907, 910, 912, 915, 918, 919, 920, 922, 936, 937, 938, 939, 948, 1058, 1075, 1086, 1098, 1101, 1154, 1159, 1178], "polar": [1, 279, 713, 714, 720, 726, 825, 828, 1178, 1185], "class": [1, 2, 3, 4, 5, 18, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 135, 136, 219, 241, 279, 701, 710, 714, 720, 726, 777, 825, 1158, 1159, 1178, 1185], "without": [1, 79, 104, 112, 115, 121, 123, 124, 128, 248, 249, 279, 293, 336, 372, 543, 544, 545, 546, 547, 549, 550, 551, 693, 714, 737, 825, 861, 864, 880, 921, 959, 1054, 1159, 1178], "requir": [1, 33, 34, 39, 53, 72, 98, 102, 110, 131, 132, 133, 134, 150, 155, 217, 241, 244, 279, 310, 394, 395, 396, 479, 489, 558, 606, 607, 608, 628, 690, 714, 731, 790, 795, 825, 851, 943, 944, 945, 1030, 1085, 1134, 1135, 1136, 1159, 1160, 1163, 1178], "subclass": [1, 279], "mixin": 1, "expr": [1, 72, 73, 74, 75, 76, 162, 164, 192, 193, 204, 208, 217, 222, 223, 254, 255, 279, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 714, 715, 716, 719, 720, 721, 722, 723, 744, 746, 760, 761, 776, 782, 783, 784, 787, 801, 802, 825, 880, 890, 917, 935, 950, 990, 991, 996, 997, 1001, 1005, 1021, 1025, 1084, 1098, 1103, 1127, 1150, 1178], "ar": [1, 13, 18, 21, 29, 31, 33, 34, 51, 52, 53, 62, 63, 72, 79, 80, 81, 82, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 138, 144, 146, 150, 155, 159, 161, 164, 168, 169, 173, 174, 175, 176, 177, 178, 179, 190, 192, 193, 194, 196, 200, 201, 206, 208, 216, 217, 218, 219, 222, 223, 224, 226, 230, 236, 241, 244, 249, 250, 254, 255, 258, 279, 289, 291, 318, 324, 330, 332, 334, 335, 372, 386, 391, 393, 394, 395, 396, 418, 420, 423, 424, 427, 429, 430, 431, 434, 437, 439, 458, 469, 477, 487, 488, 517, 521, 529, 532, 535, 536, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 560, 563, 565, 566, 579, 580, 581, 588, 589, 590, 614, 619, 635, 636, 638, 644, 647, 648, 649, 650, 656, 658, 659, 661, 662, 681, 685, 693, 696, 698, 701, 702, 704, 706, 707, 709, 713, 714, 715, 716, 719, 720, 721, 722, 723, 726, 731, 736, 737, 741, 745, 746, 751, 752, 753, 754, 755, 756, 757, 760, 761, 764, 766, 770, 771, 775, 778, 780, 782, 783, 785, 786, 790, 795, 798, 801, 802, 803, 806, 825, 828, 832, 833, 834, 861, 869, 878, 879, 921, 935, 941, 942, 943, 944, 945, 956, 963, 967, 971, 972, 976, 977, 978, 979, 986, 987, 990, 1009, 1020, 1028, 1054, 1056, 1060, 1071, 1083, 1088, 1091, 1107, 1108, 1116, 1117, 1118, 1136, 1142, 1148, 1159, 1160, 1168, 1170, 1172, 1174, 1178, 1179, 1182, 1183, 1184, 1186], "all": [1, 9, 15, 18, 21, 26, 29, 31, 34, 40, 51, 59, 72, 78, 97, 100, 102, 103, 108, 109, 112, 113, 114, 116, 119, 120, 122, 125, 126, 135, 136, 140, 144, 151, 156, 159, 165, 181, 186, 188, 190, 191, 194, 195, 200, 203, 204, 211, 217, 218, 219, 223, 229, 233, 238, 240, 246, 248, 249, 250, 255, 279, 290, 292, 311, 330, 336, 341, 342, 343, 397, 402, 408, 413, 415, 417, 420, 424, 430, 431, 433, 437, 449, 450, 456, 472, 477, 486, 487, 505, 508, 509, 510, 511, 512, 513, 519, 527, 532, 537, 542, 558, 564, 566, 571, 572, 578, 579, 580, 581, 586, 591, 592, 594, 600, 601, 602, 603, 618, 636, 655, 656, 658, 665, 667, 672, 689, 696, 697, 698, 704, 714, 720, 726, 733, 736, 737, 741, 743, 745, 747, 765, 766, 770, 775, 783, 788, 789, 796, 798, 802, 803, 825, 828, 880, 882, 885, 886, 888, 958, 965, 983, 988, 1000, 1001, 1007, 1023, 1028, 1056, 1065, 1092, 1099, 1100, 1106, 1107, 1108, 1109, 1114, 1119, 1120, 1122, 1128, 1129, 1130, 1131, 1149, 1178, 1185, 1186], "support": [1, 33, 34, 39, 80, 97, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 117, 118, 119, 123, 124, 127, 135, 140, 144, 190, 191, 192, 193, 218, 219, 229, 230, 237, 241, 279, 470, 521, 564, 566, 595, 710, 714, 720, 760, 761, 789, 790, 825, 828, 1021, 1092, 1123, 1160, 1178, 1185], "target": [1, 32, 33, 34, 77, 113, 279, 577, 606, 607, 608, 828, 1105, 1134, 1135, 1136], "thi": [1, 6, 9, 14, 16, 29, 31, 33, 34, 37, 39, 43, 51, 52, 53, 57, 58, 62, 63, 72, 78, 79, 80, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 144, 146, 147, 148, 149, 150, 153, 155, 159, 160, 161, 163, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 216, 217, 218, 219, 220, 222, 223, 226, 227, 229, 231, 232, 235, 237, 240, 241, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 260, 261, 265, 278, 279, 289, 292, 293, 294, 303, 310, 317, 318, 320, 321, 324, 330, 336, 337, 343, 344, 356, 364, 365, 368, 371, 372, 375, 378, 389, 393, 399, 416, 417, 418, 421, 423, 425, 428, 433, 437, 445, 448, 450, 451, 455, 456, 458, 459, 464, 465, 466, 467, 468, 469, 471, 473, 477, 478, 479, 482, 483, 485, 487, 489, 493, 494, 495, 496, 497, 498, 508, 510, 511, 512, 513, 514, 515, 517, 521, 527, 529, 532, 533, 534, 535, 536, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 556, 557, 558, 559, 564, 565, 566, 571, 577, 584, 585, 586, 587, 588, 589, 593, 594, 600, 601, 602, 603, 604, 605, 609, 614, 618, 626, 628, 629, 630, 631, 635, 639, 640, 648, 651, 653, 658, 666, 667, 669, 675, 677, 679, 690, 693, 701, 704, 710, 714, 726, 727, 729, 730, 731, 732, 735, 736, 737, 741, 743, 745, 750, 751, 752, 753, 754, 755, 756, 758, 760, 761, 765, 766, 770, 771, 775, 777, 778, 780, 782, 783, 784, 786, 787, 788, 789, 790, 795, 796, 798, 801, 802, 803, 804, 805, 808, 809, 813, 824, 825, 828, 834, 835, 844, 851, 857, 860, 862, 863, 864, 869, 872, 880, 881, 888, 889, 890, 901, 913, 914, 917, 920, 921, 924, 927, 938, 942, 947, 948, 955, 959, 964, 968, 970, 971, 973, 974, 980, 982, 984, 985, 987, 996, 999, 1001, 1002, 1006, 1007, 1009, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1049, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1066, 1067, 1069, 1072, 1073, 1074, 1076, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1092, 1093, 1095, 1099, 1105, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1122, 1128, 1129, 1130, 1131, 1136, 1137, 1142, 1143, 1147, 1148, 1154, 1156, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1167, 1168, 1178, 1185, 1186], "featur": [1, 39, 43, 77, 279], "i": [1, 6, 14, 16, 18, 31, 33, 34, 35, 36, 37, 38, 43, 51, 52, 53, 57, 62, 63, 72, 77, 78, 79, 80, 82, 84, 86, 87, 89, 93, 95, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 148, 150, 153, 156, 159, 161, 163, 166, 170, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 204, 206, 207, 208, 216, 217, 218, 219, 220, 223, 226, 229, 230, 231, 232, 233, 235, 240, 241, 244, 245, 246, 248, 249, 250, 251, 255, 257, 261, 265, 278, 279, 286, 289, 291, 292, 293, 294, 304, 318, 336, 337, 341, 342, 343, 345, 355, 368, 372, 375, 386, 394, 395, 396, 399, 403, 413, 416, 418, 434, 440, 449, 450, 453, 464, 469, 470, 475, 477, 482, 487, 488, 489, 493, 496, 497, 498, 521, 529, 532, 534, 535, 536, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 559, 560, 563, 564, 565, 566, 568, 569, 570, 571, 572, 577, 578, 579, 581, 582, 586, 588, 589, 590, 591, 594, 595, 598, 600, 601, 602, 603, 606, 607, 608, 611, 614, 631, 632, 635, 637, 640, 645, 648, 650, 651, 653, 654, 658, 659, 661, 662, 667, 676, 679, 690, 691, 692, 693, 695, 701, 702, 703, 704, 710, 714, 729, 731, 735, 736, 737, 741, 743, 745, 748, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 763, 765, 766, 770, 771, 775, 780, 783, 784, 786, 788, 789, 790, 791, 795, 796, 798, 799, 802, 805, 808, 809, 813, 825, 828, 832, 833, 834, 835, 861, 864, 869, 872, 880, 881, 882, 885, 886, 888, 890, 900, 917, 921, 924, 935, 942, 943, 944, 945, 947, 948, 952, 956, 957, 958, 959, 964, 966, 973, 980, 981, 982, 984, 985, 986, 988, 991, 1000, 1001, 1004, 1015, 1020, 1021, 1026, 1028, 1036, 1054, 1056, 1058, 1060, 1063, 1065, 1072, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1087, 1088, 1091, 1092, 1095, 1097, 1098, 1099, 1100, 1105, 1106, 1107, 1109, 1110, 1114, 1116, 1117, 1118, 1119, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1139, 1142, 1149, 1154, 1159, 1160, 1166, 1167, 1168, 1178, 1185, 1186], "primarili": 1, "intend": [1, 131, 132, 133, 134, 614, 1142], "us": [1, 12, 13, 14, 16, 21, 26, 31, 32, 34, 39, 42, 51, 53, 57, 58, 59, 60, 62, 63, 72, 79, 80, 81, 82, 98, 100, 101, 103, 105, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 151, 157, 159, 164, 165, 166, 169, 174, 175, 176, 177, 178, 179, 186, 188, 190, 191, 193, 196, 198, 200, 203, 204, 206, 207, 208, 216, 217, 218, 219, 220, 222, 223, 227, 230, 231, 232, 237, 238, 239, 240, 241, 245, 246, 248, 249, 250, 251, 254, 255, 258, 265, 279, 287, 289, 291, 293, 294, 304, 313, 314, 321, 325, 326, 336, 341, 342, 350, 354, 358, 360, 362, 367, 371, 372, 374, 375, 378, 386, 389, 391, 394, 395, 396, 397, 402, 403, 417, 418, 434, 450, 464, 477, 487, 488, 489, 492, 521, 529, 532, 534, 536, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 557, 558, 563, 565, 566, 568, 570, 573, 574, 575, 577, 578, 580, 582, 583, 591, 595, 597, 599, 602, 603, 604, 605, 606, 607, 608, 611, 614, 632, 635, 636, 637, 638, 640, 646, 649, 650, 653, 655, 656, 658, 659, 660, 661, 662, 663, 667, 669, 676, 679, 680, 681, 684, 685, 687, 690, 691, 692, 693, 695, 696, 697, 698, 701, 702, 703, 705, 710, 713, 714, 725, 726, 729, 733, 736, 737, 740, 741, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 761, 763, 764, 770, 780, 782, 783, 787, 790, 791, 796, 798, 799, 801, 802, 806, 813, 825, 828, 832, 833, 834, 835, 853, 854, 862, 864, 870, 871, 880, 881, 885, 886, 895, 899, 906, 908, 911, 916, 920, 921, 923, 924, 927, 935, 938, 941, 943, 944, 945, 950, 951, 956, 959, 962, 963, 986, 1001, 1015, 1028, 1035, 1036, 1054, 1056, 1058, 1060, 1063, 1065, 1076, 1079, 1080, 1081, 1084, 1085, 1091, 1095, 1098, 1101, 1102, 1105, 1106, 1108, 1110, 1111, 1119, 1123, 1125, 1134, 1135, 1136, 1139, 1142, 1150, 1155, 1157, 1158, 1159, 1160, 1167, 1168, 1178, 1185, 1186], "librari": [1, 90, 110, 113, 487, 714, 1186], "author": 1, "domain": [1, 578, 1106], "specif": [1, 29, 33, 34, 97, 99, 101, 103, 108, 111, 112, 113, 117, 118, 119, 123, 137, 138, 151, 190, 279, 375, 378, 606, 607, 608, 611, 733, 825, 828, 924, 927, 1134, 1135, 1136, 1139, 1178, 1186], "capabl": [1, 34, 279], "which": [1, 11, 21, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 63, 72, 73, 74, 75, 76, 100, 108, 109, 110, 111, 112, 113, 122, 123, 124, 131, 132, 139, 141, 150, 151, 159, 163, 164, 174, 175, 176, 177, 178, 179, 193, 216, 240, 244, 246, 250, 279, 289, 318, 368, 372, 375, 386, 400, 418, 420, 424, 427, 429, 430, 431, 477, 489, 498, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 590, 658, 659, 661, 662, 663, 701, 702, 704, 714, 731, 733, 741, 743, 752, 753, 755, 756, 761, 780, 784, 795, 796, 805, 825, 834, 917, 921, 924, 935, 948, 949, 963, 967, 972, 976, 977, 978, 979, 1028, 1063, 1079, 1118, 1159, 1178, 1186], "mai": [1, 33, 43, 53, 79, 80, 97, 99, 100, 101, 103, 108, 110, 112, 114, 117, 118, 123, 124, 125, 126, 128, 131, 133, 161, 163, 175, 193, 196, 216, 227, 241, 248, 249, 250, 279, 293, 336, 343, 344, 356, 368, 372, 386, 397, 475, 477, 487, 489, 497, 540, 543, 544, 545, 546, 547, 549, 550, 551, 557, 582, 653, 654, 658, 659, 661, 662, 667, 689, 701, 702, 714, 736, 737, 745, 752, 761, 765, 766, 780, 787, 798, 804, 808, 813, 825, 834, 863, 864, 880, 888, 889, 901, 917, 921, 935, 942, 948, 959, 1026, 1036, 1054, 1084, 1110, 1136, 1159, 1178, 1186], "exist": [1, 32, 33, 34, 72, 112, 123, 138, 245, 249, 254, 255, 279, 288, 312, 315, 316, 345, 714, 798, 801, 802, 825, 828, 890], "belong": [1, 175, 279, 752, 825], "core": [1, 241, 279, 1186], "cannot": [1, 108, 109, 113, 114, 119, 142, 196, 219, 220, 265, 279, 313, 397, 464, 488, 489, 553, 573, 597, 616, 679, 714, 788, 813, 825, 853, 1015, 1036, 1076, 1101, 1125, 1178], "overrid": [1, 34, 97, 99, 100, 101, 102, 103, 108, 110, 111, 113, 117, 118, 119, 135, 136, 140, 142, 279, 488, 714, 825, 1035, 1178], "str": [1, 7, 8, 10, 11, 14, 17, 18, 21, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 51, 52, 53, 57, 58, 59, 60, 61, 62, 72, 73, 74, 75, 76, 77, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 138, 139, 140, 141, 144, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 181, 183, 186, 188, 189, 190, 192, 193, 197, 198, 199, 200, 201, 202, 204, 206, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 224, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 287, 288, 312, 314, 315, 316, 320, 337, 340, 346, 368, 371, 372, 375, 378, 386, 397, 399, 403, 405, 409, 411, 416, 418, 443, 444, 453, 454, 456, 470, 474, 477, 486, 488, 489, 497, 499, 500, 502, 509, 510, 511, 512, 513, 518, 521, 525, 527, 529, 535, 537, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 558, 565, 566, 615, 616, 618, 621, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 710, 714, 721, 731, 733, 736, 737, 738, 739, 740, 741, 743, 744, 745, 748, 750, 751, 752, 753, 755, 756, 758, 760, 761, 770, 771, 775, 777, 778, 779, 780, 784, 785, 787, 788, 789, 790, 795, 796, 797, 798, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 858, 860, 881, 882, 891, 917, 920, 921, 924, 927, 935, 947, 951, 995, 996, 997, 1007, 1028, 1035, 1045, 1046, 1054, 1059, 1079, 1080, 1143, 1145, 1155, 1156, 1157, 1166, 1178, 1182, 1185, 1186], "dt": [1, 72, 113, 119, 216, 279, 540, 658, 663, 714, 723, 780, 825, 828, 1184], "attempt": [1, 240, 279], "do": [1, 34, 51, 52, 53, 72, 78, 79, 80, 108, 122, 131, 132, 133, 134, 163, 175, 176, 178, 179, 193, 208, 216, 235, 245, 248, 279, 336, 450, 521, 540, 601, 602, 603, 687, 690, 705, 714, 736, 737, 743, 752, 753, 755, 756, 761, 765, 766, 775, 780, 788, 825, 828, 834, 880, 948, 1001, 1129, 1130, 1131, 1159, 1168, 1178], "so": [1, 110, 111, 122, 142, 173, 175, 176, 178, 179, 208, 216, 279, 304, 318, 418, 453, 477, 489, 540, 601, 602, 603, 714, 752, 753, 755, 756, 780, 825, 1004, 1129, 1130, 1131], "rais": [1, 17, 21, 33, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 113, 119, 122, 131, 133, 146, 208, 217, 279, 313, 371, 372, 386, 475, 497, 529, 570, 573, 590, 606, 607, 608, 611, 660, 676, 714, 853, 920, 921, 935, 1026, 1054, 1098, 1101, 1118, 1134, 1135, 1136, 1139, 1159, 1168, 1178], "an": [1, 29, 31, 32, 33, 34, 43, 51, 52, 73, 75, 76, 78, 79, 82, 87, 88, 90, 97, 108, 109, 110, 111, 112, 113, 115, 119, 120, 122, 124, 125, 136, 138, 140, 151, 152, 153, 161, 164, 169, 175, 176, 178, 179, 190, 191, 193, 196, 204, 208, 214, 216, 217, 235, 240, 245, 248, 249, 254, 265, 279, 288, 309, 313, 319, 325, 326, 331, 332, 333, 334, 335, 336, 337, 345, 346, 368, 371, 375, 389, 400, 402, 403, 409, 411, 433, 445, 446, 450, 453, 475, 476, 477, 486, 487, 489, 498, 508, 509, 528, 529, 536, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 570, 573, 578, 606, 607, 608, 611, 621, 627, 635, 641, 645, 658, 659, 661, 662, 664, 669, 673, 674, 676, 687, 689, 690, 693, 696, 701, 702, 704, 705, 710, 714, 726, 733, 734, 735, 736, 737, 743, 745, 748, 752, 753, 755, 756, 761, 766, 775, 780, 788, 798, 801, 803, 813, 825, 828, 850, 853, 858, 868, 870, 871, 872, 876, 877, 878, 879, 880, 890, 924, 938, 942, 949, 973, 985, 996, 997, 1001, 1004, 1026, 1027, 1036, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1079, 1080, 1098, 1101, 1106, 1134, 1135, 1136, 1139, 1159, 1168, 1178, 1185], "attributeerror": 1, "howev": [1, 100, 110, 161, 196, 240, 279, 942, 1178], "can": [1, 16, 33, 34, 39, 42, 62, 63, 72, 81, 82, 88, 98, 100, 108, 109, 110, 113, 114, 119, 120, 122, 125, 127, 128, 136, 137, 138, 140, 142, 144, 150, 152, 159, 160, 169, 174, 175, 176, 177, 178, 179, 186, 188, 196, 204, 208, 216, 219, 222, 230, 240, 244, 245, 248, 254, 265, 279, 289, 293, 332, 335, 336, 364, 365, 368, 371, 386, 400, 418, 433, 450, 477, 489, 497, 505, 508, 510, 511, 512, 513, 521, 527, 529, 534, 540, 543, 544, 545, 546, 547, 549, 550, 551, 555, 558, 560, 563, 566, 581, 601, 602, 603, 606, 618, 644, 667, 669, 679, 704, 710, 713, 714, 725, 731, 736, 741, 743, 745, 752, 753, 755, 756, 780, 782, 784, 790, 795, 801, 804, 825, 828, 835, 864, 880, 881, 913, 914, 917, 920, 921, 935, 949, 963, 1001, 1028, 1036, 1041, 1054, 1058, 1079, 1080, 1081, 1085, 1088, 1091, 1099, 1100, 1107, 1109, 1129, 1130, 1131, 1134, 1136, 1159, 1178, 1185], "other": [1, 21, 33, 34, 39, 62, 79, 108, 109, 110, 122, 131, 132, 133, 134, 159, 163, 170, 192, 193, 200, 201, 217, 219, 222, 223, 249, 252, 254, 255, 277, 279, 286, 290, 292, 304, 324, 340, 392, 393, 407, 410, 412, 418, 423, 436, 443, 448, 455, 465, 466, 467, 468, 473, 478, 484, 488, 493, 496, 504, 506, 516, 517, 520, 566, 617, 625, 627, 634, 636, 638, 647, 648, 649, 656, 658, 681, 685, 693, 696, 698, 714, 726, 737, 741, 760, 761, 770, 771, 782, 783, 798, 801, 802, 803, 825, 828, 834, 869, 884, 948, 971, 994, 999, 1006, 1016, 1017, 1018, 1019, 1024, 1029, 1078, 1161, 1169, 1177, 1178], "onli": [1, 15, 21, 29, 31, 34, 51, 57, 59, 63, 72, 77, 80, 82, 108, 109, 112, 114, 116, 120, 122, 123, 125, 126, 127, 128, 138, 140, 144, 147, 159, 163, 175, 178, 190, 192, 193, 196, 198, 208, 216, 218, 219, 232, 237, 239, 240, 249, 250, 265, 279, 287, 289, 291, 293, 304, 318, 323, 324, 368, 376, 397, 406, 433, 489, 508, 510, 511, 512, 513, 521, 527, 534, 543, 544, 545, 546, 547, 549, 550, 551, 618, 629, 658, 659, 679, 714, 736, 741, 752, 753, 755, 756, 757, 760, 761, 764, 780, 798, 813, 825, 832, 833, 834, 866, 869, 881, 917, 948, 954, 973, 1036, 1054, 1058, 1154, 1157, 1178, 1185, 1186], "gener": [1, 110, 111, 129, 135, 136, 137, 138, 140, 146, 155, 208, 220, 238, 240, 245, 279, 464, 553, 559, 641, 658, 661, 673, 674, 690, 701, 702, 714, 825, 1015, 1076, 1087, 1155, 1178, 1186], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 72, 73, 74, 75, 76, 80, 81, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 119, 122, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 710, 714, 727, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 954, 957, 958, 959, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987, 990, 991, 998, 1000, 1001, 1002, 1005, 1007, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1097, 1098, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1116, 1117, 1118, 1119, 1120, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1178, 1185, 1186], "register_expr_namespac": [1, 73, 75, 76], "greet": 1, "def": [1, 63, 73, 74, 75, 76, 136, 137, 138, 140, 144, 207, 245, 279, 286, 525, 578, 603, 634, 678, 714, 737, 774, 825, 828, 1106, 1186], "__init__": [1, 2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 135, 1185], "self": [1, 58, 59, 60, 62, 73, 74, 75, 76, 78, 79, 152, 153, 156, 163, 181, 183, 184, 195, 197, 198, 199, 200, 202, 205, 206, 208, 210, 211, 213, 214, 220, 228, 229, 231, 232, 233, 238, 245, 247, 250, 251, 252, 256, 257, 279, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 503, 504, 505, 506, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 710, 714, 729, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 825, 834, 835, 858, 872, 948, 952, 960, 1034, 1035, 1036, 1047, 1051, 1052, 1057, 1079, 1080, 1081, 1093, 1165, 1169, 1178], "_expr": [1, 74], "hello": [1, 21, 58, 61, 601, 602, 603, 1007, 1129, 1130, 1131], "return": [1, 10, 11, 29, 31, 34, 35, 36, 37, 38, 51, 52, 53, 57, 61, 63, 72, 73, 74, 75, 76, 77, 78, 79, 89, 91, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 137, 147, 150, 152, 155, 158, 160, 161, 162, 163, 164, 165, 168, 169, 171, 173, 174, 175, 177, 178, 181, 183, 189, 190, 191, 192, 194, 195, 196, 203, 204, 206, 207, 208, 216, 217, 218, 219, 220, 233, 234, 240, 241, 244, 245, 246, 250, 254, 255, 263, 265, 268, 273, 279, 289, 291, 295, 296, 297, 298, 299, 300, 303, 304, 309, 312, 314, 315, 316, 317, 327, 328, 329, 330, 337, 338, 343, 347, 348, 349, 351, 353, 355, 356, 357, 359, 361, 363, 364, 365, 366, 368, 369, 370, 372, 373, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 399, 411, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 438, 441, 442, 444, 451, 453, 454, 456, 458, 459, 464, 474, 475, 476, 483, 488, 498, 500, 505, 525, 529, 531, 535, 536, 538, 553, 554, 560, 561, 562, 569, 571, 572, 574, 576, 577, 578, 579, 581, 582, 583, 584, 585, 587, 588, 589, 590, 593, 595, 596, 597, 598, 614, 620, 621, 622, 623, 624, 626, 627, 629, 630, 631, 634, 635, 639, 641, 642, 643, 644, 645, 657, 658, 659, 660, 661, 662, 663, 669, 671, 673, 674, 676, 677, 678, 679, 687, 690, 693, 696, 699, 700, 701, 702, 704, 705, 714, 731, 734, 736, 737, 742, 743, 745, 752, 753, 755, 756, 757, 763, 764, 766, 774, 775, 780, 784, 788, 793, 794, 795, 796, 801, 802, 805, 811, 816, 821, 825, 832, 833, 834, 842, 843, 845, 846, 850, 852, 854, 857, 861, 864, 868, 881, 882, 888, 892, 893, 894, 896, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 921, 922, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 942, 947, 948, 956, 958, 959, 965, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 983, 985, 987, 988, 992, 993, 995, 1002, 1004, 1005, 1007, 1009, 1010, 1015, 1025, 1026, 1027, 1034, 1035, 1036, 1041, 1048, 1054, 1060, 1061, 1062, 1063, 1076, 1077, 1078, 1080, 1088, 1097, 1098, 1099, 1100, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1121, 1123, 1124, 1125, 1126, 1142, 1149, 1151, 1162, 1164, 1165, 1166, 1169, 1178, 1185, 1186], "lit": [1, 288, 312, 418, 433, 508, 653, 667, 687, 690, 704, 705, 714, 951, 1178], "alia": [1, 14, 72, 74, 76, 175, 195, 208, 216, 247, 254, 279, 286, 290, 312, 314, 315, 316, 317, 331, 332, 333, 334, 335, 337, 339, 343, 344, 345, 346, 349, 351, 352, 353, 356, 357, 361, 363, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 383, 385, 386, 387, 388, 389, 390, 392, 393, 405, 407, 410, 412, 416, 418, 422, 423, 426, 433, 436, 437, 438, 446, 450, 465, 466, 467, 468, 484, 486, 488, 489, 493, 494, 495, 496, 498, 501, 504, 506, 508, 509, 516, 517, 520, 522, 526, 529, 532, 534, 554, 570, 572, 575, 577, 578, 582, 583, 595, 596, 597, 598, 599, 604, 605, 615, 616, 617, 625, 626, 627, 633, 634, 641, 642, 643, 646, 647, 648, 649, 653, 654, 658, 663, 664, 667, 668, 678, 679, 689, 690, 696, 701, 704, 714, 752, 758, 764, 780, 797, 801, 825, 881, 889, 891, 897, 917, 920, 924, 926, 988, 1001, 1035, 1054, 1059, 1105, 1106, 1125, 1126, 1178], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 58, 61, 601, 602, 603, 612, 1007, 1129, 1130, 1131, 1140], "select": [1, 32, 57, 58, 59, 72, 73, 74, 75, 107, 108, 109, 110, 111, 112, 114, 116, 120, 122, 128, 137, 189, 193, 196, 204, 207, 217, 223, 229, 242, 247, 250, 279, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 320, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 346, 355, 356, 357, 364, 365, 368, 371, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 404, 406, 408, 413, 415, 416, 417, 419, 420, 423, 424, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 471, 472, 476, 477, 479, 480, 481, 482, 483, 487, 489, 490, 491, 492, 503, 505, 507, 508, 514, 515, 518, 519, 520, 523, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 548, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 576, 577, 578, 579, 580, 581, 590, 597, 598, 601, 602, 603, 606, 609, 610, 612, 613, 615, 616, 619, 622, 623, 624, 626, 628, 629, 630, 631, 632, 635, 637, 640, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 663, 665, 666, 667, 668, 669, 671, 675, 680, 682, 683, 684, 686, 689, 690, 694, 695, 696, 697, 699, 703, 710, 714, 738, 761, 774, 783, 784, 789, 797, 803, 825, 828, 849, 851, 920, 990, 991, 1001, 1079, 1080, 1092, 1109, 1134, 1150, 1178, 1185], "shape": [1, 2, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 54, 57, 58, 59, 61, 63, 64, 72, 73, 74, 75, 76, 80, 81, 82, 94, 97, 98, 99, 100, 101, 102, 103, 104, 122, 128, 138, 140, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 169, 171, 172, 174, 175, 180, 181, 183, 184, 185, 186, 188, 189, 192, 193, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 222, 226, 229, 230, 231, 232, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 710, 714, 729, 731, 733, 734, 736, 737, 739, 740, 741, 744, 745, 746, 747, 748, 749, 751, 752, 757, 759, 760, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 784, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 834, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 860, 862, 863, 865, 866, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 904, 905, 907, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 943, 944, 945, 948, 949, 950, 951, 952, 954, 957, 958, 959, 962, 963, 965, 967, 969, 971, 972, 975, 976, 977, 978, 979, 983, 985, 990, 991, 998, 1000, 1001, 1002, 1005, 1007, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1034, 1035, 1036, 1041, 1048, 1050, 1051, 1052, 1054, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1083, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1097, 1098, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1116, 1117, 1118, 1119, 1120, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1147, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1161, 1162, 1163, 1164, 1165, 1166, 1169, 1178, 1185], "3": [1, 2, 12, 13, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 54, 57, 59, 60, 62, 64, 72, 73, 74, 75, 76, 80, 82, 97, 98, 99, 100, 101, 102, 103, 104, 111, 113, 119, 122, 128, 130, 131, 132, 133, 134, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 287, 288, 289, 291, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 352, 353, 355, 356, 361, 363, 368, 370, 371, 372, 373, 375, 377, 378, 379, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 433, 434, 436, 437, 438, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 480, 481, 482, 483, 484, 486, 488, 489, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 563, 565, 566, 567, 570, 571, 574, 575, 577, 578, 579, 580, 582, 583, 586, 591, 594, 595, 596, 597, 598, 599, 600, 607, 611, 615, 616, 617, 618, 620, 621, 622, 626, 629, 630, 631, 633, 634, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 710, 714, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 834, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 860, 862, 863, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 894, 897, 898, 900, 902, 903, 904, 909, 910, 912, 918, 920, 921, 922, 924, 926, 927, 928, 930, 931, 933, 935, 937, 938, 942, 943, 944, 945, 948, 949, 950, 951, 952, 954, 957, 958, 959, 962, 963, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 986, 987, 996, 998, 1000, 1001, 1002, 1005, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1087, 1089, 1090, 1091, 1092, 1093, 1095, 1099, 1102, 1103, 1105, 1106, 1107, 1108, 1110, 1111, 1114, 1119, 1122, 1123, 1127, 1128, 1135, 1139, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1178, 1185, 1186], "1": [1, 2, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 53, 54, 57, 58, 59, 60, 61, 62, 64, 72, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 113, 114, 119, 122, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 138, 140, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 590, 591, 592, 597, 598, 599, 601, 602, 603, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 710, 714, 729, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 764, 767, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 862, 863, 865, 866, 867, 869, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 897, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 948, 949, 950, 951, 952, 954, 957, 958, 959, 962, 963, 965, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 985, 987, 990, 991, 998, 1000, 1001, 1002, 1004, 1005, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1105, 1107, 1108, 1109, 1110, 1111, 1119, 1125, 1126, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1178, 1185, 1186], "2": [1, 2, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 54, 57, 59, 60, 62, 64, 72, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 111, 122, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 290, 292, 294, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 319, 321, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 343, 345, 346, 349, 351, 353, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 563, 564, 565, 566, 567, 569, 572, 575, 577, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 678, 679, 680, 682, 683, 684, 686, 689, 693, 694, 695, 696, 697, 699, 702, 703, 704, 710, 714, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 757, 758, 760, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 778, 779, 780, 781, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 834, 837, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 862, 863, 865, 866, 867, 868, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 888, 890, 892, 893, 896, 898, 902, 903, 904, 909, 910, 912, 913, 914, 919, 920, 921, 925, 935, 937, 938, 939, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 954, 957, 958, 959, 962, 963, 965, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 987, 998, 1000, 1001, 1002, 1005, 1007, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1097, 1100, 1105, 1107, 1108, 1109, 1111, 1118, 1119, 1120, 1125, 1126, 1129, 1130, 1131, 1134, 1136, 1137, 1138, 1140, 1141, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1178, 1185, 1186], "column_0": [1, 196, 245, 279], "register_dataframe_namespac": [1, 74, 75, 76], "split": [1, 34, 73, 191, 279, 597, 598, 1125, 1126], "splitfram": [1, 73], "df": [1, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 54, 57, 58, 73, 74, 97, 98, 99, 100, 101, 102, 103, 104, 109, 110, 111, 122, 136, 138, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 710, 714, 752, 780, 784, 797, 798, 811, 813, 821, 825, 828, 849, 851, 862, 920, 990, 991, 1001, 1109, 1120, 1125, 1126, 1156, 1178, 1186], "_df": [1, 73], "by_alternate_row": 1, "list": [1, 2, 15, 33, 34, 42, 57, 61, 72, 73, 75, 78, 79, 97, 99, 100, 101, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 136, 137, 138, 140, 154, 157, 160, 161, 162, 166, 172, 174, 175, 183, 190, 203, 206, 217, 218, 219, 222, 230, 236, 237, 245, 246, 247, 248, 254, 258, 259, 279, 287, 309, 310, 337, 399, 405, 415, 485, 487, 489, 498, 499, 521, 529, 535, 536, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 565, 566, 578, 596, 615, 616, 621, 625, 644, 648, 659, 662, 664, 672, 674, 676, 679, 694, 696, 702, 714, 738, 742, 744, 748, 751, 752, 782, 790, 796, 797, 801, 803, 806, 807, 825, 828, 850, 851, 867, 881, 942, 947, 952, 955, 959, 960, 971, 1054, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1077, 1106, 1124, 1150, 1158, 1161, 1178, 1186], "with_row_count": [1, 279, 488, 543, 544, 546, 549, 550, 551, 714, 825, 1080, 1178], "name": [1, 19, 23, 25, 31, 32, 34, 37, 51, 58, 59, 60, 61, 62, 73, 74, 75, 76, 80, 86, 97, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 138, 139, 140, 141, 150, 151, 154, 157, 158, 159, 162, 166, 167, 168, 171, 173, 174, 177, 189, 190, 192, 193, 196, 200, 201, 206, 208, 212, 217, 218, 219, 221, 222, 223, 230, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 254, 255, 256, 257, 258, 279, 288, 293, 312, 314, 315, 316, 337, 397, 418, 427, 429, 430, 431, 433, 477, 486, 489, 497, 499, 501, 521, 527, 529, 537, 566, 578, 579, 615, 616, 618, 635, 636, 637, 638, 640, 642, 643, 644, 647, 648, 649, 650, 652, 655, 656, 658, 665, 671, 672, 680, 681, 684, 685, 688, 690, 691, 692, 693, 696, 697, 698, 699, 701, 704, 710, 714, 731, 733, 738, 740, 741, 744, 748, 751, 754, 760, 761, 770, 771, 778, 781, 782, 783, 784, 790, 795, 796, 797, 798, 801, 802, 803, 804, 806, 825, 828, 831, 868, 881, 1028, 1054, 1059, 1105, 1106, 1107, 1119, 1143, 1145, 1155, 1156, 1160, 1178, 1185, 1186], "n": [1, 14, 15, 18, 26, 31, 38, 42, 44, 51, 59, 60, 73, 74, 75, 76, 106, 108, 109, 122, 147, 152, 163, 175, 181, 190, 191, 195, 196, 218, 219, 220, 226, 227, 231, 233, 234, 237, 239, 251, 263, 273, 279, 317, 336, 339, 344, 345, 352, 377, 389, 400, 414, 438, 447, 454, 464, 465, 469, 474, 477, 522, 525, 535, 549, 551, 553, 556, 557, 563, 568, 582, 583, 591, 597, 598, 601, 602, 608, 620, 622, 626, 627, 632, 634, 650, 658, 659, 660, 661, 662, 663, 669, 671, 687, 690, 691, 692, 695, 699, 703, 705, 714, 734, 736, 752, 757, 764, 786, 787, 791, 793, 794, 799, 811, 821, 825, 828, 834, 857, 868, 880, 883, 889, 890, 897, 926, 938, 948, 949, 958, 988, 998, 1005, 1015, 1016, 1020, 1025, 1028, 1050, 1072, 1074, 1076, 1083, 1084, 1091, 1095, 1110, 1111, 1119, 1125, 1126, 1136, 1149, 1151, 1157, 1162, 1167, 1178, 1185, 1186], "filter": [1, 73, 112, 122, 123, 128, 159, 186, 187, 188, 208, 265, 279, 497, 499, 575, 599, 633, 667, 704, 714, 741, 745, 758, 813, 825, 828, 1079, 1178], "col": [1, 14, 31, 34, 51, 72, 73, 74, 75, 101, 103, 122, 136, 138, 166, 174, 175, 187, 189, 194, 196, 204, 207, 208, 216, 217, 222, 230, 247, 248, 254, 258, 279, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 416, 417, 418, 419, 422, 423, 426, 427, 429, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 476, 477, 479, 480, 481, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 645, 647, 648, 649, 653, 654, 655, 663, 666, 667, 668, 669, 670, 675, 680, 684, 688, 689, 697, 704, 714, 735, 748, 751, 752, 758, 763, 774, 780, 782, 790, 797, 801, 803, 806, 825, 828, 849, 851, 862, 917, 920, 990, 991, 1001, 1060, 1079, 1080, 1109, 1134, 1178, 1186], "0": [1, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 39, 53, 54, 57, 62, 72, 73, 74, 76, 80, 82, 98, 108, 109, 110, 111, 113, 114, 116, 119, 120, 122, 125, 126, 127, 128, 130, 135, 136, 137, 138, 140, 146, 147, 149, 151, 152, 153, 155, 156, 157, 160, 164, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 189, 190, 191, 192, 194, 196, 197, 198, 199, 202, 203, 204, 205, 208, 209, 210, 214, 218, 219, 220, 221, 222, 227, 229, 230, 231, 232, 238, 239, 240, 241, 242, 245, 248, 250, 251, 254, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 279, 285, 287, 288, 290, 293, 295, 296, 297, 298, 299, 300, 303, 304, 305, 318, 319, 322, 323, 325, 326, 327, 328, 329, 331, 336, 337, 338, 341, 342, 350, 353, 354, 357, 358, 360, 361, 362, 367, 371, 373, 374, 381, 382, 384, 385, 386, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 406, 407, 410, 412, 413, 417, 420, 421, 424, 425, 427, 428, 429, 430, 431, 433, 434, 436, 441, 442, 445, 446, 448, 450, 453, 455, 459, 461, 473, 477, 478, 480, 481, 482, 484, 485, 487, 488, 490, 491, 492, 498, 503, 504, 506, 508, 514, 515, 516, 517, 519, 520, 522, 525, 526, 529, 530, 531, 532, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 560, 561, 562, 563, 567, 568, 571, 572, 577, 578, 584, 585, 586, 587, 593, 594, 600, 606, 608, 617, 619, 623, 624, 625, 627, 632, 633, 635, 639, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 653, 658, 660, 664, 667, 673, 674, 677, 679, 682, 683, 687, 688, 689, 690, 694, 700, 701, 702, 703, 704, 705, 710, 714, 730, 733, 734, 735, 740, 742, 746, 747, 750, 751, 752, 753, 754, 755, 756, 759, 760, 763, 765, 766, 769, 773, 775, 776, 777, 781, 782, 787, 788, 790, 791, 799, 801, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 825, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 858, 863, 865, 866, 868, 870, 871, 873, 874, 875, 880, 881, 882, 884, 885, 886, 895, 898, 899, 903, 904, 905, 906, 907, 908, 910, 911, 915, 916, 920, 922, 923, 930, 931, 933, 934, 935, 941, 943, 944, 945, 950, 954, 957, 959, 962, 967, 968, 970, 972, 974, 976, 977, 978, 979, 985, 986, 996, 999, 1001, 1004, 1006, 1010, 1024, 1028, 1029, 1034, 1038, 1039, 1050, 1054, 1055, 1056, 1063, 1064, 1065, 1067, 1068, 1070, 1071, 1072, 1074, 1075, 1076, 1084, 1088, 1089, 1090, 1094, 1095, 1099, 1100, 1105, 1106, 1109, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1134, 1136, 1152, 1153, 1155, 1160, 1161, 1165, 1167, 1168, 1178, 1186], "drop": [1, 100, 158, 159, 196, 246, 254, 279, 339, 341, 342, 447, 449, 529, 714, 741, 796, 801, 825, 883, 885, 886, 998, 1000, 1054, 1178], "aaa": [1, 34, 279, 570, 615, 616, 1098], "bbb": [1, 34, 279, 615, 616, 828], "ccc": [1, 34, 279, 615, 616], "ddd": [1, 34, 279, 615, 616], "eee": [1, 34, 279, 828], "fff": 1, "column": [1, 18, 19, 22, 23, 25, 33, 34, 37, 42, 63, 72, 73, 80, 82, 84, 86, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 138, 150, 151, 155, 157, 158, 159, 160, 162, 166, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 183, 184, 189, 190, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 230, 231, 232, 236, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 258, 279, 288, 289, 291, 303, 309, 324, 330, 337, 345, 347, 348, 349, 353, 355, 356, 357, 359, 361, 363, 366, 369, 370, 373, 375, 376, 378, 387, 388, 390, 397, 399, 403, 405, 418, 433, 437, 443, 451, 471, 475, 476, 477, 488, 489, 495, 497, 499, 508, 510, 511, 512, 513, 521, 527, 529, 533, 535, 536, 540, 543, 544, 545, 546, 547, 549, 550, 551, 558, 565, 566, 569, 576, 597, 598, 606, 607, 608, 609, 611, 618, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 714, 731, 733, 740, 741, 742, 744, 748, 751, 752, 753, 754, 755, 756, 760, 761, 766, 767, 768, 769, 770, 772, 773, 774, 776, 778, 780, 781, 782, 783, 784, 785, 790, 791, 792, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 813, 825, 828, 832, 833, 850, 861, 863, 869, 881, 892, 893, 894, 898, 900, 901, 905, 907, 910, 912, 915, 918, 919, 922, 924, 925, 927, 936, 937, 939, 947, 956, 994, 1002, 1022, 1026, 1027, 1054, 1060, 1085, 1097, 1104, 1125, 1126, 1134, 1135, 1136, 1137, 1139, 1147, 1155, 1156, 1178, 1186], "txt": [1, 14, 122], "utf8": [1, 21, 33, 100, 108, 109, 122, 135, 137, 140, 151, 160, 161, 162, 169, 221, 240, 279, 314, 375, 378, 456, 488, 569, 574, 576, 577, 578, 579, 581, 595, 596, 597, 598, 606, 607, 608, 609, 611, 614, 649, 714, 733, 742, 744, 781, 825, 828, 924, 927, 984, 1007, 1097, 1102, 1104, 1105, 1106, 1107, 1109, 1123, 1124, 1125, 1126, 1134, 1135, 1136, 1137, 1139, 1142, 1178], "register_lazyframe_namespac": [1, 73, 74, 76], "dtypeoper": [1, 75], "ldf": [1, 75, 806, 807, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820], "_ldf": [1, 75], "upcast_integer_typ": [1, 75], "with_column": [1, 14, 75, 175, 207, 216, 248, 255, 279, 286, 288, 304, 314, 319, 321, 324, 332, 335, 337, 339, 343, 349, 351, 352, 353, 361, 363, 368, 369, 370, 371, 372, 373, 375, 377, 378, 387, 388, 392, 393, 401, 402, 407, 410, 412, 413, 417, 418, 422, 426, 427, 429, 430, 431, 433, 436, 450, 465, 466, 467, 468, 469, 484, 486, 488, 489, 504, 506, 508, 509, 510, 511, 512, 513, 516, 517, 521, 522, 525, 526, 527, 529, 532, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 556, 570, 575, 578, 579, 582, 583, 588, 589, 591, 592, 595, 596, 597, 598, 599, 604, 605, 614, 617, 618, 625, 627, 634, 636, 638, 647, 649, 656, 659, 664, 674, 678, 681, 685, 694, 698, 702, 704, 710, 714, 752, 758, 774, 780, 802, 825, 828, 862, 881, 920, 1001, 1054, 1178], "tp": [1, 75], "cast": [1, 33, 74, 75, 97, 131, 132, 133, 134, 169, 175, 176, 178, 179, 207, 216, 241, 254, 279, 292, 321, 334, 335, 344, 375, 378, 488, 520, 525, 534, 540, 580, 581, 614, 619, 625, 649, 694, 714, 752, 753, 755, 756, 774, 780, 801, 825, 828, 862, 864, 878, 879, 889, 924, 927, 1058, 1108, 1109, 1142, 1148, 1156, 1161, 1178], "int64": [1, 2, 33, 34, 37, 74, 75, 80, 108, 160, 169, 175, 176, 178, 179, 194, 207, 216, 221, 235, 241, 279, 306, 307, 308, 310, 334, 335, 379, 380, 381, 382, 383, 384, 385, 397, 525, 534, 540, 580, 619, 625, 641, 665, 673, 674, 676, 690, 696, 714, 735, 742, 752, 753, 755, 756, 758, 763, 774, 780, 781, 784, 825, 847, 848, 849, 851, 878, 879, 928, 929, 930, 931, 932, 933, 934, 1058, 1078, 1148, 1159, 1160, 1161, 1178], "int8": [1, 75, 169, 279, 309, 334, 335, 476, 619, 687, 690, 705, 714, 850, 878, 879, 883, 1027, 1035, 1061, 1148, 1165, 1178], "int16": [1, 75, 334, 335, 619, 714, 828, 878, 879, 1035, 1148, 1157, 1178], "int32": [1, 75, 80, 97, 100, 113, 137, 138, 175, 176, 178, 179, 191, 216, 279, 319, 356, 390, 540, 590, 625, 690, 714, 752, 753, 755, 756, 780, 825, 828, 901, 939, 1034, 1118, 1161, 1178], "b": [1, 30, 31, 33, 35, 36, 39, 59, 60, 62, 64, 75, 80, 97, 98, 99, 100, 101, 102, 103, 104, 113, 146, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 180, 181, 183, 184, 186, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 218, 219, 220, 221, 222, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 288, 289, 291, 292, 305, 311, 312, 314, 315, 316, 319, 321, 330, 337, 340, 397, 399, 401, 402, 403, 405, 408, 413, 415, 417, 418, 420, 424, 427, 429, 430, 431, 433, 437, 443, 450, 456, 465, 466, 467, 468, 486, 489, 494, 505, 508, 509, 510, 511, 518, 519, 521, 525, 527, 529, 532, 537, 539, 558, 564, 566, 576, 580, 591, 618, 629, 633, 635, 636, 637, 638, 640, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 664, 665, 666, 667, 668, 671, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 691, 692, 695, 696, 697, 698, 699, 703, 714, 729, 731, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 757, 760, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 781, 782, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 804, 806, 807, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 831, 834, 861, 862, 863, 864, 881, 882, 884, 941, 942, 948, 951, 963, 971, 984, 1001, 1016, 1017, 1019, 1054, 1059, 1078, 1104, 1108, 1119, 1147, 1160, 1164, 1178, 1185], "4": [1, 2, 15, 18, 26, 30, 31, 33, 34, 35, 36, 39, 54, 57, 59, 60, 62, 64, 72, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 113, 122, 130, 140, 146, 148, 150, 151, 152, 153, 156, 159, 162, 163, 164, 165, 169, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 213, 216, 218, 219, 225, 226, 230, 233, 234, 235, 236, 237, 238, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 290, 292, 305, 306, 307, 308, 309, 311, 317, 319, 322, 323, 324, 330, 331, 332, 333, 334, 335, 336, 338, 340, 345, 349, 369, 370, 371, 372, 375, 378, 380, 383, 385, 386, 388, 392, 393, 398, 399, 401, 402, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 430, 431, 433, 436, 437, 438, 446, 447, 449, 450, 451, 454, 464, 465, 466, 467, 468, 469, 470, 474, 476, 481, 484, 486, 488, 489, 504, 506, 508, 509, 510, 511, 512, 513, 516, 517, 520, 521, 523, 524, 525, 526, 527, 530, 532, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 560, 564, 565, 566, 567, 570, 572, 578, 582, 583, 588, 589, 590, 591, 595, 596, 597, 598, 604, 605, 606, 614, 615, 616, 617, 618, 620, 621, 622, 625, 626, 627, 634, 636, 638, 640, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 664, 666, 667, 671, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 710, 714, 729, 731, 733, 734, 735, 736, 737, 741, 743, 744, 745, 746, 747, 749, 751, 752, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 780, 786, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 834, 837, 844, 847, 848, 849, 850, 857, 866, 867, 869, 880, 882, 884, 898, 905, 907, 910, 912, 913, 914, 915, 919, 920, 921, 924, 927, 929, 932, 934, 935, 936, 937, 948, 950, 951, 958, 959, 962, 963, 965, 971, 976, 977, 978, 979, 983, 998, 1000, 1001, 1002, 1005, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1027, 1035, 1042, 1050, 1051, 1052, 1056, 1060, 1063, 1068, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1083, 1088, 1092, 1093, 1098, 1100, 1106, 1110, 1111, 1116, 1117, 1118, 1123, 1125, 1126, 1132, 1133, 1134, 1142, 1147, 1149, 1150, 1151, 1157, 1160, 1161, 1162, 1169, 1178, 1186], "c": [1, 30, 31, 33, 35, 36, 39, 59, 60, 62, 64, 73, 75, 80, 98, 100, 102, 104, 113, 122, 136, 146, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 166, 167, 169, 170, 172, 173, 174, 175, 181, 183, 184, 191, 192, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 215, 217, 220, 221, 222, 229, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 244, 245, 248, 249, 251, 252, 254, 258, 261, 262, 263, 264, 266, 267, 269, 272, 273, 279, 286, 288, 289, 291, 293, 311, 337, 418, 433, 443, 456, 486, 489, 508, 509, 521, 525, 529, 558, 597, 606, 629, 636, 638, 640, 646, 647, 649, 650, 651, 652, 653, 654, 656, 666, 667, 668, 671, 675, 678, 680, 681, 682, 683, 684, 685, 686, 695, 697, 698, 699, 703, 710, 714, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 748, 751, 752, 760, 763, 770, 773, 775, 778, 779, 781, 782, 788, 789, 790, 795, 798, 801, 803, 806, 809, 810, 811, 812, 814, 815, 817, 820, 821, 825, 828, 863, 881, 882, 963, 984, 1054, 1125, 1134, 1164, 1178], "5": [1, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 33, 35, 36, 39, 60, 62, 64, 72, 73, 75, 76, 80, 97, 100, 101, 102, 103, 104, 106, 109, 130, 131, 133, 138, 151, 152, 153, 156, 162, 163, 164, 165, 169, 171, 172, 173, 174, 175, 181, 182, 184, 185, 187, 189, 190, 193, 194, 195, 196, 198, 200, 203, 204, 206, 208, 209, 210, 213, 216, 219, 225, 226, 230, 233, 234, 235, 236, 237, 238, 240, 243, 248, 249, 250, 253, 254, 256, 258, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 287, 290, 317, 319, 321, 323, 324, 336, 337, 338, 339, 340, 345, 346, 371, 373, 375, 378, 379, 385, 393, 396, 397, 400, 402, 406, 407, 410, 412, 414, 415, 418, 422, 426, 427, 429, 430, 431, 433, 436, 438, 446, 450, 451, 454, 458, 461, 464, 465, 466, 467, 468, 469, 472, 474, 504, 506, 508, 517, 520, 521, 522, 523, 524, 525, 529, 530, 532, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 560, 566, 572, 581, 582, 583, 590, 617, 620, 622, 626, 627, 640, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 663, 664, 665, 666, 667, 671, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 695, 697, 698, 699, 703, 710, 714, 733, 734, 735, 736, 737, 743, 744, 745, 746, 747, 749, 751, 752, 757, 759, 761, 762, 763, 764, 768, 769, 770, 775, 780, 786, 788, 789, 790, 791, 792, 793, 794, 798, 800, 801, 804, 806, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 834, 837, 841, 844, 857, 862, 867, 869, 876, 880, 881, 882, 883, 884, 890, 891, 892, 893, 894, 920, 922, 924, 925, 927, 928, 934, 936, 937, 945, 948, 949, 958, 959, 962, 963, 969, 975, 1001, 1002, 1005, 1009, 1015, 1016, 1017, 1019, 1020, 1025, 1034, 1035, 1042, 1050, 1051, 1052, 1054, 1055, 1056, 1060, 1063, 1065, 1066, 1067, 1069, 1070, 1073, 1076, 1078, 1088, 1094, 1100, 1109, 1110, 1118, 1149, 1162, 1165, 1169, 1178, 1186], "6": [1, 15, 30, 31, 33, 34, 35, 36, 37, 38, 39, 60, 62, 63, 64, 73, 75, 80, 81, 82, 97, 100, 101, 102, 103, 130, 151, 154, 157, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 173, 175, 181, 183, 184, 185, 187, 189, 190, 192, 196, 197, 198, 199, 200, 202, 205, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 226, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 247, 248, 250, 251, 252, 254, 256, 263, 272, 273, 279, 286, 290, 311, 319, 334, 335, 340, 345, 349, 363, 368, 369, 370, 387, 388, 391, 393, 401, 402, 408, 414, 415, 417, 438, 439, 440, 451, 465, 466, 467, 468, 489, 517, 520, 528, 531, 532, 533, 536, 538, 540, 543, 544, 545, 546, 547, 549, 550, 551, 554, 566, 572, 576, 582, 583, 590, 617, 620, 622, 634, 653, 654, 655, 664, 667, 678, 679, 697, 710, 714, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 752, 757, 759, 760, 762, 764, 766, 770, 773, 775, 778, 780, 781, 782, 784, 786, 788, 789, 790, 793, 794, 797, 800, 801, 804, 811, 820, 821, 825, 828, 867, 873, 875, 878, 879, 884, 917, 937, 959, 990, 991, 1002, 1016, 1017, 1019, 1042, 1056, 1060, 1062, 1068, 1070, 1072, 1074, 1078, 1100, 1104, 1110, 1118, 1148, 1178, 1185, 1186], "7": [1, 30, 31, 33, 34, 35, 36, 37, 38, 39, 62, 73, 75, 80, 151, 154, 155, 156, 157, 158, 160, 162, 166, 167, 170, 175, 181, 183, 185, 192, 197, 198, 199, 201, 202, 205, 208, 210, 212, 214, 216, 217, 219, 220, 221, 222, 226, 229, 231, 232, 233, 234, 239, 240, 241, 242, 248, 250, 251, 252, 279, 286, 290, 308, 335, 345, 349, 369, 371, 372, 386, 388, 398, 414, 417, 438, 465, 466, 467, 468, 488, 520, 532, 536, 540, 550, 566, 609, 620, 622, 653, 654, 661, 667, 678, 679, 697, 714, 733, 738, 740, 742, 744, 748, 752, 757, 759, 760, 764, 771, 773, 776, 778, 780, 781, 782, 786, 793, 794, 825, 828, 841, 849, 890, 894, 901, 920, 921, 935, 937, 985, 1016, 1017, 1019, 1035, 1060, 1073, 1137, 1178, 1186], "float32": [1, 31, 51, 75, 151, 169, 239, 240, 279, 676, 733, 825, 828, 966, 1034, 1178], "lazi": [1, 57, 58, 59, 60, 62, 75, 80, 122, 138, 193, 207, 208, 279, 489, 669, 687, 690, 705, 714, 760, 761, 803, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 825, 828, 1185, 1186], "i16": [1, 75, 558, 714, 828, 1035, 1157, 1178, 1186], "i32": [1, 75, 97, 100, 104, 137, 138, 222, 279, 319, 356, 390, 538, 558, 590, 704, 714, 782, 825, 901, 939, 1034, 1062, 1118, 1178, 1186], "f32": [1, 75, 151, 159, 239, 279, 558, 714, 733, 741, 825, 828, 1034, 1178], "i64": [1, 2, 15, 18, 22, 54, 57, 59, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 110, 122, 150, 152, 153, 154, 157, 159, 160, 162, 163, 165, 166, 171, 172, 173, 174, 175, 181, 183, 184, 186, 188, 192, 193, 196, 197, 200, 201, 202, 206, 207, 208, 209, 212, 213, 214, 215, 216, 220, 222, 226, 229, 230, 232, 233, 234, 236, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 269, 272, 273, 279, 286, 288, 292, 306, 307, 308, 310, 311, 317, 321, 324, 332, 333, 334, 335, 337, 339, 340, 352, 377, 379, 380, 381, 382, 383, 384, 385, 397, 399, 400, 402, 403, 404, 405, 407, 408, 411, 414, 415, 416, 417, 418, 422, 426, 427, 429, 430, 431, 433, 435, 438, 447, 449, 450, 451, 452, 453, 454, 457, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 483, 486, 487, 489, 504, 505, 506, 508, 509, 510, 511, 512, 513, 521, 522, 525, 526, 527, 528, 529, 532, 533, 534, 536, 537, 538, 539, 540, 553, 555, 556, 558, 559, 560, 564, 565, 566, 591, 592, 614, 615, 616, 617, 618, 619, 620, 621, 622, 626, 627, 628, 630, 633, 641, 647, 649, 653, 654, 655, 656, 663, 664, 665, 666, 667, 671, 673, 674, 675, 676, 678, 679, 680, 681, 684, 685, 689, 693, 694, 697, 698, 699, 704, 710, 714, 731, 734, 736, 737, 739, 740, 741, 744, 745, 747, 748, 749, 751, 752, 757, 760, 761, 762, 764, 766, 767, 770, 771, 772, 774, 775, 778, 779, 780, 782, 784, 786, 789, 790, 792, 793, 794, 795, 796, 797, 798, 801, 804, 806, 807, 810, 811, 812, 813, 814, 817, 820, 821, 825, 828, 831, 834, 847, 848, 849, 851, 857, 862, 869, 872, 876, 877, 878, 879, 881, 882, 897, 926, 928, 929, 930, 931, 932, 933, 934, 948, 949, 951, 952, 958, 971, 998, 1000, 1001, 1002, 1005, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1028, 1036, 1041, 1054, 1059, 1060, 1062, 1066, 1069, 1073, 1076, 1079, 1080, 1083, 1087, 1088, 1092, 1093, 1147, 1149, 1150, 1151, 1156, 1162, 1163, 1169, 1178, 1185, 1186], "register_series_namespac": [1, 73, 74, 75], "math": [1, 76, 338, 642, 643, 714, 873, 875, 1089, 1152, 1178], "mathshortcut": [1, 76], "": [1, 2, 13, 31, 34, 39, 51, 57, 60, 64, 76, 97, 98, 104, 108, 109, 110, 111, 113, 119, 123, 124, 127, 128, 140, 150, 151, 159, 161, 174, 175, 177, 178, 184, 192, 193, 200, 206, 208, 213, 214, 219, 222, 223, 230, 234, 238, 244, 246, 247, 248, 249, 254, 255, 279, 352, 375, 378, 397, 434, 454, 456, 470, 474, 487, 489, 498, 505, 514, 515, 521, 522, 534, 538, 566, 570, 577, 578, 579, 591, 595, 596, 598, 606, 607, 608, 611, 612, 615, 616, 635, 636, 637, 638, 644, 650, 655, 656, 665, 668, 669, 678, 679, 680, 681, 684, 685, 693, 694, 696, 697, 698, 710, 714, 731, 733, 740, 741, 751, 752, 754, 755, 761, 770, 782, 783, 790, 795, 796, 797, 798, 801, 802, 808, 813, 825, 828, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 857, 858, 860, 861, 863, 864, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 894, 896, 897, 900, 902, 903, 907, 909, 913, 914, 918, 921, 922, 924, 927, 935, 937, 938, 939, 942, 943, 944, 945, 949, 950, 951, 952, 954, 957, 958, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 998, 1000, 1002, 1005, 1007, 1009, 1015, 1020, 1021, 1022, 1025, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1098, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1116, 1117, 1118, 1119, 1123, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1178], "_": [1, 72, 76, 208, 238, 279, 456, 578, 582, 583, 596, 597, 863, 1106, 1110, 1111, 1125, 1155, 1178], "squar": [1, 76, 265, 434, 567, 714, 813, 986, 1094, 1178], "cube": [1, 76, 322, 526, 714, 865, 1178], "s2": [1, 63, 81, 82, 133, 134, 169, 279, 867, 884, 971, 985, 1028, 1042, 1078, 1160, 1169, 1178], "renam": [1, 100, 108, 109, 147, 149, 176, 177, 178, 179, 222, 223, 254, 255, 258, 260, 279, 288, 293, 421, 425, 428, 445, 448, 455, 459, 473, 478, 485, 486, 501, 509, 510, 511, 527, 541, 571, 584, 585, 586, 587, 593, 594, 600, 616, 618, 639, 677, 693, 696, 714, 730, 753, 754, 755, 756, 765, 777, 782, 783, 801, 802, 805, 806, 808, 825, 831, 835, 881, 968, 974, 996, 999, 1006, 1010, 1024, 1029, 1054, 1064, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1145, 1156, 1178], "n2": [1, 477], "in_plac": [1, 183, 228, 252, 279, 1057, 1086, 1093, 1178], "true": [1, 6, 12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 37, 39, 51, 52, 53, 57, 59, 61, 78, 79, 80, 97, 98, 102, 104, 106, 108, 109, 110, 112, 113, 114, 116, 119, 120, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 144, 146, 150, 151, 152, 153, 156, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 187, 188, 190, 193, 194, 198, 203, 204, 206, 208, 209, 216, 217, 218, 219, 220, 222, 230, 236, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 254, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 287, 288, 289, 290, 291, 292, 293, 304, 312, 313, 315, 316, 319, 331, 332, 333, 334, 335, 337, 344, 346, 349, 352, 355, 357, 364, 365, 368, 369, 371, 372, 373, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 410, 411, 412, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 434, 436, 439, 440, 444, 471, 475, 477, 484, 489, 493, 494, 495, 496, 497, 498, 500, 501, 516, 517, 518, 520, 523, 524, 529, 534, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 558, 563, 565, 566, 569, 570, 572, 573, 575, 580, 581, 590, 596, 597, 599, 606, 607, 608, 611, 615, 616, 621, 628, 631, 634, 635, 636, 637, 638, 639, 641, 644, 645, 650, 651, 658, 659, 660, 661, 662, 667, 673, 674, 679, 687, 690, 696, 701, 702, 704, 705, 714, 731, 733, 734, 735, 736, 737, 743, 745, 747, 751, 752, 753, 754, 755, 756, 760, 761, 763, 765, 766, 770, 775, 780, 782, 784, 788, 790, 795, 796, 797, 798, 801, 807, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 825, 828, 832, 833, 834, 835, 845, 853, 858, 861, 864, 867, 868, 881, 888, 889, 891, 894, 896, 897, 898, 900, 904, 905, 907, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 952, 956, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 990, 991, 1022, 1026, 1036, 1042, 1048, 1051, 1052, 1054, 1058, 1071, 1078, 1091, 1093, 1097, 1098, 1100, 1101, 1103, 1108, 1109, 1118, 1124, 1125, 1127, 1134, 1135, 1136, 1139, 1159, 1160, 1168, 1169, 1178, 1185, 1186], "s3": [1, 33, 112, 123, 124, 127, 128, 279, 1028, 1178], "n3": 1, "8": [1, 13, 30, 31, 33, 35, 36, 37, 38, 39, 50, 57, 62, 69, 71, 72, 73, 75, 76, 80, 130, 136, 151, 154, 155, 156, 157, 158, 159, 160, 162, 166, 167, 170, 173, 181, 183, 192, 196, 197, 198, 199, 202, 210, 212, 214, 217, 219, 220, 221, 222, 226, 229, 231, 232, 233, 234, 239, 240, 241, 242, 248, 251, 252, 254, 279, 290, 292, 305, 330, 332, 335, 336, 345, 417, 437, 447, 450, 459, 465, 466, 467, 468, 506, 520, 526, 536, 537, 542, 558, 564, 566, 584, 587, 588, 589, 606, 622, 634, 640, 646, 650, 651, 652, 654, 656, 664, 666, 671, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 695, 698, 699, 703, 714, 733, 738, 740, 741, 742, 744, 748, 757, 760, 764, 766, 775, 778, 781, 782, 786, 793, 794, 801, 825, 828, 834, 875, 880, 901, 959, 985, 998, 1001, 1010, 1016, 1017, 1019, 1050, 1060, 1063, 1065, 1068, 1070, 1072, 1074, 1112, 1115, 1116, 1117, 1134, 1178, 1186], "9": [1, 30, 31, 33, 34, 35, 36, 39, 57, 62, 72, 80, 130, 155, 156, 169, 176, 181, 185, 196, 216, 218, 219, 222, 233, 248, 252, 254, 272, 279, 286, 290, 292, 305, 318, 330, 332, 335, 338, 345, 417, 423, 433, 437, 447, 463, 471, 508, 520, 531, 536, 540, 542, 548, 550, 560, 564, 578, 609, 622, 648, 653, 654, 702, 714, 753, 757, 759, 764, 780, 782, 793, 801, 820, 825, 828, 882, 894, 905, 907, 915, 921, 935, 936, 971, 985, 998, 1022, 1060, 1065, 1071, 1073, 1075, 1088, 1106, 1137, 1178], "27": [1, 76, 272, 335, 363, 370, 387, 714, 820, 1178, 1186], "16": [1, 34, 47, 66, 74, 175, 216, 254, 279, 332, 335, 417, 506, 526, 540, 590, 653, 663, 664, 667, 714, 752, 780, 788, 801, 825, 828, 921, 935, 1050, 1089, 1118, 1152, 1178], "64": [1, 46, 49, 68, 74, 76, 129, 146, 329, 506, 526, 714, 1050, 1178], "25": [1, 34, 76, 104, 138, 156, 175, 193, 216, 250, 254, 279, 339, 349, 351, 369, 372, 386, 388, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 627, 658, 659, 661, 662, 663, 669, 679, 701, 702, 714, 752, 761, 768, 780, 799, 801, 825, 828, 882, 883, 896, 921, 935, 941, 959, 1050, 1054, 1178], "125": [1, 34, 76, 279, 286, 714, 1050, 1178], "arg": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 166, 207, 241, 279, 525, 644, 668, 714, 748, 774, 825, 1036, 1159, 1160, 1178], "ani": [2, 3, 4, 5, 9, 31, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 77, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 135, 137, 138, 140, 144, 147, 155, 159, 163, 165, 166, 169, 189, 190, 191, 196, 206, 207, 217, 218, 219, 236, 237, 240, 241, 246, 248, 249, 279, 286, 289, 290, 293, 319, 373, 392, 393, 402, 407, 410, 412, 423, 436, 443, 450, 484, 485, 487, 488, 489, 501, 504, 506, 510, 511, 516, 517, 520, 521, 525, 527, 536, 541, 542, 554, 569, 590, 602, 603, 604, 605, 606, 607, 608, 611, 617, 618, 621, 627, 634, 635, 638, 639, 650, 666, 675, 676, 679, 704, 714, 741, 747, 748, 774, 796, 798, 825, 828, 832, 834, 835, 884, 922, 948, 951, 971, 985, 994, 1001, 1035, 1036, 1060, 1064, 1065, 1077, 1080, 1097, 1118, 1134, 1135, 1136, 1139, 1150, 1158, 1159, 1160, 1178, 1185, 1186], "kwarg": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 110, 155, 166, 207, 241, 279, 525, 714, 748, 774, 825, 1160, 1178, 1185], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 714, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1178, 1185], "fix": [2, 113, 136, 138, 389, 543, 544, 545, 546, 547, 549, 550, 551, 663, 714, 938], "length": [2, 54, 80, 122, 136, 173, 175, 176, 178, 179, 216, 229, 279, 336, 372, 386, 470, 477, 498, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 564, 582, 583, 585, 587, 588, 589, 593, 595, 614, 687, 690, 691, 692, 705, 714, 752, 753, 755, 756, 775, 780, 789, 825, 867, 880, 890, 921, 935, 1021, 1028, 1047, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1092, 1110, 1111, 1113, 1115, 1116, 1117, 1121, 1123, 1142, 1178], "width": [2, 27, 34, 108, 109, 122, 279, 306, 307, 308, 309, 310, 476, 825, 847, 848, 849, 850, 851, 1027], "int": [2, 14, 15, 16, 18, 26, 27, 31, 34, 39, 43, 51, 53, 59, 62, 74, 100, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 147, 150, 152, 161, 164, 165, 167, 173, 180, 181, 182, 184, 189, 190, 191, 193, 195, 196, 197, 198, 202, 203, 204, 214, 217, 220, 225, 226, 227, 229, 231, 232, 233, 234, 239, 242, 244, 248, 251, 253, 256, 263, 273, 279, 286, 311, 317, 336, 339, 394, 395, 396, 400, 401, 402, 408, 411, 413, 414, 438, 444, 447, 453, 454, 464, 469, 470, 474, 475, 476, 477, 520, 522, 525, 526, 529, 532, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 559, 564, 568, 577, 580, 585, 588, 589, 590, 591, 593, 595, 597, 598, 609, 614, 620, 621, 622, 626, 632, 634, 641, 650, 651, 657, 660, 663, 669, 671, 673, 674, 683, 686, 687, 690, 691, 692, 695, 696, 699, 700, 703, 705, 714, 731, 734, 745, 746, 747, 757, 761, 764, 775, 786, 787, 789, 791, 793, 794, 795, 799, 800, 804, 811, 821, 825, 842, 843, 857, 858, 867, 868, 880, 883, 942, 943, 944, 945, 949, 950, 951, 957, 958, 959, 985, 987, 988, 995, 996, 997, 998, 1004, 1005, 1015, 1020, 1021, 1025, 1026, 1027, 1028, 1038, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1056, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1105, 1108, 1113, 1116, 1117, 1118, 1119, 1121, 1123, 1125, 1126, 1137, 1142, 1148, 1149, 1150, 1151, 1157, 1162, 1167, 1178, 1185, 1186], "none": [2, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 51, 52, 53, 55, 57, 59, 60, 62, 72, 79, 82, 97, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 152, 156, 159, 164, 165, 173, 175, 176, 178, 179, 180, 185, 189, 192, 193, 194, 196, 198, 200, 204, 205, 208, 216, 217, 220, 226, 227, 229, 230, 236, 238, 241, 245, 246, 247, 248, 249, 250, 279, 289, 291, 292, 293, 305, 311, 324, 330, 332, 335, 337, 341, 342, 368, 371, 372, 386, 393, 394, 395, 396, 397, 400, 401, 402, 408, 413, 417, 418, 427, 429, 430, 431, 437, 439, 440, 449, 453, 458, 464, 465, 466, 467, 468, 470, 477, 485, 487, 488, 489, 497, 500, 502, 517, 518, 519, 522, 526, 529, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 556, 557, 558, 559, 560, 564, 565, 569, 570, 572, 574, 575, 578, 580, 581, 582, 583, 586, 588, 589, 590, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 611, 614, 615, 616, 625, 635, 636, 637, 638, 639, 647, 649, 651, 656, 658, 659, 660, 661, 662, 663, 665, 666, 675, 676, 677, 678, 679, 681, 685, 690, 691, 692, 695, 696, 698, 700, 701, 702, 703, 704, 714, 734, 735, 737, 741, 746, 747, 752, 753, 755, 756, 759, 760, 761, 763, 765, 766, 770, 773, 780, 784, 786, 787, 788, 789, 790, 796, 797, 798, 803, 805, 808, 813, 825, 828, 832, 833, 834, 835, 842, 843, 868, 869, 881, 882, 884, 885, 886, 902, 903, 904, 909, 920, 921, 935, 940, 941, 943, 944, 945, 949, 950, 951, 953, 957, 959, 961, 962, 963, 973, 978, 979, 982, 985, 986, 987, 990, 991, 1000, 1004, 1009, 1015, 1016, 1017, 1019, 1021, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1054, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1080, 1082, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1097, 1098, 1100, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1114, 1116, 1117, 1118, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1139, 1142, 1156, 1157, 1158, 1160, 1161, 1167, 1168, 1178, 1185], "inner": [2, 54, 137, 192, 249, 279, 306, 307, 308, 309, 310, 340, 456, 476, 535, 625, 714, 760, 784, 798, 825, 847, 848, 849, 850, 851, 884, 1007, 1027, 1161, 1178], "polarsdatatyp": [2, 54, 108, 109, 115, 121, 122, 135, 136, 137, 138, 140, 147, 151, 160, 196, 279, 293, 319, 397, 485, 487, 488, 489, 580, 639, 665, 676, 677, 678, 679, 687, 690, 705, 710, 714, 733, 742, 825, 828, 835, 858, 1035, 1036, 1108, 1178], "pythondatatyp": [2, 54], "paramet": [2, 7, 8, 11, 13, 14, 15, 16, 17, 18, 21, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 51, 52, 53, 54, 57, 58, 59, 60, 62, 64, 72, 73, 74, 75, 76, 78, 79, 80, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 150, 151, 152, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 203, 204, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 263, 265, 271, 273, 279, 286, 288, 289, 290, 291, 292, 293, 303, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 324, 325, 326, 331, 332, 333, 334, 335, 336, 337, 339, 340, 344, 345, 346, 352, 368, 371, 372, 373, 375, 377, 378, 386, 389, 391, 392, 393, 394, 395, 396, 397, 400, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 423, 434, 436, 438, 443, 444, 445, 446, 447, 450, 453, 454, 456, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 484, 485, 486, 487, 488, 489, 500, 504, 506, 509, 510, 511, 516, 517, 520, 521, 522, 525, 526, 527, 529, 530, 532, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 620, 621, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 714, 731, 733, 734, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 764, 765, 766, 770, 771, 774, 775, 776, 777, 778, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 811, 813, 819, 821, 825, 828, 831, 832, 833, 834, 835, 844, 851, 852, 853, 854, 855, 856, 857, 858, 862, 868, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 889, 890, 891, 897, 917, 920, 921, 922, 924, 926, 927, 935, 938, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 957, 958, 959, 962, 963, 973, 981, 982, 986, 988, 994, 995, 996, 997, 998, 1001, 1004, 1005, 1007, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1050, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1142, 1143, 1145, 1149, 1150, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1166, 1167, 1168, 1169, 1178, 1185], "The": [2, 21, 32, 33, 34, 39, 53, 54, 57, 61, 63, 64, 72, 77, 78, 82, 97, 99, 100, 101, 103, 106, 108, 109, 110, 111, 113, 117, 118, 120, 122, 126, 128, 131, 132, 133, 134, 142, 156, 158, 159, 160, 162, 163, 166, 173, 174, 175, 178, 180, 185, 190, 193, 196, 201, 206, 216, 217, 218, 219, 222, 223, 240, 247, 250, 254, 255, 258, 265, 279, 288, 311, 312, 313, 314, 337, 341, 342, 349, 363, 368, 369, 372, 375, 386, 387, 397, 400, 403, 408, 413, 449, 475, 487, 489, 521, 529, 532, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 560, 563, 569, 573, 574, 580, 586, 588, 589, 594, 600, 601, 602, 603, 604, 605, 606, 665, 669, 679, 691, 692, 693, 696, 704, 706, 707, 709, 710, 714, 715, 716, 719, 721, 722, 723, 741, 744, 748, 752, 755, 757, 759, 761, 764, 766, 771, 775, 780, 782, 783, 784, 797, 801, 802, 806, 813, 825, 831, 834, 852, 853, 854, 868, 881, 882, 885, 886, 894, 912, 917, 918, 921, 924, 935, 936, 948, 949, 952, 957, 1000, 1026, 1036, 1054, 1056, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1080, 1088, 1091, 1097, 1101, 1102, 1108, 1114, 1116, 1117, 1122, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1170, 1172, 1174, 1178, 1179, 1182, 1183, 1184, 1186], "datatyp": [2, 31, 37, 51, 54, 70, 97, 99, 100, 101, 103, 105, 113, 115, 117, 118, 121, 126, 140, 160, 162, 169, 221, 279, 319, 397, 558, 625, 665, 676, 714, 726, 744, 781, 784, 825, 835, 858, 882, 973, 980, 982, 984, 1036, 1085, 1161, 1178], "valu": [2, 9, 13, 14, 15, 18, 29, 31, 34, 37, 51, 54, 55, 57, 61, 63, 70, 72, 80, 82, 100, 102, 108, 109, 110, 111, 113, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 156, 159, 163, 164, 165, 166, 170, 173, 175, 178, 180, 181, 185, 189, 190, 193, 195, 196, 197, 198, 199, 200, 202, 204, 206, 208, 209, 210, 212, 216, 217, 218, 219, 220, 226, 227, 230, 231, 232, 233, 236, 237, 241, 244, 245, 248, 249, 250, 251, 261, 262, 264, 266, 267, 269, 270, 279, 285, 286, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 339, 341, 342, 345, 349, 363, 369, 387, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 449, 452, 453, 454, 457, 458, 460, 461, 462, 464, 469, 472, 474, 479, 481, 483, 484, 487, 488, 489, 490, 491, 492, 503, 504, 505, 506, 507, 514, 515, 516, 517, 519, 521, 522, 525, 526, 529, 530, 532, 535, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 580, 581, 588, 589, 591, 592, 595, 597, 598, 599, 614, 617, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 634, 635, 637, 640, 647, 649, 651, 653, 654, 655, 656, 666, 667, 672, 675, 676, 680, 681, 682, 683, 684, 685, 686, 689, 690, 691, 692, 697, 698, 704, 714, 729, 730, 731, 741, 746, 747, 748, 752, 755, 758, 759, 761, 767, 768, 769, 770, 772, 773, 776, 778, 780, 784, 786, 787, 790, 791, 792, 795, 798, 799, 809, 810, 812, 814, 815, 817, 818, 825, 828, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 853, 854, 855, 856, 862, 866, 869, 870, 871, 873, 874, 875, 880, 881, 882, 883, 885, 886, 890, 894, 912, 918, 936, 942, 943, 944, 945, 948, 949, 950, 951, 954, 956, 957, 958, 959, 960, 962, 963, 965, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 983, 987, 988, 990, 991, 992, 993, 996, 997, 998, 1000, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1020, 1025, 1030, 1035, 1037, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1088, 1089, 1090, 1091, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1116, 1117, 1119, 1120, 1123, 1125, 1126, 1127, 1142, 1148, 1149, 1150, 1151, 1152, 1153, 1159, 1160, 1161, 1164, 1166, 1168, 1169, 1178, 1186], "within": [2, 54, 131, 132, 133, 134, 174, 175, 176, 177, 178, 179, 193, 216, 250, 279, 532, 540, 566, 714, 752, 753, 755, 756, 761, 780, 825, 1185], "each": [2, 31, 34, 51, 54, 72, 109, 110, 126, 131, 132, 133, 134, 136, 173, 174, 175, 176, 177, 178, 179, 191, 193, 196, 206, 216, 220, 241, 247, 249, 250, 257, 258, 261, 263, 265, 273, 279, 337, 372, 386, 421, 422, 425, 426, 454, 458, 459, 464, 474, 482, 489, 529, 532, 539, 545, 547, 549, 551, 553, 559, 566, 578, 582, 583, 584, 587, 597, 598, 641, 644, 649, 673, 674, 696, 704, 714, 736, 752, 753, 755, 756, 761, 775, 780, 797, 798, 806, 808, 809, 811, 813, 821, 825, 867, 881, 921, 935, 968, 969, 974, 975, 1005, 1009, 1010, 1015, 1025, 1054, 1056, 1063, 1076, 1087, 1106, 1110, 1111, 1112, 1115, 1125, 1126, 1147, 1178, 1186], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 72, 73, 74, 75, 76, 80, 81, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 110, 111, 112, 113, 119, 122, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 710, 714, 726, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 954, 957, 958, 959, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987, 990, 991, 998, 1000, 1001, 1002, 1005, 1007, 1009, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1116, 1117, 1118, 1119, 1120, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1178, 1185], "dtype": [2, 34, 42, 63, 75, 81, 82, 97, 99, 101, 103, 104, 108, 109, 110, 111, 117, 118, 119, 122, 135, 136, 137, 138, 140, 146, 151, 175, 176, 178, 179, 193, 216, 239, 240, 241, 248, 279, 293, 319, 320, 334, 335, 389, 397, 443, 475, 483, 485, 487, 488, 489, 534, 535, 540, 543, 544, 545, 546, 547, 549, 550, 551, 558, 580, 606, 619, 621, 625, 630, 639, 641, 651, 665, 669, 673, 674, 676, 677, 678, 679, 687, 690, 696, 705, 714, 733, 752, 753, 755, 756, 761, 780, 825, 828, 847, 848, 850, 858, 860, 861, 863, 868, 878, 879, 882, 883, 938, 942, 966, 973, 982, 994, 1026, 1027, 1034, 1035, 1061, 1078, 1085, 1108, 1134, 1148, 1157, 1159, 1160, 1161, 1165, 1178, 1186], "method": [2, 3, 4, 5, 9, 30, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 98, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 127, 128, 135, 144, 147, 149, 159, 163, 174, 176, 177, 178, 179, 185, 190, 196, 204, 210, 217, 218, 219, 226, 246, 254, 260, 265, 271, 279, 286, 289, 290, 293, 318, 324, 375, 378, 392, 393, 400, 407, 410, 412, 417, 421, 425, 428, 433, 436, 445, 448, 455, 459, 469, 473, 478, 484, 485, 489, 504, 506, 508, 510, 511, 512, 513, 516, 517, 520, 526, 527, 530, 532, 541, 543, 544, 545, 546, 547, 549, 550, 551, 556, 571, 584, 585, 586, 587, 593, 594, 600, 602, 603, 604, 605, 609, 614, 617, 618, 627, 629, 634, 650, 658, 679, 688, 690, 701, 706, 707, 709, 710, 714, 715, 716, 719, 720, 721, 722, 723, 726, 730, 737, 739, 741, 750, 753, 754, 755, 756, 759, 765, 776, 777, 786, 796, 801, 805, 808, 813, 819, 825, 834, 835, 869, 924, 927, 948, 949, 962, 968, 974, 996, 999, 1006, 1010, 1020, 1024, 1029, 1036, 1055, 1056, 1064, 1070, 1083, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1137, 1142, 1161, 1170, 1172, 1174, 1178, 1179, 1182, 1183, 1184], "attribut": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 135, 279, 706, 707, 709, 710, 715, 716, 719, 721, 722, 723, 825, 1170, 1172, 1174, 1179, 1182, 1183, 1184], "A": [5, 15, 31, 34, 51, 57, 60, 78, 79, 104, 108, 109, 110, 111, 122, 124, 129, 142, 169, 175, 192, 193, 208, 236, 248, 249, 250, 254, 255, 279, 285, 341, 342, 345, 392, 393, 400, 410, 412, 420, 424, 427, 429, 436, 477, 484, 487, 498, 516, 517, 537, 542, 543, 544, 545, 546, 547, 549, 550, 551, 570, 571, 572, 577, 578, 579, 581, 591, 592, 614, 648, 663, 664, 668, 714, 752, 760, 761, 778, 798, 801, 802, 825, 828, 885, 886, 890, 949, 1065, 1066, 1067, 1069, 1072, 1073, 1074, 1098, 1099, 1100, 1105, 1106, 1107, 1109, 1119, 1120, 1142, 1178, 1185], "encod": [5, 71, 108, 109, 122, 238, 279, 313, 409, 573, 714, 853, 1101], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 51, 52, 53, 72, 73, 98, 100, 103, 108, 109, 110, 113, 114, 116, 119, 120, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 146, 154, 159, 168, 174, 175, 176, 177, 178, 179, 180, 190, 193, 200, 216, 220, 222, 229, 238, 240, 245, 246, 248, 254, 279, 289, 291, 293, 318, 324, 337, 389, 413, 423, 448, 455, 464, 465, 466, 467, 468, 470, 473, 475, 477, 478, 488, 489, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 559, 563, 564, 569, 586, 594, 595, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 631, 635, 637, 641, 645, 658, 659, 661, 662, 673, 674, 687, 690, 691, 692, 696, 701, 702, 704, 705, 714, 726, 736, 741, 743, 751, 752, 753, 754, 755, 756, 760, 761, 765, 766, 770, 780, 782, 784, 789, 796, 801, 805, 808, 813, 825, 832, 833, 834, 864, 869, 881, 938, 957, 971, 999, 1006, 1015, 1016, 1017, 1018, 1019, 1021, 1024, 1026, 1028, 1029, 1035, 1036, 1054, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1080, 1087, 1091, 1092, 1097, 1114, 1122, 1123, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1139, 1159, 1166, 1178, 1186], "string": [5, 7, 8, 10, 11, 14, 16, 17, 21, 31, 32, 34, 37, 38, 42, 51, 57, 63, 71, 81, 82, 104, 108, 109, 110, 111, 122, 131, 132, 133, 134, 135, 136, 137, 140, 143, 150, 169, 173, 174, 175, 177, 193, 206, 208, 216, 219, 222, 223, 230, 239, 244, 245, 248, 250, 254, 255, 258, 279, 286, 315, 321, 368, 372, 375, 378, 386, 397, 399, 405, 409, 418, 456, 488, 500, 521, 525, 540, 543, 544, 545, 546, 547, 549, 550, 551, 566, 569, 570, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 614, 636, 638, 644, 647, 648, 649, 656, 658, 659, 661, 662, 668, 681, 685, 693, 696, 698, 701, 702, 704, 714, 731, 743, 750, 751, 752, 754, 761, 780, 782, 783, 784, 790, 795, 801, 802, 805, 806, 825, 828, 855, 861, 862, 917, 921, 924, 927, 935, 947, 963, 1007, 1096, 1097, 1098, 1100, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1140, 1141, 1142, 1157, 1178, 1186], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 409, 714, 739, 750, 777, 825], "activ": [6, 12, 19, 20, 22, 23, 24, 25, 28, 450, 578, 1001, 1106], "bool": [6, 12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 37, 39, 51, 52, 53, 72, 78, 79, 80, 81, 82, 97, 98, 102, 104, 108, 109, 113, 114, 116, 118, 119, 120, 122, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 150, 151, 152, 153, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 193, 206, 208, 216, 219, 220, 224, 228, 230, 236, 238, 240, 241, 244, 245, 246, 247, 249, 250, 252, 254, 262, 264, 266, 269, 279, 288, 289, 290, 291, 292, 293, 303, 310, 312, 313, 315, 316, 319, 331, 332, 333, 334, 335, 336, 337, 355, 371, 373, 386, 391, 392, 393, 394, 395, 396, 410, 412, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 434, 436, 439, 440, 444, 450, 464, 471, 475, 479, 484, 485, 487, 489, 493, 494, 495, 496, 497, 500, 516, 517, 518, 520, 523, 524, 529, 532, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 558, 563, 565, 566, 569, 570, 572, 573, 575, 590, 591, 592, 596, 597, 599, 606, 607, 608, 611, 616, 628, 631, 634, 635, 636, 637, 638, 639, 641, 644, 645, 650, 653, 658, 659, 660, 661, 662, 673, 674, 676, 679, 687, 690, 696, 701, 702, 705, 714, 731, 733, 734, 736, 737, 743, 745, 747, 748, 751, 752, 753, 754, 755, 756, 760, 761, 765, 766, 770, 775, 780, 785, 788, 790, 795, 796, 797, 798, 801, 810, 812, 814, 817, 825, 828, 832, 833, 834, 835, 844, 851, 853, 858, 861, 864, 868, 876, 877, 878, 879, 880, 881, 900, 920, 922, 935, 941, 943, 944, 945, 952, 956, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 990, 991, 995, 996, 997, 1001, 1015, 1022, 1026, 1030, 1036, 1048, 1051, 1052, 1054, 1056, 1057, 1058, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1080, 1081, 1086, 1091, 1093, 1097, 1098, 1100, 1101, 1103, 1118, 1119, 1120, 1124, 1125, 1127, 1134, 1135, 1136, 1139, 1158, 1159, 1160, 1163, 1166, 1168, 1178, 1185], "decim": [6, 13, 31, 34, 51, 279, 552, 609, 714, 825, 1075, 1137, 1178], "temporari": 6, "remov": [6, 9, 83, 108, 109, 122, 146, 157, 238, 279, 293, 397, 486, 489, 509, 586, 594, 600, 601, 602, 603, 604, 605, 665, 714, 740, 825, 834, 881, 1054, 1114, 1122, 1128, 1129, 1130, 1131, 1132, 1133, 1136, 1178], "onc": [6, 60, 108, 109, 113, 142, 196, 218, 220, 258, 279, 318, 464, 489, 553, 604, 605, 714, 732, 806, 825, 1015, 1036, 1076, 1132, 1133, 1178], "stabil": 6, "current": [6, 7, 8, 10, 11, 29, 59, 98, 104, 110, 111, 127, 152, 153, 192, 193, 279, 351, 372, 477, 522, 714, 726, 734, 735, 736, 760, 761, 825, 828, 868, 872, 888, 896, 921, 1050, 1178, 1185], "consid": [6, 79, 81, 82, 108, 109, 122, 128, 131, 132, 133, 134, 159, 170, 196, 200, 218, 246, 248, 249, 279, 293, 324, 336, 372, 487, 489, 543, 544, 545, 546, 547, 549, 550, 551, 653, 667, 710, 714, 737, 741, 757, 764, 770, 796, 813, 825, 861, 864, 869, 880, 921, 959, 973, 1036, 1054, 1078, 1079, 1080, 1178], "beta": 6, "cfg": [7, 9, 18, 144], "previous": [7, 8], "save": [7, 8, 11, 175, 193, 216, 250, 279, 343, 351, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 710, 714, 726, 752, 761, 780, 825, 896, 917, 921, 935], "option": [7, 8, 9, 10, 11, 29, 33, 34, 43, 72, 108, 110, 112, 113, 114, 116, 120, 123, 124, 125, 127, 128, 130, 135, 136, 137, 138, 139, 140, 141, 175, 189, 193, 200, 236, 240, 245, 249, 279, 434, 541, 543, 544, 545, 546, 547, 549, 550, 551, 563, 595, 631, 676, 696, 704, 714, 726, 752, 760, 761, 770, 784, 798, 825, 828, 982, 986, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1091, 1123, 1156, 1166, 1178], "from": [7, 8, 9, 10, 11, 31, 34, 51, 57, 58, 59, 72, 80, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 151, 156, 157, 161, 163, 168, 173, 175, 178, 190, 191, 193, 194, 200, 208, 212, 216, 217, 219, 220, 222, 223, 238, 245, 246, 248, 249, 250, 279, 331, 337, 338, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 397, 409, 417, 434, 464, 477, 489, 514, 515, 517, 522, 525, 529, 531, 540, 542, 543, 544, 546, 549, 550, 551, 553, 566, 577, 578, 580, 590, 602, 603, 604, 605, 606, 607, 608, 611, 629, 642, 643, 647, 657, 658, 659, 660, 661, 663, 690, 695, 700, 701, 702, 710, 713, 714, 733, 739, 740, 745, 750, 752, 755, 761, 770, 777, 778, 780, 782, 783, 796, 798, 803, 825, 828, 834, 881, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 948, 982, 986, 1015, 1028, 1045, 1046, 1047, 1050, 1054, 1065, 1076, 1105, 1106, 1108, 1118, 1132, 1133, 1134, 1135, 1136, 1139, 1169, 1178, 1185, 1186], "json": [7, 8, 10, 11, 37, 38, 117, 118, 124, 126, 279, 409, 502, 580, 581, 714, 726, 739, 750, 777, 784, 805, 825, 1108, 1109], "produc": [7, 8, 137, 138, 140, 445, 446, 497, 678, 765, 766, 825, 996, 997], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 30, 31, 35, 36, 37, 38, 39, 51, 52, 53, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 163, 279, 502, 739, 777, 784, 805, 825, 834, 948, 1178], "path": [8, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 279, 502, 555, 581, 714, 739, 777, 784, 788, 805, 825, 1081, 1109, 1178, 1186], "load": [8, 10, 11, 100, 102, 110, 112, 113, 119, 123, 124, 139, 141, 279, 714, 726, 757, 764, 825, 1186], "reset": [9, 144], "default": [9, 12, 16, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 53, 72, 79, 80, 97, 99, 100, 101, 102, 103, 104, 108, 109, 111, 113, 117, 118, 119, 120, 122, 131, 133, 135, 136, 137, 138, 139, 140, 144, 156, 159, 161, 174, 175, 176, 177, 178, 179, 180, 190, 192, 193, 200, 206, 208, 216, 217, 218, 219, 220, 226, 231, 238, 246, 248, 249, 251, 256, 279, 288, 289, 291, 321, 337, 371, 372, 386, 391, 393, 394, 395, 396, 413, 464, 469, 470, 475, 477, 480, 488, 497, 514, 515, 517, 522, 529, 532, 540, 543, 544, 545, 546, 547, 549, 550, 551, 553, 556, 559, 568, 569, 577, 586, 590, 594, 595, 600, 601, 602, 603, 606, 607, 608, 611, 631, 632, 635, 637, 641, 645, 650, 658, 659, 660, 661, 662, 669, 673, 674, 676, 687, 690, 695, 696, 701, 702, 703, 705, 714, 736, 737, 741, 743, 751, 752, 753, 754, 755, 756, 760, 761, 770, 780, 784, 786, 791, 796, 799, 805, 825, 832, 833, 834, 862, 869, 881, 882, 920, 921, 935, 941, 942, 943, 944, 945, 957, 1015, 1020, 1021, 1026, 1028, 1035, 1045, 1046, 1050, 1054, 1056, 1076, 1083, 1087, 1095, 1097, 1098, 1105, 1114, 1118, 1122, 1123, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1139, 1166, 1167, 1178, 1186], "state": [9, 78, 79, 90, 653, 726, 736, 737, 743, 745, 775, 788, 825], "note": [9, 21, 33, 34, 43, 57, 61, 62, 63, 72, 79, 81, 82, 97, 98, 99, 101, 103, 104, 108, 110, 111, 112, 113, 117, 118, 120, 123, 124, 127, 128, 131, 133, 136, 138, 140, 142, 144, 146, 150, 155, 156, 164, 175, 176, 178, 179, 189, 190, 192, 193, 196, 204, 207, 208, 216, 217, 218, 219, 226, 237, 240, 244, 245, 249, 250, 254, 279, 324, 334, 335, 341, 342, 364, 365, 368, 372, 386, 418, 427, 429, 433, 450, 469, 475, 487, 489, 508, 510, 511, 512, 513, 527, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 563, 570, 577, 578, 579, 582, 583, 591, 601, 602, 603, 606, 614, 618, 619, 627, 653, 658, 659, 661, 662, 663, 667, 676, 687, 689, 690, 701, 702, 704, 705, 710, 714, 725, 731, 737, 745, 746, 752, 753, 755, 756, 757, 761, 764, 778, 780, 786, 788, 790, 795, 798, 801, 825, 869, 878, 879, 882, 885, 886, 913, 914, 917, 935, 956, 1001, 1020, 1026, 1036, 1071, 1079, 1080, 1083, 1086, 1091, 1098, 1105, 1106, 1107, 1110, 1111, 1119, 1129, 1130, 1131, 1134, 1142, 1148, 1159, 1178, 1185], "oper": [9, 34, 63, 80, 82, 87, 88, 97, 99, 100, 101, 102, 103, 108, 110, 120, 147, 153, 163, 166, 169, 174, 177, 184, 194, 196, 201, 204, 206, 207, 211, 216, 219, 220, 226, 235, 240, 241, 245, 248, 257, 258, 279, 286, 287, 290, 331, 332, 333, 334, 335, 336, 392, 393, 407, 410, 412, 433, 436, 464, 465, 466, 467, 468, 469, 477, 484, 501, 504, 506, 508, 510, 511, 516, 517, 520, 526, 527, 534, 540, 553, 556, 617, 618, 627, 634, 635, 637, 648, 649, 664, 714, 726, 735, 745, 751, 754, 757, 760, 764, 770, 771, 780, 786, 806, 825, 834, 872, 876, 877, 878, 879, 880, 948, 1015, 1016, 1017, 1018, 1019, 1020, 1058, 1076, 1083, 1154, 1158, 1159, 1160, 1168, 1178], "environ": [9, 29, 127, 139, 142], "local": [9, 33, 110, 112, 123, 124, 127, 140, 279, 386, 523, 524, 714, 861, 863, 892, 893, 925, 935, 1051, 1052, 1178], "non": [9, 31, 33, 34, 43, 51, 72, 102, 129, 176, 179, 191, 200, 216, 222, 223, 226, 245, 249, 254, 255, 279, 324, 418, 477, 488, 522, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 571, 572, 578, 582, 614, 636, 638, 647, 648, 649, 656, 663, 681, 685, 691, 692, 693, 696, 698, 714, 753, 756, 770, 780, 782, 783, 786, 798, 801, 802, 825, 869, 963, 1028, 1050, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1083, 1099, 1100, 1106, 1110, 1142, 1159, 1178], "env": [9, 141], "back": [9, 72, 163, 241, 279, 521, 612, 714, 784, 825, 834, 948, 1140, 1160, 1178], "contain": [10, 31, 32, 33, 34, 51, 72, 77, 98, 99, 102, 104, 110, 112, 123, 124, 131, 132, 137, 150, 159, 175, 178, 191, 204, 208, 244, 249, 279, 289, 291, 293, 315, 316, 423, 488, 489, 569, 575, 577, 579, 581, 598, 599, 614, 635, 637, 679, 714, 731, 741, 752, 755, 775, 795, 798, 825, 828, 832, 833, 881, 1035, 1042, 1054, 1097, 1103, 1105, 1107, 1109, 1126, 1127, 1142, 1154, 1178], "save_to_fil": 10, "json_str": 10, "written": [11, 30, 31, 34, 35, 36, 37, 38, 39, 51, 52, 53, 279, 784, 805, 825], "leav": [11, 200, 279, 477, 770, 825], "directli": [11, 29, 59, 79, 110, 138, 140, 144, 219, 279, 394, 395, 396, 690, 714, 737, 825, 943, 944, 945, 1178, 1186], "json_fil": 11, "ascii": [12, 21, 582, 583, 585, 593, 614, 1110, 1111, 1113, 1121, 1142], "charact": [12, 14, 21, 27, 31, 32, 51, 108, 109, 122, 279, 368, 576, 578, 582, 583, 585, 586, 587, 588, 589, 593, 594, 596, 597, 600, 601, 602, 603, 604, 605, 614, 775, 825, 828, 917, 1104, 1106, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1121, 1122, 1124, 1125, 1128, 1129, 1130, 1131, 1142], "displai": [12, 13, 14, 15, 18, 20, 24, 26, 34, 173, 279], "tabl": [12, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 33, 34, 58, 59, 60, 62, 97, 104, 108, 109, 112, 113, 122, 123, 124, 208, 235, 241, 248, 249, 279, 798, 825, 1160, 1178, 1185], "outlin": 12, "fals": [12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 37, 39, 51, 52, 53, 57, 72, 78, 79, 98, 102, 104, 108, 109, 110, 113, 114, 116, 118, 119, 120, 122, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 146, 150, 151, 152, 153, 156, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 190, 193, 194, 198, 203, 204, 206, 208, 209, 216, 217, 218, 219, 220, 224, 228, 230, 236, 238, 240, 241, 244, 245, 246, 249, 250, 252, 254, 261, 262, 264, 266, 267, 269, 272, 279, 289, 290, 291, 293, 303, 310, 312, 315, 316, 331, 332, 333, 334, 335, 336, 337, 355, 371, 373, 386, 391, 392, 393, 394, 395, 396, 410, 412, 418, 419, 420, 422, 423, 424, 426, 427, 429, 430, 431, 432, 434, 436, 439, 440, 444, 450, 464, 471, 475, 479, 484, 485, 487, 489, 493, 496, 498, 500, 516, 517, 518, 520, 523, 524, 529, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 558, 563, 565, 566, 569, 570, 572, 575, 580, 590, 591, 592, 596, 597, 599, 606, 607, 608, 628, 631, 634, 635, 636, 637, 638, 641, 644, 645, 650, 653, 658, 659, 660, 661, 662, 673, 674, 676, 687, 690, 696, 701, 702, 704, 705, 714, 731, 733, 734, 735, 736, 737, 743, 745, 751, 752, 753, 754, 755, 756, 760, 761, 763, 765, 766, 775, 780, 785, 788, 790, 795, 796, 798, 801, 809, 810, 812, 814, 815, 817, 820, 825, 828, 832, 833, 834, 844, 851, 858, 861, 864, 867, 868, 876, 877, 878, 879, 880, 881, 900, 920, 922, 935, 941, 943, 944, 945, 952, 956, 963, 964, 965, 967, 969, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 986, 990, 991, 1001, 1015, 1022, 1026, 1030, 1042, 1048, 1051, 1052, 1054, 1056, 1057, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1081, 1086, 1091, 1093, 1097, 1098, 1100, 1103, 1108, 1118, 1119, 1120, 1124, 1125, 1127, 1134, 1135, 1136, 1159, 1160, 1163, 1166, 1168, 1169, 1178, 1185], "revert": 12, "utf8_full_condens": [12, 21, 104], "format": [12, 13, 17, 21, 31, 34, 35, 36, 51, 107, 108, 109, 110, 122, 128, 162, 173, 190, 200, 218, 219, 237, 277, 279, 372, 375, 378, 500, 606, 607, 608, 611, 663, 744, 750, 770, 784, 805, 825, 924, 927, 1134, 1135, 1136, 1139, 1177], "style": [12, 21, 34, 110, 120, 127, 208, 279], "abc": [12, 19, 20, 21, 22, 23, 24, 25, 26, 286, 578, 591, 602, 714, 828, 1106, 1119], "xyz": [12, 19, 20, 21, 22, 23, 24, 25, 26, 286, 572, 578, 714, 1100, 1106, 1156, 1178], "f64": [12, 13, 17, 19, 20, 22, 23, 24, 25, 26, 54, 57, 72, 74, 76, 80, 98, 100, 128, 138, 152, 153, 155, 156, 157, 160, 164, 165, 169, 172, 173, 174, 175, 184, 185, 192, 193, 198, 199, 208, 209, 210, 229, 230, 231, 251, 254, 258, 262, 264, 266, 267, 268, 269, 271, 272, 279, 285, 288, 295, 296, 297, 298, 299, 300, 319, 322, 323, 327, 328, 329, 336, 337, 338, 341, 342, 373, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 406, 407, 410, 412, 417, 427, 429, 430, 431, 433, 434, 436, 450, 461, 480, 481, 482, 484, 490, 491, 492, 503, 506, 508, 514, 515, 516, 517, 522, 526, 529, 530, 531, 532, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 561, 562, 563, 567, 568, 623, 624, 627, 632, 642, 643, 646, 647, 648, 650, 652, 664, 665, 679, 682, 683, 694, 695, 703, 710, 714, 734, 740, 746, 747, 751, 752, 759, 760, 761, 768, 769, 776, 790, 791, 799, 801, 803, 806, 810, 812, 814, 815, 816, 817, 819, 820, 825, 828, 836, 837, 838, 839, 840, 841, 865, 866, 873, 874, 875, 880, 881, 882, 885, 886, 922, 943, 944, 945, 950, 954, 959, 962, 1001, 1050, 1054, 1056, 1065, 1067, 1068, 1070, 1071, 1072, 1074, 1075, 1089, 1090, 1094, 1152, 1153, 1165, 1178, 1186], "fmt": [13, 416, 668, 714, 758, 825], "floatfmt": 13, "mix": [13, 882, 1136, 1178], "control": [13, 34, 62, 79, 80, 136, 279, 737, 743, 825], "how": [13, 33, 34, 72, 80, 100, 103, 111, 127, 159, 192, 208, 248, 249, 279, 321, 339, 371, 372, 386, 417, 445, 446, 447, 521, 535, 548, 580, 606, 608, 660, 704, 714, 741, 760, 798, 825, 862, 883, 920, 921, 935, 996, 997, 998, 1071, 1108, 1134, 1136, 1178], "float": [13, 31, 34, 45, 46, 51, 113, 128, 131, 132, 133, 134, 135, 138, 140, 146, 156, 161, 164, 193, 210, 220, 227, 271, 279, 323, 337, 341, 342, 373, 391, 392, 393, 394, 395, 396, 401, 406, 410, 412, 417, 420, 424, 427, 429, 430, 431, 436, 444, 464, 480, 484, 490, 503, 514, 515, 516, 517, 526, 529, 530, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 627, 646, 682, 683, 688, 690, 695, 703, 714, 746, 761, 776, 787, 788, 819, 825, 828, 858, 866, 881, 882, 884, 885, 886, 922, 941, 942, 943, 944, 945, 950, 954, 959, 970, 986, 995, 996, 997, 1015, 1031, 1038, 1039, 1045, 1046, 1053, 1054, 1055, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1091, 1095, 1148, 1159, 1167, 1178, 1186], "point": [13, 34, 45, 46, 138, 140, 164, 175, 178, 194, 279, 323, 337, 341, 373, 401, 406, 427, 429, 464, 489, 552, 553, 714, 746, 752, 755, 765, 766, 778, 825, 866, 881, 885, 922, 950, 954, 970, 1015, 1054, 1075, 1076, 1159, 1178], "full": [13, 42, 72, 77, 80, 108, 109, 112, 122, 123, 124, 128, 175, 176, 178, 179, 216, 279, 540, 606, 607, 608, 611, 714, 752, 753, 755, 756, 765, 766, 780, 825, 828, 1134, 1135, 1136, 1139, 1186], "number": [13, 14, 15, 16, 18, 26, 31, 34, 39, 51, 53, 63, 72, 82, 91, 97, 99, 101, 103, 106, 108, 109, 111, 113, 117, 118, 119, 122, 126, 127, 129, 136, 138, 139, 141, 142, 150, 152, 161, 162, 164, 165, 173, 181, 190, 191, 194, 195, 203, 204, 220, 226, 227, 231, 233, 244, 248, 251, 261, 263, 273, 279, 304, 311, 317, 330, 336, 337, 339, 353, 356, 361, 363, 373, 387, 388, 390, 394, 395, 396, 400, 402, 408, 414, 427, 429, 437, 438, 447, 454, 458, 459, 464, 469, 474, 477, 525, 529, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 556, 557, 559, 568, 582, 583, 584, 587, 591, 597, 598, 609, 620, 626, 632, 650, 651, 663, 671, 691, 692, 695, 699, 703, 714, 731, 734, 744, 745, 746, 747, 757, 764, 775, 786, 787, 791, 793, 795, 799, 809, 811, 821, 825, 857, 868, 880, 881, 883, 898, 901, 910, 912, 922, 936, 937, 939, 942, 943, 944, 945, 949, 951, 958, 970, 987, 988, 998, 1005, 1009, 1010, 1015, 1020, 1025, 1028, 1042, 1043, 1054, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1083, 1084, 1087, 1095, 1110, 1111, 1112, 1115, 1119, 1125, 1126, 1137, 1149, 1162, 1167, 1178, 1186], "limit": [13, 53, 110, 111, 122, 165, 279, 311, 325, 326, 402, 408, 714, 747, 757, 825, 870, 871, 951, 1178], "place": [13, 31, 51, 150, 158, 163, 183, 184, 208, 213, 219, 227, 230, 244, 252, 279, 303, 456, 557, 565, 714, 731, 787, 790, 795, 825, 834, 844, 948, 1007, 1057, 1084, 1093, 1178], "scientif": 13, "notat": [13, 34, 279], "larg": [13, 16, 33, 72, 110, 175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "small": [13, 111, 137, 194, 279, 372, 745, 825, 1186], "print": [13, 14, 15, 18, 20, 21, 26, 109, 130, 131, 133, 160, 173, 174, 191, 194, 239, 257, 279, 416, 500, 714, 736, 758, 825, 971, 1157, 1178, 1186], "precis": [13, 31, 33, 34, 42, 43, 51, 110, 190, 218, 219, 237, 279, 344, 609, 825, 828, 889, 1137], "2304980958725870923": 13, "1e6": 13, "1e": [13, 131, 132, 133, 134], "230498": 13, "0000e": 13, "230498095872587": 13, "1000000": [13, 384, 933], "00000001": [13, 634, 714], "plai": [14, 649], "sam": 14, "As": [14, 63, 81, 82, 97, 99, 100, 101, 103, 113, 117, 118, 126, 279, 825], "time": [14, 33, 42, 44, 57, 62, 77, 78, 79, 120, 122, 163, 175, 176, 178, 179, 193, 216, 250, 279, 317, 343, 344, 345, 346, 347, 351, 352, 368, 371, 372, 375, 377, 378, 386, 389, 443, 444, 477, 540, 543, 544, 545, 546, 547, 549, 550, 551, 559, 606, 608, 611, 625, 626, 648, 649, 658, 659, 660, 661, 662, 663, 669, 701, 702, 714, 736, 737, 752, 753, 755, 756, 761, 775, 780, 825, 828, 834, 857, 888, 889, 890, 891, 896, 897, 917, 920, 921, 924, 926, 927, 935, 938, 948, 994, 996, 997, 1087, 1134, 1136, 1139, 1161, 1162, 1178, 1186], "goe": 14, "By": [14, 16, 29, 72, 108, 109, 122, 175, 193, 216, 226, 231, 249, 250, 251, 279, 368, 372, 386, 469, 540, 543, 544, 545, 546, 547, 549, 550, 551, 556, 568, 632, 650, 658, 659, 661, 662, 663, 676, 695, 701, 702, 703, 714, 736, 752, 761, 780, 786, 791, 799, 825, 917, 921, 935, 1020, 1083, 1095, 1159, 1167, 1178], "begin": [14, 34, 279, 394, 395, 396, 577, 714, 943, 944, 945, 1105, 1178], "beauti": 14, "friendship": 14, "len_byt": [14, 583, 584, 1111, 1112], "len": [14, 34, 136, 138, 191, 279, 331, 459, 489, 714, 1010, 1178], "u32": [14, 57, 110, 148, 151, 205, 256, 261, 270, 272, 279, 287, 294, 301, 302, 303, 304, 305, 330, 331, 349, 353, 357, 361, 363, 369, 370, 373, 387, 388, 437, 441, 442, 446, 458, 488, 507, 519, 532, 539, 543, 544, 546, 549, 550, 551, 554, 572, 582, 583, 625, 629, 635, 640, 644, 645, 651, 686, 714, 729, 733, 773, 804, 809, 818, 820, 825, 844, 845, 846, 858, 863, 894, 898, 905, 907, 910, 912, 915, 918, 919, 922, 936, 937, 959, 1009, 1056, 1063, 1100, 1110, 1111, 1161, 1164, 1166, 1178], "37": 14, "beaut": 14, "48": [14, 216, 279, 540, 714, 780, 825], "fmt_str_length": 14, "50": [14, 34, 156, 163, 173, 279, 324, 372, 386, 714, 869, 882, 935, 1178], "element": [15, 16, 26, 137, 140, 150, 189, 208, 217, 231, 244, 251, 279, 293, 295, 296, 297, 298, 299, 300, 317, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 398, 399, 403, 413, 423, 437, 445, 446, 448, 449, 450, 451, 455, 458, 459, 465, 466, 467, 468, 473, 478, 481, 482, 489, 521, 522, 532, 535, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 560, 561, 562, 567, 568, 597, 598, 609, 623, 624, 626, 632, 650, 691, 692, 695, 703, 714, 731, 790, 791, 795, 799, 825, 835, 836, 837, 838, 839, 840, 841, 857, 865, 868, 873, 874, 875, 876, 877, 878, 879, 880, 885, 886, 946, 947, 952, 958, 971, 985, 987, 988, 996, 997, 999, 1000, 1001, 1002, 1006, 1009, 1010, 1016, 1017, 1018, 1019, 1024, 1029, 1032, 1033, 1036, 1050, 1056, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1088, 1089, 1090, 1094, 1095, 1125, 1126, 1137, 1149, 1152, 1153, 1157, 1162, 1163, 1167, 1178], "empti": [15, 31, 51, 88, 100, 108, 109, 113, 119, 122, 152, 153, 175, 187, 200, 279, 676, 693, 734, 735, 752, 770, 825, 828, 868, 872, 966, 1178], "alwai": [15, 31, 33, 51, 57, 108, 131, 132, 133, 134, 137, 174, 177, 196, 265, 279, 497, 606, 658, 704, 766, 825, 834, 1036, 1134, 1178, 1185, 1186], "neg": [15, 43, 129, 175, 176, 178, 179, 181, 195, 216, 226, 227, 229, 233, 279, 469, 470, 525, 540, 556, 557, 564, 595, 714, 752, 753, 755, 756, 780, 786, 787, 789, 804, 825, 958, 988, 1020, 1021, 1083, 1084, 1092, 1123, 1149, 1178], "result": [15, 31, 37, 38, 39, 51, 52, 53, 72, 80, 101, 103, 110, 111, 112, 113, 122, 125, 127, 128, 140, 163, 175, 178, 192, 204, 208, 216, 219, 226, 227, 241, 250, 258, 279, 375, 378, 394, 395, 396, 400, 434, 476, 477, 487, 489, 521, 529, 536, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 555, 556, 557, 596, 597, 608, 627, 653, 654, 658, 659, 660, 661, 662, 663, 678, 687, 690, 691, 692, 705, 714, 732, 752, 753, 755, 756, 760, 765, 766, 775, 780, 784, 786, 787, 805, 806, 825, 834, 881, 924, 927, 943, 944, 945, 948, 986, 1027, 1036, 1054, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1081, 1083, 1084, 1124, 1125, 1136, 1159, 1178, 1185, 1186], "being": [15, 79, 108, 109, 110, 122, 128, 151, 162, 238, 248, 249, 279, 293, 336, 372, 543, 544, 545, 546, 547, 549, 550, 551, 664, 714, 733, 737, 744, 745, 825, 864, 880, 921, 959, 1054, 1178, 1186], "content": [15, 559, 714, 1087, 1178], "final": [15, 34, 72, 127, 279, 394, 395, 396, 714, 745, 825, 943, 944, 945, 1178], "item": [15, 80, 109, 173, 217, 220, 279, 339, 399, 444, 447, 453, 456, 464, 553, 598, 714, 883, 947, 995, 998, 1004, 1007, 1015, 1076, 1126, 1178], "num": [15, 34, 243, 279, 418, 714, 963, 1178], "fmt_table_cell_list_len": 15, "10": [15, 18, 30, 31, 33, 34, 35, 36, 39, 53, 57, 72, 80, 104, 111, 122, 130, 138, 140, 153, 163, 172, 173, 175, 181, 183, 184, 185, 203, 207, 208, 209, 213, 214, 216, 222, 233, 254, 258, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 288, 292, 301, 302, 303, 305, 324, 330, 332, 335, 339, 343, 345, 351, 364, 365, 371, 372, 386, 389, 413, 414, 417, 423, 433, 437, 438, 447, 448, 454, 455, 470, 473, 474, 478, 481, 497, 499, 508, 522, 525, 540, 564, 620, 634, 647, 653, 658, 661, 664, 667, 669, 671, 676, 678, 699, 702, 714, 736, 737, 752, 757, 759, 764, 774, 775, 780, 782, 792, 793, 801, 806, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 825, 828, 869, 883, 888, 890, 896, 920, 935, 938, 941, 958, 971, 988, 998, 999, 1005, 1006, 1021, 1024, 1025, 1029, 1032, 1036, 1050, 1079, 1080, 1149, 1178, 1186], "size": [16, 39, 53, 108, 109, 110, 136, 137, 138, 140, 142, 161, 248, 279, 536, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 641, 673, 674, 691, 692, 714, 736, 825, 942, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1178, 1186], "overwrit": [16, 32, 33, 97, 99, 100, 101, 103, 108, 109, 117, 118, 122, 126, 146, 249, 279, 288, 714, 745, 825], "chunk": [16, 53, 106, 108, 109, 120, 122, 125, 126, 127, 138, 140, 163, 191, 203, 279, 292, 533, 714, 825, 834, 867, 948, 955, 1042, 1057, 1154, 1178], "stream": [16, 35, 36, 51, 52, 53, 78, 79, 116, 150, 174, 177, 192, 244, 246, 279, 731, 736, 737, 743, 745, 751, 754, 760, 765, 766, 770, 775, 788, 790, 795, 796, 825], "engin": [16, 32, 110, 111, 113, 142, 174, 177, 192, 196, 246, 265, 279, 751, 754, 760, 765, 766, 770, 796, 813, 825, 1036, 1178], "determin": [16, 31, 34, 51, 70, 72, 80, 100, 103, 108, 109, 110, 113, 119, 120, 122, 127, 129, 147, 157, 169, 175, 178, 190, 191, 196, 208, 216, 245, 250, 279, 321, 355, 371, 372, 386, 477, 488, 497, 529, 535, 543, 544, 545, 546, 547, 549, 550, 551, 563, 580, 606, 608, 609, 660, 687, 690, 705, 714, 752, 755, 780, 825, 862, 900, 920, 921, 935, 959, 1028, 1035, 1054, 1091, 1108, 1134, 1136, 1137, 1178], "schema": [16, 33, 57, 73, 74, 75, 80, 92, 93, 95, 97, 99, 100, 101, 103, 108, 109, 110, 111, 115, 117, 118, 121, 122, 126, 127, 136, 138, 147, 152, 153, 160, 161, 191, 196, 201, 204, 240, 279, 306, 307, 308, 309, 310, 476, 477, 497, 580, 634, 696, 714, 734, 735, 742, 765, 766, 771, 784, 808, 813, 825, 828, 849, 872, 1108, 1178], "thread": [16, 31, 51, 79, 106, 108, 109, 111, 142, 279, 293, 450, 489, 714, 737, 825, 1001], "pool": [16, 79, 142, 737, 825], "For": [16, 33, 34, 111, 112, 113, 123, 124, 159, 163, 192, 193, 216, 265, 279, 394, 395, 396, 477, 489, 498, 534, 563, 570, 577, 578, 579, 591, 653, 663, 667, 668, 710, 714, 741, 761, 780, 813, 825, 834, 943, 944, 945, 948, 1058, 1091, 1098, 1105, 1106, 1107, 1119, 1159, 1178], "some": [16, 29, 33, 34, 63, 82, 100, 108, 109, 110, 113, 122, 146, 159, 279, 710, 741, 825, 971, 1178, 1186], "dataset": [16, 39, 108, 109, 120, 122, 127, 128, 192, 279, 434, 714, 726, 760, 765, 766, 825, 986, 1178], "esp": 16, "when": [16, 18, 20, 24, 31, 34, 39, 42, 51, 53, 62, 63, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 113, 114, 116, 119, 120, 122, 123, 125, 126, 128, 131, 132, 133, 134, 138, 140, 147, 150, 160, 161, 163, 165, 169, 175, 176, 178, 179, 192, 196, 207, 216, 217, 219, 222, 223, 226, 230, 238, 240, 244, 246, 249, 255, 279, 324, 394, 395, 396, 402, 469, 477, 488, 498, 525, 539, 540, 556, 565, 566, 582, 583, 601, 602, 603, 606, 644, 653, 667, 714, 731, 747, 752, 753, 755, 756, 760, 765, 766, 780, 782, 783, 786, 790, 795, 796, 798, 802, 825, 834, 869, 935, 942, 943, 944, 945, 948, 951, 1020, 1035, 1063, 1079, 1080, 1083, 1110, 1111, 1129, 1130, 1131, 1134, 1155, 1178], "have": [16, 29, 33, 34, 42, 63, 72, 82, 98, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 138, 140, 163, 190, 211, 216, 218, 219, 237, 279, 336, 394, 395, 396, 489, 498, 532, 540, 579, 714, 739, 770, 777, 780, 788, 804, 825, 828, 834, 880, 943, 944, 945, 948, 956, 1056, 1136, 1178, 1186], "too": [16, 175, 193, 216, 250, 279, 368, 372, 386, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 745, 752, 761, 780, 825, 917, 921, 935], "optimist": 16, "lead": [16, 39, 104, 128, 175, 176, 178, 179, 216, 226, 279, 411, 469, 487, 489, 540, 555, 556, 586, 600, 601, 603, 621, 650, 714, 752, 753, 755, 756, 765, 766, 780, 786, 808, 813, 825, 1020, 1036, 1081, 1083, 1114, 1128, 1129, 1131, 1178], "out": [16, 51, 52, 53, 104, 130, 216, 219, 279, 313, 453, 475, 570, 573, 704, 780, 825, 853, 1004, 1026, 1098, 1101], "memori": [16, 53, 80, 97, 98, 101, 102, 103, 108, 109, 110, 113, 114, 120, 122, 125, 126, 127, 146, 163, 196, 219, 228, 265, 279, 521, 533, 558, 714, 736, 825, 834, 948, 1036, 1057, 1085, 1086, 1178], "error": [16, 33, 79, 108, 109, 122, 151, 175, 193, 208, 216, 217, 250, 279, 288, 313, 319, 368, 372, 386, 433, 456, 475, 508, 540, 543, 544, 545, 546, 547, 549, 550, 551, 570, 573, 577, 579, 580, 581, 606, 607, 608, 611, 658, 659, 661, 662, 701, 702, 714, 733, 737, 752, 761, 780, 808, 813, 825, 853, 858, 917, 921, 935, 1007, 1026, 1098, 1101, 1105, 1107, 1108, 1109, 1134, 1135, 1136, 1139, 1178], "row": [16, 21, 26, 31, 34, 37, 39, 51, 53, 72, 73, 75, 80, 89, 91, 96, 100, 101, 103, 104, 108, 109, 110, 113, 114, 116, 117, 120, 122, 125, 126, 127, 128, 131, 132, 136, 138, 147, 150, 152, 159, 163, 166, 169, 173, 174, 175, 177, 180, 181, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 204, 219, 220, 229, 233, 234, 237, 239, 244, 246, 248, 249, 256, 263, 265, 273, 279, 304, 399, 414, 438, 451, 477, 521, 522, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 566, 576, 580, 620, 641, 644, 653, 654, 667, 671, 673, 674, 689, 691, 692, 699, 704, 714, 731, 734, 736, 741, 745, 748, 749, 752, 757, 760, 761, 762, 764, 766, 770, 789, 793, 794, 795, 796, 798, 804, 811, 813, 821, 825, 834, 947, 948, 958, 1002, 1050, 1060, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1092, 1104, 1108, 1149, 1178, 1186], "per": [16, 31, 34, 51, 136, 138, 150, 173, 204, 205, 223, 230, 244, 255, 268, 270, 271, 279, 293, 318, 450, 453, 475, 489, 566, 631, 644, 714, 731, 783, 790, 795, 802, 816, 818, 819, 825, 1001, 1004, 1026, 1166, 1178], "everi": [16, 31, 51, 108, 109, 122, 175, 178, 234, 237, 250, 279, 331, 332, 333, 334, 335, 336, 372, 386, 399, 441, 442, 447, 451, 453, 454, 465, 470, 474, 576, 622, 653, 654, 714, 745, 752, 755, 794, 825, 876, 877, 878, 879, 880, 921, 935, 947, 956, 992, 993, 998, 1002, 1004, 1005, 1016, 1021, 1025, 1104, 1151, 1178], "process": [16, 31, 51, 52, 53, 108, 109, 110, 122, 142, 279, 736, 825], "liter": [17, 21, 33, 57, 79, 110, 113, 119, 138, 139, 140, 141, 173, 190, 197, 198, 202, 203, 206, 217, 218, 222, 223, 226, 232, 236, 249, 254, 255, 279, 288, 312, 324, 345, 392, 393, 400, 407, 410, 412, 418, 436, 484, 488, 504, 506, 516, 517, 526, 570, 572, 591, 592, 617, 627, 636, 638, 641, 645, 647, 648, 649, 656, 657, 658, 659, 660, 661, 662, 673, 674, 676, 681, 685, 687, 690, 693, 696, 698, 700, 701, 702, 705, 714, 737, 747, 782, 783, 786, 798, 801, 802, 825, 828, 832, 833, 852, 869, 881, 890, 949, 963, 1054, 1079, 1080, 1083, 1098, 1100, 1119, 1120, 1178, 1185], "left": [17, 34, 59, 72, 131, 132, 133, 134, 175, 176, 178, 179, 192, 193, 216, 249, 279, 337, 394, 395, 396, 417, 418, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 554, 585, 625, 647, 653, 654, 658, 659, 661, 662, 667, 689, 701, 702, 704, 714, 752, 753, 755, 756, 760, 761, 780, 798, 825, 881, 943, 944, 945, 963, 1054, 1077, 1113, 1161, 1178], "center": [17, 34, 279, 394, 395, 396, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 714, 943, 944, 945, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1178], "right": [17, 19, 34, 108, 109, 131, 132, 133, 134, 175, 176, 178, 179, 192, 193, 216, 249, 279, 337, 394, 395, 396, 418, 465, 466, 467, 468, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 554, 563, 593, 647, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 760, 761, 780, 798, 825, 881, 943, 944, 945, 963, 1016, 1017, 1018, 1019, 1054, 1077, 1091, 1121, 1178], "cell": [17, 34, 279], "align": [17, 34, 72, 80, 279], "valueerror": [17, 21], "recognis": [17, 21, 135], "column_abc": 17, "column_xyz": 17, "visibl": [18, 161, 279, 942, 1178], "eg": [18, 26, 34, 80, 111, 144, 279, 372, 606, 608, 627, 714, 956, 1134, 1136, 1178], "low": [18, 110, 142, 529, 714, 1054, 1178], "rang": [18, 34, 110, 111, 156, 161, 175, 191, 279, 338, 349, 363, 369, 370, 372, 386, 387, 417, 641, 648, 657, 658, 659, 660, 661, 662, 673, 674, 700, 701, 702, 714, 752, 825, 882, 894, 912, 918, 919, 921, 935, 936, 942, 1050, 1178], "100": [18, 34, 100, 103, 108, 109, 117, 122, 126, 226, 279, 556, 580, 609, 714, 786, 825, 1066, 1067, 1069, 1083, 1108, 1137, 1178, 1186], "98": [18, 184, 279, 317, 411, 565, 609, 621, 626, 714, 1137], "99": [18, 34, 164, 165, 184, 187, 249, 279, 287, 317, 400, 402, 411, 565, 621, 626, 714, 746, 747, 798, 825, 941, 949, 1178], "tbl_col": 18, "95": [18, 287, 714], "96": [18, 287, 714], "97": [18, 184, 279, 287, 714], "move": [19, 219, 279, 394, 395, 396, 543, 544, 546, 550, 714, 943, 944, 945, 1066, 1067, 1069, 1073, 1178], "inlin": [19, 219, 279, 570, 577, 578, 591, 1098, 1105, 1106, 1119], "parenthes": 19, "inform": [20, 24, 33, 77, 112, 123, 124, 127, 131, 133, 155, 279, 434, 563, 570, 577, 578, 591, 714, 775, 825, 863, 986, 1091, 1098, 1105, 1106, 1119, 1178], "below": [20, 33, 112, 123, 124, 159, 175, 208, 279, 402, 658, 659, 661, 662, 701, 702, 704, 710, 714, 741, 752, 825], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 72, 104], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 318, 577, 581, 714, 1105, 1109], "rounded_corn": 21, "border": 21, "line": [21, 34, 108, 109, 113, 122, 173, 186, 188, 279, 577, 1105], "includ": [21, 29, 31, 33, 34, 51, 77, 110, 112, 123, 124, 138, 150, 156, 161, 206, 219, 244, 245, 248, 249, 279, 337, 373, 418, 529, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 596, 597, 601, 602, 653, 691, 692, 714, 731, 795, 798, 825, 828, 881, 882, 922, 942, 963, 1054, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1124, 1125, 1129, 1168, 1178], "divid": [21, 337, 372, 386, 394, 395, 396, 434, 529, 714, 881, 921, 935, 943, 944, 945, 986, 1054, 1178], "same": [21, 33, 34, 61, 63, 72, 78, 79, 80, 81, 82, 114, 122, 131, 132, 133, 134, 136, 144, 174, 196, 208, 219, 230, 246, 254, 255, 258, 265, 279, 285, 292, 309, 341, 342, 411, 476, 493, 496, 521, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 566, 582, 616, 621, 714, 736, 737, 751, 765, 766, 790, 796, 801, 802, 806, 825, 830, 834, 835, 850, 881, 885, 886, 890, 1027, 1036, 1054, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1110, 1169, 1178], "dens": [21, 173, 279, 532, 714, 1056, 1178], "space": [21, 175, 279, 752, 825], "horizont": [21, 80, 169, 183, 248, 279, 636, 638, 648, 649, 653, 654, 656, 664, 667, 681, 685, 689, 698], "markdown": 21, "compat": [21, 34, 39, 53, 279, 570, 571, 572, 577, 578, 579, 591, 592, 825, 828, 1098, 1099, 1100, 1105, 1106, 1107, 1119, 1120], "No": [21, 612, 1140], "appli": [21, 31, 34, 51, 57, 80, 122, 135, 138, 140, 169, 196, 207, 265, 279, 347, 348, 349, 353, 355, 356, 357, 359, 361, 363, 366, 369, 370, 373, 376, 387, 388, 390, 395, 396, 485, 487, 489, 525, 541, 543, 544, 546, 550, 591, 606, 607, 608, 611, 653, 654, 667, 677, 678, 679, 689, 704, 714, 757, 764, 765, 766, 774, 813, 825, 869, 892, 893, 894, 898, 900, 901, 905, 907, 910, 912, 915, 918, 919, 922, 925, 936, 937, 939, 944, 945, 1036, 1064, 1066, 1067, 1069, 1073, 1119, 1134, 1135, 1136, 1139, 1178], "round": [21, 34, 74, 104, 110, 279, 323, 329, 406, 623, 714, 866, 954, 1178], "corner": [21, 34, 104, 279], "op": [21, 140, 279, 535, 714, 825, 1136, 1178], "one": [21, 31, 32, 34, 51, 62, 72, 89, 97, 99, 100, 101, 102, 103, 108, 109, 113, 117, 118, 119, 122, 139, 140, 141, 144, 165, 166, 173, 174, 175, 176, 178, 179, 190, 200, 208, 216, 217, 218, 224, 226, 240, 243, 259, 279, 287, 337, 402, 411, 469, 477, 482, 540, 556, 565, 578, 621, 679, 694, 704, 710, 714, 747, 748, 751, 752, 753, 755, 756, 770, 780, 785, 786, 803, 807, 825, 834, 881, 951, 982, 1020, 1028, 1033, 1054, 1083, 1106, 1143, 1178], "more": [21, 34, 37, 39, 53, 62, 72, 80, 81, 82, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 117, 118, 119, 120, 123, 124, 131, 133, 138, 140, 144, 155, 156, 190, 194, 196, 200, 204, 217, 218, 220, 240, 246, 265, 279, 290, 293, 310, 434, 464, 479, 482, 487, 489, 520, 553, 563, 578, 582, 606, 607, 608, 628, 694, 704, 714, 770, 796, 825, 828, 835, 851, 863, 882, 982, 986, 1015, 1030, 1036, 1076, 1091, 1106, 1110, 1134, 1135, 1136, 1163, 1178, 1186], "semigraph": 21, "box": [21, 196, 279], "draw": [21, 26, 137, 1186], "found": [21, 31, 34, 51, 59, 84, 93, 95, 100, 104, 160, 279, 554, 581, 604, 605, 606, 608, 714, 825, 1077, 1109, 1132, 1133, 1134, 1136, 1178, 1185], "unicod": 21, "block": [21, 79, 174, 177, 246, 279, 704, 737, 751, 754, 778, 796, 804, 813, 825, 1079, 1080, 1178], "http": [21, 34, 35, 36, 98, 110, 111, 146, 155, 279, 577, 579, 1105, 1107], "en": [21, 34, 279], "wikipedia": 21, "org": [21, 35, 36, 98, 110, 111, 146, 155, 279], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "mno": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 34, 279], "etc": [22, 33, 34, 108, 112, 114, 116, 120, 123, 124, 125, 279, 714, 828, 1079, 1080, 1178], "separ": [25, 31, 51, 106, 108, 109, 122, 206, 208, 238, 245, 247, 279, 293, 451, 456, 489, 576, 649, 653, 654, 714, 797, 825, 1002, 1007, 1104, 1147, 1155, 1178], "between": [25, 80, 135, 136, 138, 140, 155, 210, 271, 279, 319, 339, 340, 418, 447, 448, 455, 456, 465, 466, 467, 468, 473, 478, 522, 529, 530, 547, 569, 642, 643, 650, 652, 688, 691, 692, 714, 776, 819, 825, 858, 863, 883, 884, 963, 998, 999, 1006, 1007, 1016, 1017, 1018, 1019, 1024, 1029, 1050, 1054, 1055, 1070, 1097, 1178], "set_tbl_column_data_type_inlin": 25, "max": [26, 34, 39, 53, 57, 142, 156, 165, 174, 208, 216, 279, 325, 332, 402, 477, 521, 532, 540, 543, 555, 598, 681, 694, 714, 747, 751, 780, 825, 870, 876, 882, 951, 1028, 1056, 1066, 1081, 1126, 1178], "both": [26, 31, 51, 63, 81, 82, 175, 176, 178, 179, 192, 193, 201, 216, 217, 249, 279, 292, 324, 337, 397, 418, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 710, 714, 725, 752, 753, 755, 756, 760, 761, 771, 780, 798, 825, 869, 963, 973, 1178], "tbl_row": 26, "maximum": [27, 31, 51, 108, 109, 122, 128, 136, 137, 138, 140, 173, 175, 197, 279, 441, 490, 514, 523, 532, 680, 681, 714, 752, 767, 825, 902, 992, 1037, 1045, 1051, 1056, 1178], "enabl": [28, 63, 81, 82, 131, 132, 133, 134, 143, 222, 254, 279, 289, 291, 555, 631, 710, 714, 736, 782, 801, 825, 832, 833, 1081, 1166, 1178], "addit": [28, 33, 34, 100, 112, 113, 123, 124, 136, 157, 159, 162, 174, 177, 206, 222, 223, 224, 230, 247, 254, 255, 258, 279, 286, 351, 397, 400, 521, 566, 570, 577, 578, 591, 644, 647, 648, 649, 665, 693, 696, 714, 740, 744, 751, 754, 782, 783, 785, 790, 797, 801, 802, 806, 825, 888, 896, 949, 1098, 1105, 1106, 1119, 1178], "verbos": [28, 131, 133, 144, 578, 1106], "debug": [28, 736, 745, 765, 766, 825, 1186], "log": [28, 74, 317, 391, 482, 506, 526, 626, 714, 857, 941, 1162, 1178], "do_polars_oper": 28, "if_set": 29, "env_onli": 29, "dict": [29, 33, 34, 39, 60, 73, 75, 77, 97, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 138, 168, 190, 206, 212, 217, 218, 219, 221, 236, 237, 245, 279, 488, 539, 714, 778, 781, 825, 1035, 1178], "show": [29, 34, 61, 159, 173, 194, 205, 279, 741, 775, 788, 825], "variabl": [29, 54, 59, 127, 139, 142, 200, 238, 279, 770, 825, 1155, 1178, 1185], "chang": [29, 72, 79, 108, 109, 110, 128, 248, 249, 250, 279, 293, 336, 337, 339, 372, 489, 522, 529, 543, 544, 545, 546, 547, 549, 550, 551, 714, 737, 825, 834, 863, 864, 880, 881, 921, 959, 1050, 1054, 1086, 1178], "restrict": [29, 598, 1126], "dictionari": [29, 34, 97, 99, 100, 101, 103, 108, 109, 110, 111, 115, 117, 118, 121, 122, 126, 190, 206, 217, 218, 219, 236, 237, 279, 488, 714, 825, 1035, 1178], "those": [29, 34, 108, 113, 219, 249, 279, 532, 577, 679, 714, 798, 825, 828, 1056, 1105, 1178], "been": [29, 34, 146, 147, 149, 176, 177, 178, 179, 260, 279, 293, 318, 421, 425, 428, 445, 448, 455, 459, 473, 478, 485, 489, 532, 541, 543, 544, 545, 546, 547, 549, 550, 551, 571, 584, 585, 586, 587, 593, 594, 600, 639, 677, 714, 730, 753, 754, 755, 756, 765, 777, 805, 808, 825, 835, 968, 974, 996, 999, 1006, 1010, 1024, 1029, 1056, 1064, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1178], "set_fmt_float": 29, "via": [29, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 127, 190, 218, 279, 293, 489, 579, 714, 739, 777, 825, 1107], "set_stat": 29, "all_stat": 29, "binaryio": [30, 35, 36, 107, 108, 113, 114, 115, 116, 119, 120, 121, 279], "bytesio": [30, 31, 34, 35, 36, 39, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 279, 739, 777, 825], "compress": [30, 35, 36, 39, 52, 53, 279, 825], "avrocompress": [30, 279], "uncompress": [30, 35, 36, 39, 53, 114, 125, 279, 825], "write": [30, 31, 32, 33, 34, 35, 36, 37, 39, 51, 52, 53, 109, 114, 144, 279, 324, 502, 714, 763, 788, 825, 869, 1178], "apach": [30, 35, 36, 39, 107, 110, 111, 124, 279, 726], "avro": [30, 107, 279, 726], "writeabl": [30, 31, 35, 36, 37, 38, 39, 279], "like": [30, 31, 33, 35, 36, 37, 38, 39, 79, 98, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 175, 186, 188, 192, 240, 279, 330, 343, 437, 450, 458, 501, 532, 577, 602, 603, 631, 710, 714, 737, 739, 752, 777, 825, 834, 888, 987, 1001, 1009, 1056, 1105, 1166, 1178], "object": [30, 31, 33, 34, 35, 36, 37, 38, 39, 62, 80, 98, 99, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 136, 138, 140, 146, 174, 175, 177, 178, 193, 194, 216, 219, 240, 241, 279, 658, 659, 661, 662, 676, 701, 702, 726, 739, 752, 753, 755, 756, 761, 777, 780, 825, 828, 859, 887, 989, 1096, 1154, 1178], "snappi": [30, 39, 53, 279, 825], "deflat": [30, 279], "import": [30, 31, 33, 34, 35, 36, 39, 42, 72, 97, 98, 101, 102, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 151, 156, 157, 159, 173, 175, 191, 193, 200, 206, 208, 238, 240, 241, 248, 250, 279, 338, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 542, 543, 544, 546, 549, 550, 551, 642, 643, 658, 659, 661, 663, 701, 702, 710, 714, 726, 733, 737, 739, 740, 741, 752, 761, 766, 770, 784, 825, 873, 875, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 967, 972, 976, 977, 982, 1065, 1089, 1152, 1178, 1186], "pathlib": [30, 31, 35, 36, 39, 122, 279], "foo": [30, 31, 33, 35, 36, 37, 38, 39, 61, 151, 154, 155, 157, 158, 159, 160, 163, 166, 167, 169, 170, 171, 172, 180, 181, 182, 183, 184, 185, 187, 192, 196, 197, 198, 199, 202, 205, 208, 210, 212, 213, 214, 217, 220, 221, 222, 225, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 251, 252, 253, 257, 279, 320, 337, 368, 414, 416, 438, 444, 452, 453, 457, 493, 496, 497, 498, 499, 500, 501, 529, 536, 569, 572, 574, 576, 578, 579, 596, 598, 601, 602, 603, 604, 605, 610, 613, 620, 622, 640, 646, 650, 651, 652, 666, 670, 671, 675, 680, 682, 683, 684, 686, 688, 693, 695, 699, 703, 704, 710, 714, 733, 738, 740, 741, 742, 748, 758, 759, 760, 773, 778, 781, 782, 796, 797, 800, 803, 825, 828, 860, 881, 917, 1007, 1054, 1060, 1100, 1102, 1104, 1106, 1107, 1126, 1132, 1133, 1138, 1141, 1178], "bar": [30, 31, 33, 35, 36, 37, 38, 39, 61, 151, 154, 155, 157, 158, 159, 160, 163, 166, 167, 169, 170, 171, 172, 181, 183, 184, 185, 187, 192, 196, 197, 198, 199, 202, 205, 208, 210, 212, 213, 214, 217, 220, 221, 222, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 246, 247, 251, 252, 257, 279, 320, 416, 493, 494, 495, 496, 497, 498, 499, 500, 501, 563, 572, 574, 576, 578, 579, 596, 598, 604, 605, 640, 646, 650, 651, 652, 666, 671, 675, 680, 682, 683, 684, 686, 693, 695, 699, 703, 704, 710, 714, 733, 738, 740, 741, 742, 748, 758, 759, 760, 773, 778, 781, 782, 796, 797, 800, 825, 828, 860, 1007, 1091, 1100, 1102, 1104, 1106, 1107, 1126, 1132, 1133, 1178], "ham": [30, 31, 33, 35, 36, 39, 151, 154, 155, 157, 158, 159, 160, 166, 167, 170, 180, 181, 183, 192, 197, 198, 199, 202, 205, 210, 212, 214, 217, 220, 221, 222, 229, 231, 232, 233, 238, 239, 240, 241, 242, 246, 251, 252, 279, 320, 500, 733, 738, 740, 741, 742, 748, 760, 773, 778, 781, 782, 796, 803, 825, 860], "d": [30, 31, 33, 34, 35, 36, 39, 100, 128, 156, 173, 175, 180, 181, 184, 192, 233, 235, 248, 252, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 286, 288, 352, 375, 378, 418, 525, 558, 572, 578, 597, 606, 607, 608, 647, 663, 669, 714, 752, 760, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 825, 863, 897, 924, 927, 963, 1100, 1106, 1125, 1134, 1135, 1136, 1178], "e": [30, 31, 33, 35, 36, 39, 51, 98, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 156, 173, 175, 181, 193, 216, 233, 235, 240, 248, 250, 279, 286, 293, 368, 372, 386, 391, 397, 418, 480, 488, 489, 494, 495, 497, 498, 499, 500, 501, 540, 543, 544, 545, 546, 547, 549, 550, 551, 558, 563, 602, 603, 658, 659, 661, 662, 665, 679, 701, 702, 704, 714, 739, 752, 761, 763, 777, 778, 780, 825, 828, 917, 921, 935, 941, 963, 1078, 1091, 1159, 1178, 1186], "dirpath": [30, 31, 35, 36, 39, 122, 279], "new_fil": [30, 31, 35, 36, 39, 279], "has_head": [31, 34, 51, 108, 109, 113, 122, 279, 825], "line_termin": [31, 51, 279, 825], "quote_char": [31, 51, 108, 109, 122, 279, 825], "batch_siz": [31, 51, 108, 109, 110, 126, 128, 279, 825], "1024": [31, 51, 53, 108, 109, 110, 126, 279, 825], "datetime_format": [31, 51, 279, 825], "date_format": [31, 51, 279, 825], "time_format": [31, 51, 279, 825], "float_precis": [31, 34, 51, 279, 825], "null_valu": [31, 51, 108, 109, 122, 279, 825], "quote_styl": [31, 51, 279, 825], "csvquotestyl": [31, 51, 279, 825], "textiowrapp": [31, 279], "comma": [31, 279], "csv": [31, 51, 52, 53, 108, 109, 113, 122, 279, 726, 825], "If": [31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 53, 57, 63, 77, 79, 80, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 139, 146, 147, 150, 159, 163, 173, 175, 176, 178, 179, 181, 189, 190, 193, 195, 196, 204, 208, 216, 218, 219, 220, 226, 229, 233, 237, 238, 240, 244, 245, 246, 248, 249, 279, 289, 291, 293, 345, 364, 365, 386, 403, 434, 464, 469, 470, 477, 487, 488, 489, 500, 521, 529, 532, 534, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 559, 563, 564, 569, 578, 579, 580, 586, 594, 595, 596, 597, 598, 600, 601, 602, 603, 606, 607, 608, 611, 614, 631, 635, 637, 639, 641, 645, 650, 651, 653, 658, 659, 661, 662, 663, 667, 673, 674, 676, 679, 687, 690, 691, 692, 696, 701, 702, 704, 705, 714, 731, 736, 737, 741, 743, 752, 753, 755, 756, 760, 761, 766, 770, 778, 780, 784, 786, 789, 795, 796, 798, 805, 808, 813, 825, 828, 832, 833, 834, 835, 869, 881, 890, 913, 914, 935, 948, 956, 958, 959, 985, 986, 988, 1015, 1020, 1021, 1028, 1036, 1054, 1056, 1058, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1081, 1083, 1087, 1091, 1092, 1097, 1106, 1107, 1108, 1114, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1139, 1142, 1149, 1154, 1159, 1166, 1168, 1178, 1185], "instead": [31, 37, 38, 57, 61, 72, 79, 80, 108, 109, 110, 113, 119, 120, 122, 127, 128, 138, 173, 175, 190, 193, 196, 204, 206, 216, 217, 218, 219, 222, 223, 226, 227, 241, 250, 254, 255, 279, 303, 325, 326, 337, 350, 354, 358, 360, 362, 367, 368, 371, 372, 374, 386, 397, 469, 487, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 556, 557, 582, 583, 586, 594, 600, 601, 602, 603, 604, 605, 606, 608, 614, 641, 645, 646, 658, 659, 660, 661, 662, 663, 673, 674, 687, 690, 696, 701, 702, 705, 714, 737, 746, 752, 761, 780, 782, 783, 784, 786, 787, 798, 801, 802, 805, 825, 828, 844, 870, 871, 881, 895, 899, 906, 908, 911, 916, 917, 920, 921, 923, 935, 1020, 1054, 1079, 1080, 1083, 1084, 1110, 1111, 1114, 1122, 1128, 1129, 1130, 1131, 1134, 1136, 1142, 1160, 1178, 1185], "whether": [31, 51, 101, 103, 140, 143, 150, 224, 244, 279, 289, 291, 355, 373, 439, 440, 494, 495, 555, 714, 731, 765, 766, 785, 790, 795, 825, 828, 832, 833, 861, 864, 900, 922, 990, 991, 1178, 1185], "header": [31, 34, 39, 51, 53, 104, 108, 109, 113, 122, 160, 208, 245, 279, 825], "field": [31, 33, 51, 64, 93, 95, 100, 240, 247, 279, 477, 488, 538, 578, 579, 580, 597, 598, 616, 653, 654, 678, 696, 714, 797, 825, 881, 1028, 1054, 1062, 1107, 1123, 1125, 1126, 1145, 1147, 1178], "symbol": [31, 51, 279, 714, 825], "end": [31, 34, 51, 108, 109, 120, 122, 175, 279, 312, 315, 316, 343, 372, 397, 418, 470, 570, 575, 578, 588, 595, 599, 602, 605, 641, 658, 659, 661, 662, 665, 673, 674, 701, 702, 704, 714, 752, 757, 764, 775, 825, 828, 855, 888, 921, 963, 1021, 1103, 1106, 1116, 1123, 1127, 1178], "byte": [31, 51, 53, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 161, 279, 582, 584, 825, 942, 1110, 1112, 1178], "quot": [31, 32, 51, 108, 109, 122, 279, 825], "specifi": [31, 34, 51, 72, 84, 93, 95, 113, 119, 138, 150, 151, 157, 161, 162, 165, 174, 175, 176, 177, 178, 179, 192, 206, 216, 217, 219, 222, 223, 224, 226, 230, 244, 247, 254, 255, 258, 279, 324, 394, 395, 396, 397, 402, 488, 521, 535, 543, 544, 545, 546, 547, 549, 550, 551, 556, 566, 644, 647, 648, 649, 658, 659, 661, 662, 665, 693, 696, 701, 702, 714, 731, 733, 740, 744, 747, 751, 752, 753, 754, 755, 756, 760, 780, 782, 783, 785, 786, 790, 795, 797, 801, 802, 806, 825, 869, 942, 943, 944, 945, 951, 1083, 1178], "defin": [31, 34, 42, 51, 110, 135, 136, 138, 147, 151, 159, 162, 175, 176, 178, 179, 196, 204, 207, 216, 249, 260, 265, 279, 293, 418, 475, 489, 525, 529, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 639, 658, 659, 661, 662, 676, 679, 696, 701, 702, 714, 733, 741, 744, 752, 753, 755, 756, 774, 780, 798, 808, 813, 825, 828, 835, 963, 1026, 1036, 1054, 1063, 1178], "chrono": [31, 51, 279, 375, 378, 606, 607, 608, 611, 825, 924, 927, 1134, 1135, 1136, 1139], "rust": [31, 39, 51, 90, 110, 114, 116, 120, 196, 265, 279, 579, 825, 1036, 1107, 1178], "crate": [31, 51, 279, 570, 571, 572, 577, 578, 579, 591, 592, 606, 607, 608, 611, 825, 828, 1098, 1099, 1100, 1105, 1106, 1107, 1119, 1120, 1134, 1135, 1136, 1139], "fraction": [31, 51, 131, 132, 133, 134, 220, 279, 373, 464, 522, 553, 606, 608, 714, 825, 922, 1015, 1050, 1076, 1134, 1136, 1178], "second": [31, 51, 131, 132, 133, 134, 137, 175, 193, 216, 250, 279, 368, 372, 385, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 606, 608, 658, 659, 660, 661, 662, 663, 700, 701, 702, 704, 714, 752, 761, 780, 825, 828, 917, 921, 934, 935, 1134, 1136, 1186], "infer": [31, 51, 97, 99, 100, 101, 102, 103, 108, 109, 110, 113, 117, 118, 122, 126, 127, 147, 196, 279, 536, 580, 606, 607, 608, 609, 611, 690, 714, 825, 1060, 1108, 1134, 1135, 1136, 1137, 1139, 1178], "timeunit": [31, 42, 44, 51, 279, 344, 345, 377, 389, 608, 658, 659, 660, 661, 662, 663, 825, 828, 889, 890, 926, 938, 1136], "frame": [31, 32, 34, 51, 57, 58, 59, 60, 61, 62, 72, 79, 80, 100, 109, 113, 119, 131, 132, 138, 151, 152, 190, 191, 196, 201, 204, 207, 217, 218, 219, 241, 248, 249, 279, 733, 734, 771, 774, 798, 825, 828, 868, 1178, 1185, 1186], "datetim": [31, 33, 34, 51, 72, 104, 113, 138, 151, 156, 173, 175, 176, 178, 179, 191, 193, 216, 250, 279, 343, 344, 345, 346, 347, 349, 351, 352, 353, 355, 356, 357, 359, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 444, 540, 543, 544, 545, 546, 547, 549, 550, 551, 606, 608, 625, 658, 659, 661, 662, 663, 669, 676, 701, 702, 714, 733, 752, 753, 755, 756, 761, 780, 825, 828, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 982, 995, 996, 997, 1045, 1046, 1080, 1134, 1136, 1161, 1178], "float64": [31, 34, 51, 100, 108, 138, 160, 161, 169, 221, 241, 254, 279, 295, 296, 297, 298, 299, 300, 319, 327, 328, 329, 338, 373, 397, 427, 429, 531, 561, 562, 623, 624, 665, 687, 690, 705, 714, 742, 781, 801, 825, 828, 922, 1160, 1165, 1178], "repres": [31, 34, 51, 55, 70, 97, 99, 101, 102, 103, 110, 113, 231, 251, 257, 279, 427, 429, 487, 568, 632, 635, 650, 663, 665, 676, 678, 679, 691, 692, 695, 703, 710, 714, 791, 799, 825, 1080, 1095, 1167, 1178], "null": [31, 33, 51, 59, 72, 80, 100, 108, 109, 118, 122, 128, 146, 150, 152, 156, 159, 165, 169, 170, 185, 192, 198, 199, 205, 208, 210, 226, 227, 230, 231, 232, 236, 241, 244, 247, 249, 251, 254, 261, 279, 289, 291, 292, 293, 303, 311, 313, 324, 330, 332, 335, 339, 341, 342, 368, 379, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 397, 400, 401, 402, 408, 417, 427, 429, 430, 431, 437, 439, 440, 447, 449, 452, 453, 457, 458, 465, 466, 467, 468, 469, 475, 477, 488, 489, 517, 518, 519, 522, 533, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 560, 565, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 595, 597, 598, 599, 614, 615, 616, 625, 635, 636, 637, 638, 647, 648, 649, 651, 656, 665, 676, 681, 685, 691, 692, 696, 698, 704, 714, 731, 734, 741, 747, 759, 760, 773, 784, 786, 787, 790, 795, 797, 798, 801, 803, 809, 825, 832, 833, 835, 844, 853, 868, 869, 883, 885, 886, 928, 929, 930, 931, 932, 933, 934, 943, 944, 945, 949, 951, 956, 962, 978, 979, 987, 990, 991, 998, 1000, 1009, 1017, 1019, 1020, 1026, 1028, 1036, 1049, 1050, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1078, 1083, 1084, 1088, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1116, 1117, 1118, 1123, 1125, 1126, 1127, 1142, 1157, 1159, 1160, 1161, 1168, 1178, 1185, 1186], "necessari": [31, 51, 63, 82, 113, 279, 825], "non_numer": [31, 51, 279, 825], "never": [31, 51, 110, 217, 279, 825], "strategi": [31, 51, 72, 80, 108, 135, 136, 137, 138, 140, 165, 175, 178, 192, 193, 203, 249, 279, 293, 402, 477, 489, 714, 747, 752, 755, 760, 761, 798, 825, 951, 1028, 1178], "put": [31, 51, 279, 825], "around": [31, 51, 279, 825], "thei": [31, 33, 34, 51, 63, 79, 80, 81, 82, 100, 122, 144, 194, 219, 279, 602, 603, 714, 737, 825, 828], "record": [31, 36, 51, 116, 128, 193, 240, 279, 761, 825], "termin": [31, 51, 279, 825], "also": [31, 34, 51, 62, 63, 100, 110, 113, 119, 122, 136, 137, 138, 139, 140, 144, 160, 174, 175, 176, 178, 179, 201, 204, 216, 218, 222, 230, 249, 254, 279, 332, 335, 368, 371, 418, 489, 532, 543, 544, 545, 546, 547, 549, 550, 551, 566, 601, 602, 653, 654, 658, 667, 669, 689, 704, 713, 714, 720, 751, 752, 753, 755, 756, 771, 780, 782, 790, 798, 801, 803, 825, 828, 920, 963, 1056, 1099, 1100, 1129, 1178], "indistinguish": [31, 51, 279, 825], "even": [31, 51, 108, 279, 525, 529, 714, 825, 1054, 1178], "invalid": [31, 51, 108, 109, 122, 279, 580, 581, 590, 627, 714, 825, 1108, 1109, 1118], "g": [31, 51, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 128, 146, 175, 193, 216, 240, 248, 250, 279, 286, 293, 368, 372, 386, 397, 489, 540, 543, 544, 545, 546, 547, 549, 550, 551, 558, 658, 659, 661, 662, 665, 701, 702, 714, 739, 752, 761, 777, 778, 780, 825, 917, 921, 935, 1078, 1159, 1178, 1186], "numer": [31, 34, 51, 151, 157, 193, 200, 208, 248, 279, 286, 324, 407, 418, 482, 504, 506, 526, 535, 558, 579, 614, 617, 627, 714, 726, 733, 740, 761, 770, 825, 828, 869, 882, 963, 980, 1078, 1085, 1107, 1142, 1159, 1178, 1186], "doe": [31, 33, 51, 72, 80, 91, 97, 99, 100, 101, 103, 104, 108, 109, 110, 112, 113, 117, 118, 122, 123, 126, 128, 153, 163, 191, 192, 217, 218, 219, 246, 254, 279, 318, 389, 477, 488, 602, 603, 629, 666, 675, 710, 714, 735, 745, 760, 766, 796, 801, 825, 834, 872, 938, 948, 956, 1035, 1086, 1168, 1178], "pars": [31, 51, 57, 108, 109, 113, 118, 122, 125, 126, 150, 174, 177, 222, 223, 226, 230, 244, 254, 255, 258, 279, 324, 418, 488, 521, 566, 580, 590, 609, 636, 638, 644, 647, 648, 649, 656, 669, 681, 685, 693, 694, 696, 698, 704, 714, 731, 751, 754, 782, 783, 786, 790, 795, 801, 802, 806, 825, 869, 963, 1083, 1108, 1118, 1136, 1137, 1178], "valid": [31, 34, 42, 51, 57, 110, 114, 116, 120, 140, 144, 161, 192, 279, 336, 570, 571, 572, 577, 578, 579, 581, 591, 592, 704, 714, 760, 825, 828, 880, 942, 956, 1098, 1099, 1100, 1105, 1106, 1107, 1109, 1119, 1120, 1178], "integ": [31, 33, 34, 47, 48, 49, 50, 51, 66, 67, 68, 69, 129, 136, 138, 139, 141, 159, 175, 216, 238, 279, 290, 323, 373, 406, 407, 520, 529, 534, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 590, 634, 641, 669, 673, 674, 690, 714, 741, 752, 780, 825, 828, 866, 922, 954, 973, 1054, 1058, 1071, 1080, 1118, 1178, 1185, 1186], "aren": [31, 51, 279, 825], "t": [31, 51, 59, 60, 80, 108, 113, 119, 122, 175, 196, 207, 246, 248, 279, 293, 336, 343, 351, 371, 391, 394, 395, 396, 450, 489, 521, 525, 577, 603, 606, 608, 704, 714, 752, 774, 796, 825, 828, 880, 920, 941, 943, 944, 945, 1001, 1036, 1078, 1105, 1130, 1131, 1134, 1136, 1159, 1168, 1178], "strictli": [31, 51, 63, 82, 279, 745, 825], "table_nam": [32, 34, 279], "connect": [32, 108, 110, 111, 114, 116, 120, 125, 127, 128, 279, 727], "if_exist": [32, 279], "dbwritemod": [32, 279], "fail": [32, 33, 98, 112, 114, 118, 123, 127, 131, 132, 146, 246, 279, 304, 376, 477, 606, 607, 608, 611, 714, 796, 825, 1036, 1134, 1135, 1136, 1139, 1178], "dbwriteengin": [32, 279], "sqlalchemi": [32, 110, 130, 279], "databas": [32, 110, 111, 279, 726], "creat": [32, 34, 63, 82, 97, 101, 103, 110, 111, 123, 124, 136, 137, 138, 139, 140, 141, 152, 153, 175, 176, 179, 205, 208, 216, 250, 254, 279, 345, 372, 386, 477, 533, 540, 543, 544, 546, 549, 550, 551, 595, 648, 657, 658, 659, 660, 661, 662, 663, 700, 701, 702, 710, 714, 734, 735, 743, 752, 753, 756, 780, 801, 825, 868, 872, 881, 890, 921, 935, 1047, 1054, 1057, 1123, 1159, 1178, 1185, 1186], "append": [32, 33, 138, 163, 192, 193, 279, 533, 704, 714, 760, 761, 825, 948, 1178], "your": [32, 34, 63, 72, 82, 108, 109, 110, 113, 128, 190, 196, 218, 219, 222, 237, 254, 258, 265, 279, 293, 489, 579, 606, 607, 608, 614, 679, 714, 757, 764, 766, 782, 801, 806, 813, 825, 1036, 1107, 1134, 1135, 1136, 1142, 1178, 1186], "special": [32, 108, 109, 122, 279, 542, 578, 714, 835, 1036, 1065, 1106, 1178], "should": [32, 34, 51, 52, 53, 80, 97, 99, 101, 103, 112, 117, 118, 120, 122, 126, 127, 128, 135, 136, 140, 150, 157, 175, 190, 193, 196, 216, 217, 218, 219, 237, 238, 244, 247, 250, 265, 279, 287, 321, 336, 368, 372, 386, 389, 397, 427, 429, 450, 489, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 554, 563, 631, 658, 659, 661, 662, 663, 665, 672, 676, 679, 691, 692, 701, 702, 704, 714, 731, 740, 745, 752, 760, 761, 766, 780, 784, 788, 790, 795, 797, 805, 825, 828, 862, 880, 917, 921, 935, 938, 1001, 1036, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1077, 1091, 1166, 1178], "uri": [32, 33, 110, 111, 112, 123, 124, 279], "postgresql": [32, 110, 111, 279, 521, 714], "user": [32, 110, 111, 147, 196, 207, 260, 265, 279, 293, 487, 489, 525, 555, 639, 679, 714, 774, 808, 813, 825, 835, 1036, 1081, 1178], "pass": [32, 33, 34, 39, 60, 72, 99, 110, 111, 113, 122, 127, 128, 131, 133, 136, 138, 140, 150, 155, 157, 174, 175, 178, 181, 195, 206, 207, 216, 222, 226, 230, 233, 244, 250, 254, 258, 279, 293, 352, 368, 371, 400, 416, 469, 489, 521, 525, 543, 544, 545, 546, 547, 549, 550, 551, 556, 566, 601, 602, 603, 635, 644, 658, 669, 696, 704, 710, 714, 731, 740, 751, 752, 753, 755, 756, 758, 765, 766, 774, 780, 782, 786, 788, 790, 795, 801, 806, 813, 825, 835, 897, 920, 949, 958, 988, 1020, 1036, 1083, 1129, 1130, 1131, 1149, 1178], "server": [32, 110, 111, 279], "port": [32, 108, 110, 111, 114, 116, 120, 125, 279], "sqlite": [32, 110, 279], "db": [32, 111, 279], "replac": [32, 33, 108, 109, 122, 164, 165, 214, 245, 254, 255, 279, 345, 371, 488, 592, 714, 746, 801, 802, 825, 890, 920, 1035, 1079, 1080, 1120, 1178], "insert": [32, 108, 109, 114, 116, 120, 122, 125, 126, 127, 184, 213, 245, 247, 279, 554, 569, 614, 714, 797, 825, 1077, 1097, 1142, 1178], "mode": [32, 33, 51, 52, 53, 57, 131, 133, 208, 279, 578, 687, 690, 705, 714, 736, 825, 1106, 1178, 1185], "new": [32, 33, 34, 113, 122, 144, 183, 184, 196, 204, 205, 212, 213, 234, 245, 247, 248, 249, 254, 255, 279, 288, 345, 399, 417, 486, 509, 591, 592, 597, 598, 615, 616, 622, 710, 714, 726, 778, 794, 797, 798, 801, 802, 808, 813, 825, 831, 890, 947, 1047, 1059, 1119, 1120, 1125, 1126, 1143, 1145, 1151, 1156, 1178, 1185], "alreadi": [32, 33, 279, 336, 450, 631, 714, 880, 1001, 1166, 1178], "adbc": [32, 110, 111, 279], "deltalak": [33, 112, 123, 130, 279], "deltat": [33, 279], "ignor": [33, 137, 138, 140, 198, 232, 249, 279, 289, 291, 339, 371, 394, 395, 396, 447, 514, 515, 569, 635, 637, 714, 832, 833, 883, 920, 943, 944, 945, 998, 1045, 1046, 1097, 1178], "overwrite_schema": [33, 279], "storage_opt": [33, 108, 112, 114, 116, 120, 123, 124, 125, 127, 279], "delta_write_opt": [33, 279], "delta": [33, 44, 112, 123, 231, 251, 279, 549, 551, 568, 632, 650, 691, 692, 695, 703, 714, 726, 791, 799, 825, 1072, 1074, 1095, 1167, 1178], "handl": [33, 80, 104, 108, 109, 122, 128, 279, 339, 447, 614, 714, 736, 825, 883, 998, 1142, 1178], "throw": [33, 151, 279, 319, 580, 581, 714, 733, 825, 858, 1108, 1109, 1178], "add": [33, 34, 109, 163, 175, 178, 196, 254, 255, 256, 279, 337, 510, 511, 527, 529, 618, 663, 667, 704, 714, 752, 755, 760, 801, 802, 803, 804, 825, 834, 948, 1178], "anyth": [33, 217, 279], "updat": [33, 279, 825], "extra": [33, 39, 53, 108, 109, 112, 113, 114, 116, 120, 122, 123, 124, 125, 163, 175, 279, 714, 752, 825, 834, 948, 1178], "storag": [33, 108, 112, 114, 116, 120, 123, 124, 125, 127, 279], "backend": [33, 110, 111, 112, 123, 124, 279], "cloud": [33, 110, 112, 123, 124, 127, 128, 279], "configur": [33, 112, 123, 124, 144, 279], "authent": [33, 112, 123, 124, 279], "see": [33, 34, 35, 36, 42, 110, 111, 112, 113, 123, 124, 127, 131, 132, 133, 134, 138, 140, 155, 175, 192, 207, 208, 279, 324, 402, 434, 487, 563, 570, 577, 578, 591, 658, 659, 661, 662, 689, 701, 702, 710, 714, 736, 752, 825, 828, 863, 869, 986, 1091, 1098, 1105, 1106, 1119, 1178, 1186], "here": [33, 34, 39, 97, 99, 100, 101, 103, 110, 111, 112, 117, 118, 123, 124, 126, 127, 136, 138, 140, 279, 489, 579, 581, 714, 825, 1109], "gc": [33, 112, 123, 124, 279], "azur": [33, 112, 123, 124, 127, 279], "keyword": [33, 60, 112, 120, 123, 155, 207, 217, 222, 223, 254, 255, 258, 279, 525, 693, 696, 714, 774, 782, 783, 801, 802, 806, 825, 1178], "argument": [33, 39, 82, 108, 112, 120, 122, 123, 155, 157, 162, 174, 175, 176, 177, 178, 179, 198, 206, 207, 208, 216, 222, 223, 224, 230, 232, 241, 247, 250, 254, 255, 258, 279, 372, 386, 397, 418, 521, 525, 540, 543, 544, 545, 546, 547, 549, 550, 551, 566, 601, 602, 603, 635, 642, 643, 644, 647, 648, 649, 658, 665, 690, 693, 696, 701, 714, 740, 744, 751, 752, 753, 754, 755, 756, 774, 780, 782, 783, 785, 790, 797, 801, 802, 806, 825, 834, 921, 935, 963, 1129, 1130, 1131, 1160, 1178], "while": [33, 79, 109, 112, 113, 123, 138, 140, 144, 190, 200, 245, 249, 279, 583, 737, 770, 798, 825, 956, 1111, 1178], "lake": [33, 112, 123, 279, 726], "typeerror": [33, 279], "unsupport": [33, 279], "arrowinvaliderror": [33, 279], "could": [33, 70, 85, 151, 279, 319, 653, 663, 667, 714, 733, 741, 825, 858, 956, 1178], "primit": [33, 279, 423, 714, 1159, 1178], "categor": [33, 63, 81, 82, 98, 131, 132, 133, 134, 192, 238, 239, 279, 320, 321, 337, 488, 529, 625, 714, 828, 859, 860, 861, 862, 863, 864, 881, 1054, 1161, 1178], "protocol": [33, 98, 111, 146, 279], "associ": [33, 34, 58, 60, 72, 111, 137, 219, 279], "affect": [33, 279], "follow": [33, 34, 39, 77, 108, 109, 112, 122, 123, 124, 131, 175, 193, 196, 207, 216, 250, 279, 368, 372, 386, 525, 532, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 616, 627, 658, 659, 661, 662, 679, 701, 702, 704, 706, 707, 709, 714, 715, 716, 719, 721, 722, 723, 752, 761, 774, 780, 825, 917, 921, 935, 1056, 1079, 1080, 1170, 1172, 1174, 1178, 1179, 1182, 1183, 1184, 1186], "unsign": [33, 66, 67, 68, 69, 279, 534, 714, 828, 973, 1058, 1178], "millisecond": [33, 175, 193, 216, 250, 279, 368, 372, 382, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 714, 752, 761, 780, 825, 828, 917, 921, 931, 935], "nanosecond": [33, 175, 193, 216, 250, 279, 368, 372, 373, 384, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 714, 752, 761, 780, 825, 917, 921, 922, 933, 935], "zone": [33, 42, 279, 343, 346, 371, 608, 658, 659, 660, 661, 662, 828, 888, 891, 920, 1136], "binari": [33, 35, 110, 113, 279, 312, 314, 315, 316, 828, 852, 855, 856], "nullabl": [33, 279], "To": [33, 79, 164, 279, 324, 341, 342, 402, 570, 577, 578, 591, 602, 603, 604, 605, 612, 658, 714, 746, 825, 869, 885, 886, 956, 1098, 1105, 1106, 1119, 1140, 1159, 1178], "pyarrow": [33, 39, 97, 98, 102, 108, 111, 112, 114, 116, 120, 123, 128, 130, 235, 240, 241, 279, 727, 1154, 1158, 1159, 1160, 1178], "ha": [33, 34, 72, 79, 110, 113, 122, 146, 147, 149, 175, 176, 177, 178, 179, 216, 250, 260, 279, 293, 317, 318, 336, 421, 425, 428, 445, 448, 455, 459, 473, 478, 485, 498, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 571, 584, 585, 586, 587, 593, 594, 600, 626, 639, 677, 710, 714, 730, 737, 752, 753, 754, 755, 756, 765, 777, 780, 805, 808, 813, 825, 835, 857, 868, 880, 882, 956, 968, 970, 974, 996, 999, 1006, 1010, 1024, 1029, 1064, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1162, 1178], "last": [33, 131, 132, 133, 134, 150, 181, 193, 195, 208, 219, 230, 233, 244, 246, 273, 279, 303, 336, 349, 364, 369, 387, 425, 426, 433, 453, 474, 508, 510, 511, 512, 513, 527, 565, 598, 618, 620, 658, 699, 714, 731, 761, 790, 793, 795, 796, 821, 825, 828, 844, 880, 894, 913, 918, 936, 958, 974, 975, 988, 1004, 1025, 1126, 1149, 1178], "filesystem": [33, 112, 123, 124, 279], "table_path": [33, 112, 123, 124, 279], "match": [33, 34, 42, 80, 91, 97, 99, 100, 101, 103, 117, 118, 126, 131, 132, 133, 134, 165, 193, 217, 249, 279, 495, 548, 570, 571, 572, 575, 577, 578, 580, 581, 591, 592, 599, 606, 607, 608, 714, 747, 761, 798, 825, 828, 973, 982, 1071, 1098, 1099, 1100, 1103, 1105, 1106, 1108, 1109, 1119, 1120, 1127, 1134, 1135, 1136, 1178], "version": [33, 77, 82, 112, 113, 123, 130, 146, 147, 149, 175, 176, 177, 178, 179, 227, 260, 279, 293, 318, 325, 326, 350, 354, 358, 360, 362, 364, 365, 367, 371, 374, 386, 421, 425, 428, 445, 448, 455, 459, 473, 478, 485, 541, 557, 571, 584, 585, 586, 587, 593, 594, 600, 606, 608, 639, 646, 658, 660, 677, 689, 690, 701, 714, 730, 750, 752, 753, 754, 755, 756, 765, 777, 787, 805, 808, 825, 834, 835, 870, 871, 881, 895, 899, 906, 908, 911, 913, 914, 916, 920, 923, 935, 968, 974, 996, 999, 1006, 1010, 1024, 1029, 1054, 1064, 1084, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1134, 1136, 1178], "old": [33, 212, 279, 778, 825], "existing_table_path": [33, 279], "store": [33, 108, 120, 124, 163, 190, 218, 279, 320, 834, 860, 948, 1178], "bucket": [33, 112, 123, 124, 127, 279, 372, 386, 921, 935, 959, 1178], "prefix": [33, 144, 279, 288, 316, 486, 509, 511, 512, 513, 599, 603, 604, 614, 618, 714, 828, 856, 1127, 1132, 1142], "aws_region": [33, 123, 127, 279], "the_aws_region": [33, 279], "aws_access_key_id": [33, 112, 123, 127, 279], "the_aws_access_key_id": [33, 112, 123, 124, 279], "aws_secret_access_kei": [33, 112, 123, 127, 279], "the_aws_secret_access_kei": [33, 112, 123, 124, 279], "pa": [33, 97, 128, 279], "workbook": [34, 113, 279], "worksheet": [34, 113, 119, 279], "posit": [34, 157, 162, 174, 177, 206, 222, 223, 224, 226, 230, 247, 254, 255, 258, 279, 394, 395, 396, 397, 469, 521, 529, 556, 566, 579, 590, 642, 643, 644, 647, 648, 649, 665, 693, 696, 714, 740, 744, 751, 754, 782, 783, 785, 786, 790, 797, 801, 802, 806, 825, 943, 944, 945, 1020, 1054, 1083, 1107, 1118, 1178], "tupl": [34, 111, 113, 119, 147, 190, 196, 217, 218, 219, 225, 257, 279, 536, 714, 775, 788, 825, 828, 1060, 1178], "a1": [34, 73, 75, 279], "table_styl": [34, 279], "column_format": [34, 279], "columnformatdict": [34, 279], "dtype_format": [34, 279], "oneormoredatatyp": [34, 136, 279, 982, 1178], "conditional_format": [34, 279], "conditionalformatdict": [34, 279], "header_format": [34, 279], "column_tot": [34, 279], "columntotalsdefinit": [34, 279], "column_width": [34, 279], "columnwidthsdefinit": [34, 279], "row_tot": [34, 279], "rowtotalsdefinit": [34, 279], "row_height": [34, 279], "sparklin": [34, 279], "sequenc": [34, 64, 72, 78, 79, 97, 99, 100, 101, 103, 108, 109, 110, 113, 117, 118, 119, 122, 126, 136, 137, 138, 150, 156, 162, 163, 192, 193, 200, 204, 206, 207, 208, 219, 230, 238, 244, 248, 249, 250, 279, 337, 423, 477, 485, 487, 525, 529, 566, 604, 605, 616, 639, 644, 653, 654, 667, 669, 677, 678, 679, 689, 694, 714, 731, 744, 760, 761, 770, 774, 790, 795, 798, 825, 834, 881, 882, 884, 948, 1028, 1054, 1080, 1145, 1178], "formula": [34, 279, 391, 714, 941, 1178], "autofilt": [34, 279], "autofit": [34, 279], "hidden_column": [34, 279], "selectortyp": [34, 279, 828], "hide_gridlin": [34, 279], "sheet_zoom": [34, 279], "freeze_pan": [34, 279], "excel": [34, 113, 279], "open": [34, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 279, 739, 777, 825], "xlsxwriter": [34, 130, 279], "close": [34, 110, 175, 176, 178, 179, 216, 279, 337, 418, 482, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 563, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 780, 825, 881, 963, 1054, 1091, 1178], "xlsx": [34, 113, 279], "work": [34, 43, 98, 109, 128, 213, 223, 255, 279, 289, 291, 293, 310, 323, 324, 397, 406, 450, 479, 489, 521, 539, 582, 583, 628, 714, 783, 802, 825, 828, 832, 833, 851, 866, 869, 954, 1001, 1030, 1110, 1111, 1163, 1178], "directori": [34, 39, 120, 127, 279], "sheet1": [34, 279], "medium": [34, 279], "kei": [34, 72, 77, 80, 124, 127, 175, 190, 192, 193, 201, 206, 208, 212, 215, 218, 219, 249, 279, 489, 696, 714, 745, 752, 760, 761, 771, 778, 779, 798, 825], "first_column": [34, 279], "last_column": [34, 279], "banded_column": [34, 279], "banded_row": [34, 279], "sheet": [34, 113, 119, 279], "chart": [34, 279, 775, 825], "subsequ": [34, 62, 211, 241, 279, 477, 704, 743, 825], "colnam": [34, 122, 138, 160, 279, 742, 825], "given": [34, 57, 58, 72, 97, 99, 100, 101, 103, 108, 109, 110, 111, 113, 117, 118, 119, 122, 126, 127, 133, 134, 135, 136, 138, 139, 140, 141, 147, 150, 161, 162, 164, 175, 176, 178, 179, 189, 196, 206, 207, 216, 217, 219, 226, 227, 230, 244, 249, 279, 324, 343, 346, 375, 377, 378, 391, 418, 444, 469, 477, 480, 489, 521, 525, 532, 535, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 578, 579, 588, 589, 606, 608, 614, 616, 639, 665, 677, 678, 679, 690, 691, 692, 714, 731, 744, 752, 753, 755, 756, 765, 766, 774, 780, 786, 787, 790, 795, 798, 808, 813, 825, 828, 835, 869, 888, 891, 924, 926, 927, 941, 942, 959, 963, 985, 995, 1020, 1028, 1031, 1034, 1036, 1047, 1056, 1060, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1083, 1084, 1106, 1107, 1116, 1117, 1134, 1136, 1142, 1165, 1169, 1178, 1185, 1186], "dd": [34, 279], "mm": [34, 279], "yyyi": [34, 279], "00": [34, 138, 175, 193, 250, 279, 343, 344, 346, 351, 353, 357, 361, 364, 365, 368, 371, 372, 373, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 543, 544, 546, 549, 550, 551, 606, 608, 611, 661, 663, 701, 702, 714, 752, 761, 825, 828, 888, 889, 891, 892, 893, 896, 897, 898, 904, 905, 910, 913, 914, 915, 917, 920, 921, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 938, 1134, 1136, 1139], "overridden": [34, 97, 99, 101, 103, 117, 118, 142, 279, 825], "basi": [34, 138, 279], "param": [34, 97, 99, 100, 101, 103, 108, 109, 117, 118, 122, 137, 138, 140, 217, 279, 825], "It": [34, 63, 82, 201, 207, 265, 279, 318, 497, 539, 710, 714, 765, 766, 771, 813, 825, 1079, 1080, 1178], "group": [34, 39, 53, 57, 109, 174, 175, 176, 177, 178, 179, 191, 204, 206, 208, 216, 219, 248, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 287, 336, 399, 405, 411, 450, 489, 497, 499, 521, 532, 539, 540, 565, 566, 570, 577, 578, 579, 591, 621, 631, 679, 714, 751, 752, 753, 754, 755, 756, 780, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 828, 880, 1001, 1063, 1098, 1105, 1106, 1107, 1119, 1166, 1178], "float_dtyp": [34, 279], "simplifi": [34, 51, 52, 53, 78, 79, 279, 736, 737, 743, 745, 775, 788, 825], "uniform": [34, 279, 529, 714, 1054, 1178], "condit": [34, 159, 166, 217, 279, 575, 599, 645, 667, 704, 741, 748, 825], "suppli": [34, 97, 99, 100, 101, 103, 110, 117, 118, 126, 166, 217, 279, 525, 714, 748, 825], "typenam": [34, 279], "3_color_scal": [34, 279], "data_bar": [34, 279], "make": [34, 64, 80, 97, 102, 108, 109, 114, 116, 120, 125, 201, 204, 211, 250, 279, 395, 396, 488, 512, 513, 521, 535, 597, 714, 771, 825, 944, 945, 959, 1035, 1125, 1178, 1186], "icon": [34, 279], "multipl": [34, 60, 78, 79, 80, 108, 109, 113, 119, 122, 125, 126, 127, 136, 140, 150, 157, 161, 163, 166, 174, 175, 183, 191, 206, 208, 219, 222, 224, 230, 244, 249, 254, 258, 279, 475, 494, 498, 505, 506, 521, 536, 539, 543, 544, 545, 546, 547, 549, 550, 551, 566, 644, 653, 654, 667, 677, 678, 680, 684, 689, 694, 697, 704, 710, 714, 731, 736, 737, 740, 748, 751, 752, 782, 785, 790, 795, 798, 801, 806, 813, 825, 834, 942, 948, 1026, 1041, 1060, 1178], "singl": [34, 58, 72, 79, 80, 108, 109, 110, 111, 113, 120, 122, 127, 136, 151, 157, 158, 159, 163, 171, 189, 192, 196, 206, 217, 219, 230, 279, 293, 324, 368, 403, 411, 445, 446, 475, 487, 489, 533, 536, 566, 569, 621, 633, 639, 644, 648, 649, 674, 678, 679, 694, 702, 714, 733, 736, 740, 741, 760, 790, 825, 834, 869, 917, 948, 996, 997, 1026, 1057, 1060, 1097, 1154, 1178], "across": [34, 72, 279, 636, 638, 656, 681, 685, 698], "effect": [34, 169, 175, 178, 240, 279, 351, 489, 658, 659, 714, 752, 755, 804, 825, 888, 896], "heatmap": [34, 279], "min": [34, 39, 53, 156, 165, 208, 216, 279, 326, 333, 402, 521, 532, 540, 546, 685, 693, 714, 747, 780, 825, 871, 877, 882, 951, 1056, 1069, 1178, 1186], "entir": [34, 279, 736, 825], "made": [34, 110, 279, 1159, 1178], "up": [34, 64, 111, 190, 193, 218, 219, 237, 279, 293, 323, 489, 714, 760, 761, 766, 825, 828, 866, 1178], "abov": [34, 131, 208, 279, 704], "order": [34, 51, 52, 53, 57, 59, 72, 78, 100, 110, 129, 131, 132, 150, 159, 166, 174, 175, 176, 177, 178, 179, 192, 206, 207, 208, 216, 220, 224, 230, 240, 244, 246, 250, 279, 303, 310, 321, 341, 342, 403, 449, 464, 471, 479, 532, 540, 544, 545, 546, 547, 549, 551, 553, 554, 555, 565, 566, 602, 603, 604, 605, 616, 628, 629, 631, 644, 714, 725, 731, 741, 748, 751, 752, 753, 754, 755, 756, 760, 770, 780, 785, 790, 795, 796, 825, 844, 851, 862, 864, 885, 886, 952, 981, 1000, 1015, 1022, 1030, 1056, 1061, 1076, 1077, 1081, 1093, 1145, 1163, 1164, 1166, 1178, 1186], "than": [34, 51, 52, 53, 96, 101, 103, 108, 109, 110, 113, 119, 122, 128, 138, 140, 152, 174, 177, 190, 193, 196, 206, 217, 218, 220, 248, 265, 279, 410, 412, 436, 464, 484, 489, 500, 529, 539, 553, 563, 582, 588, 589, 598, 614, 650, 658, 679, 714, 736, 751, 754, 761, 813, 825, 1015, 1036, 1054, 1063, 1076, 1091, 1110, 1116, 1117, 1126, 1142, 1178, 1186], "bold": [34, 279], "font_color": [34, 279], "702963": [34, 279], "total": [34, 161, 279, 350, 354, 358, 360, 362, 367, 374, 379, 380, 381, 382, 383, 384, 385, 895, 899, 906, 908, 911, 916, 923, 928, 929, 930, 931, 932, 933, 934, 942, 1178], "export": [34, 190, 191, 218, 219, 237, 240, 279, 710], "sum": [34, 57, 161, 169, 174, 175, 189, 208, 216, 258, 279, 334, 335, 391, 403, 477, 489, 497, 499, 500, 501, 540, 543, 546, 550, 633, 635, 653, 655, 656, 667, 679, 689, 698, 714, 736, 737, 739, 743, 745, 751, 752, 773, 775, 780, 784, 788, 806, 825, 828, 878, 879, 941, 942, 1066, 1067, 1069, 1072, 1073, 1074, 1178], "must": [34, 98, 99, 112, 123, 124, 128, 156, 162, 175, 176, 178, 179, 193, 201, 216, 217, 279, 337, 477, 487, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 704, 714, 744, 752, 753, 755, 756, 761, 765, 766, 771, 780, 825, 881, 882, 1054, 1178], "funcnam": [34, 279], "averag": [34, 279, 394, 395, 396, 532, 714, 943, 944, 945, 1056, 1178], "count_num": [34, 279], "count": [34, 57, 108, 109, 114, 116, 120, 122, 125, 126, 127, 128, 148, 149, 156, 175, 193, 204, 205, 208, 216, 245, 249, 250, 256, 265, 270, 279, 294, 331, 368, 437, 445, 446, 489, 497, 499, 507, 519, 540, 543, 544, 545, 546, 547, 549, 550, 551, 571, 572, 629, 631, 640, 686, 714, 729, 730, 752, 761, 773, 780, 804, 813, 818, 825, 882, 917, 959, 996, 997, 1043, 1049, 1099, 1100, 1164, 1166, 1178], "std_dev": [34, 279], "var": [34, 141, 279, 551, 714, 825, 1178], "pixel": [34, 279], "unit": [34, 42, 44, 131, 132, 133, 134, 138, 140, 161, 279, 344, 345, 352, 377, 389, 483, 498, 606, 608, 630, 658, 659, 660, 661, 662, 663, 669, 714, 775, 825, 828, 889, 890, 897, 926, 938, 942, 1034, 1134, 1136, 1165, 1178, 1186], "hand": [34, 108, 109, 122, 279, 465, 466, 467, 468, 1016, 1017, 1018, 1019], "side": [34, 175, 176, 178, 179, 216, 279, 418, 465, 466, 467, 468, 540, 543, 544, 545, 546, 547, 549, 550, 551, 554, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 780, 825, 963, 1016, 1017, 1018, 1019, 1077, 1178], "call": [34, 61, 63, 82, 109, 110, 131, 132, 133, 134, 138, 140, 144, 174, 175, 178, 194, 196, 216, 278, 279, 293, 332, 335, 433, 489, 508, 510, 511, 512, 513, 527, 559, 618, 710, 714, 727, 751, 752, 753, 755, 756, 780, 824, 825, 828, 835, 1036, 1087, 1178], "ad": [34, 100, 113, 175, 178, 245, 249, 254, 255, 279, 292, 400, 653, 654, 714, 752, 755, 798, 801, 802, 825, 881, 949, 1054, 1178], "wise": [34, 72, 110, 169, 279, 295, 296, 297, 298, 299, 300, 327, 328, 329, 398, 481, 560, 561, 562, 623, 624, 653, 654, 667, 689, 714, 836, 837, 838, 839, 840, 841, 873, 874, 875, 946, 1032, 1033, 1088, 1089, 1090, 1152, 1153, 1178], "particip": [34, 279], "distinct": [34, 140, 206, 279, 310, 421, 422, 425, 426, 479, 532, 663, 714, 851, 968, 969, 974, 975, 1030, 1056, 1178, 1186], "referenc": [34, 279, 616], "differ": [34, 108, 128, 131, 133, 163, 175, 190, 216, 218, 219, 237, 245, 279, 339, 349, 368, 369, 371, 387, 393, 447, 465, 467, 473, 488, 489, 514, 515, 517, 606, 629, 666, 669, 675, 714, 743, 752, 780, 825, 828, 834, 863, 883, 894, 917, 918, 920, 936, 948, 998, 1016, 1018, 1024, 1036, 1045, 1046, 1078, 1134, 1178], "row_index": [34, 279], "height": [34, 159, 279], "provid": [34, 60, 108, 109, 111, 112, 122, 123, 124, 127, 138, 140, 166, 189, 279, 313, 314, 397, 477, 487, 489, 573, 574, 577, 580, 581, 602, 603, 604, 605, 669, 696, 714, 726, 748, 825, 853, 854, 959, 985, 1036, 1101, 1102, 1105, 1108, 1109, 1178, 1185, 1186], "intersect": [34, 279, 466, 828, 1017], "bodi": [34, 279], "start": [34, 107, 108, 109, 110, 111, 114, 116, 119, 120, 122, 125, 126, 127, 142, 174, 175, 177, 178, 194, 229, 250, 256, 279, 312, 315, 316, 349, 363, 369, 372, 386, 387, 397, 418, 470, 543, 544, 546, 549, 550, 551, 564, 570, 575, 578, 589, 595, 599, 603, 604, 614, 641, 653, 658, 659, 661, 662, 665, 667, 673, 674, 701, 702, 704, 714, 751, 752, 754, 755, 775, 789, 804, 825, 828, 856, 889, 891, 894, 897, 898, 905, 907, 910, 912, 915, 918, 921, 926, 935, 936, 963, 1021, 1092, 1103, 1106, 1117, 1123, 1127, 1142, 1178, 1186], "zero": [34, 97, 98, 107, 108, 109, 114, 116, 120, 137, 146, 165, 190, 217, 235, 240, 241, 279, 402, 477, 482, 554, 563, 614, 627, 714, 734, 747, 825, 868, 951, 1028, 1091, 1142, 1154, 1159, 1160, 1178], "unless": [34, 72, 99, 241, 279, 601, 602, 690, 825, 1129, 1160, 1168, 1178], "marker": [34, 279], "compliant": [34, 279], "case": [34, 63, 72, 79, 97, 99, 100, 101, 103, 110, 117, 118, 126, 127, 142, 147, 163, 175, 176, 178, 179, 190, 196, 216, 218, 219, 237, 279, 343, 486, 487, 497, 498, 509, 540, 570, 578, 591, 714, 737, 752, 753, 755, 756, 780, 825, 828, 834, 888, 948, 1098, 1106, 1119, 1178], "three": [34, 243, 279, 337, 477, 529, 554, 714, 881, 1028, 1054, 1178], "avail": [34, 106, 110, 111, 112, 123, 124, 136, 144, 208, 278, 279, 532, 706, 707, 709, 713, 714, 715, 716, 719, 720, 721, 722, 723, 726, 727, 745, 824, 825, 828, 1056, 1170, 1172, 1174, 1178, 1179, 1182, 1183, 1184], "insert_befor": [34, 279], "insert_aft": [34, 279], "respect": [34, 279, 828], "direct": [34, 111, 120, 124, 127, 131, 226, 248, 279, 469, 556, 714, 786, 825, 1020, 1083, 1178], "far": [34, 279], "strongli": [34, 142, 196, 217, 265, 279, 489, 714, 1036, 1178], "advis": [34, 63, 82, 194, 279], "structur": [34, 88, 92, 94, 163, 207, 219, 240, 279, 525, 714, 774, 825, 834, 948, 1178], "wherev": [34, 196, 265, 279, 489, 714, 1036, 1178], "possibl": [34, 108, 150, 174, 177, 190, 196, 218, 244, 246, 265, 279, 483, 489, 497, 542, 598, 630, 714, 731, 751, 754, 790, 795, 796, 825, 1036, 1065, 1126, 1178], "simpl": [34, 140, 204, 279], "colx": [34, 62, 279, 512, 513, 828, 1186], "coli": [34, 279, 512, 513, 828, 1186], "after": [34, 62, 80, 100, 107, 108, 109, 114, 116, 120, 122, 125, 126, 127, 163, 247, 278, 279, 397, 488, 521, 532, 614, 714, 797, 825, 834, 948, 1035, 1056, 1142, 1178], "befor": [34, 108, 110, 113, 122, 128, 131, 132, 133, 134, 142, 144, 163, 175, 178, 193, 247, 279, 334, 335, 336, 488, 521, 522, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 614, 619, 691, 692, 714, 752, 755, 758, 761, 797, 825, 834, 878, 879, 880, 948, 1035, 1050, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1142, 1148, 1178], "most": [34, 59, 97, 108, 109, 111, 122, 131, 132, 133, 134, 279, 498, 505, 522, 598, 714, 1041, 1050, 1126, 1178, 1185], "mandatori": [34, 279], "return_dtyp": [34, 147, 196, 279, 293, 485, 487, 488, 489, 639, 677, 678, 679, 714, 835, 1035, 1036, 1178], "latter": [34, 163, 279, 834, 948, 1178], "appropri": [34, 128, 240, 279, 532, 714, 1056, 1178], "pure": [34, 279, 1159, 1178], "actual": [34, 100, 138, 140, 219, 279, 1086, 1178], "indic": [34, 107, 108, 109, 110, 114, 116, 120, 122, 135, 136, 140, 175, 176, 178, 179, 193, 216, 219, 224, 226, 238, 250, 279, 304, 368, 372, 386, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 469, 475, 493, 496, 540, 543, 544, 545, 546, 547, 549, 550, 551, 554, 556, 560, 621, 644, 645, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 761, 780, 785, 786, 825, 828, 917, 921, 935, 967, 968, 969, 972, 974, 975, 976, 977, 978, 979, 1020, 1026, 1077, 1083, 1088, 1150, 1155, 1178, 1186], "calcul": [34, 72, 175, 231, 251, 279, 339, 394, 395, 396, 434, 447, 465, 483, 548, 563, 568, 630, 632, 650, 691, 692, 695, 703, 714, 752, 791, 799, 825, 883, 943, 944, 945, 986, 998, 1016, 1071, 1091, 1095, 1167, 1178], "individu": [34, 53, 138, 144, 216, 240, 279, 489, 578, 714, 736, 780, 825, 867, 1106, 1178], "gridlin": [34, 279], "zoom": [34, 279], "level": [34, 39, 53, 122, 125, 126, 127, 138, 169, 196, 204, 279, 403, 714, 757, 764, 825], "freez": [34, 279], "pane": [34, 279], "top": [34, 150, 244, 279, 731, 795, 825], "index": [34, 98, 102, 105, 130, 146, 167, 175, 176, 178, 179, 184, 189, 190, 193, 208, 214, 216, 217, 218, 226, 229, 240, 242, 249, 250, 256, 279, 287, 301, 302, 303, 305, 368, 411, 441, 442, 453, 469, 470, 475, 477, 540, 543, 544, 545, 546, 547, 549, 550, 551, 554, 556, 564, 577, 595, 621, 714, 752, 753, 755, 756, 761, 780, 786, 789, 798, 804, 825, 842, 843, 844, 845, 846, 917, 985, 992, 993, 1004, 1020, 1021, 1026, 1028, 1047, 1077, 1080, 1083, 1092, 1105, 1123, 1150, 1178], "thu": [34, 163, 279, 650, 834, 948, 1178], "altern": [34, 279, 710, 1159, 1178], "a2": [34, 73, 75, 279], "occur": [34, 78, 79, 279, 445, 446, 505, 532, 714, 736, 737, 743, 745, 775, 788, 825, 996, 997, 1041, 1056, 1178], "equival": [34, 97, 99, 100, 101, 103, 112, 117, 118, 126, 175, 189, 204, 279, 286, 290, 392, 393, 407, 410, 412, 436, 484, 504, 506, 516, 517, 520, 526, 583, 617, 627, 634, 714, 752, 825, 985, 1111, 1138, 1140, 1141, 1178], "top_row": [34, 279], "top_col": [34, 279], "base": [34, 40, 159, 166, 175, 176, 178, 179, 216, 279, 343, 351, 391, 394, 395, 396, 480, 481, 529, 540, 590, 714, 741, 748, 752, 753, 755, 756, 780, 825, 828, 888, 896, 941, 943, 944, 945, 959, 1031, 1032, 1054, 1118, 1169, 1178, 1186], "scroll": [34, 279], "region": [34, 124, 279], "initit": [34, 279], "5th": [34, 279], "properti": [34, 146, 154, 160, 168, 182, 221, 225, 253, 279, 738, 742, 781, 800, 825, 828, 1186], "readthedoc": [34, 279], "io": [34, 124, 279, 739, 784, 825], "html": [34, 35, 36, 98, 110, 146, 155, 279], "definit": [34, 136, 279, 434, 714, 986, 1178], "take": [34, 113, 119, 138, 144, 169, 175, 178, 201, 207, 208, 234, 240, 279, 368, 566, 622, 658, 659, 664, 666, 675, 714, 752, 755, 771, 794, 825, 917, 1151, 1169, 1178], "care": [34, 279, 293, 489, 555, 714, 1081, 1178], "rel": [34, 111, 112, 123, 124, 131, 132, 133, 134, 279, 368, 394, 395, 396, 545, 547, 549, 551, 714, 917, 943, 944, 945, 1178], "working_with_conditional_format": [34, 279], "similarli": [34, 100, 175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "well": [34, 108, 109, 110, 122, 208, 279, 418, 714, 963, 1178], "adjac": [34, 279], "two": [34, 62, 63, 81, 82, 99, 101, 103, 111, 169, 200, 201, 208, 243, 259, 265, 279, 287, 340, 345, 411, 477, 529, 565, 621, 642, 643, 650, 652, 691, 692, 714, 770, 771, 807, 813, 825, 884, 890, 1028, 1054, 1178], "help": [34, 131, 132, 133, 134, 279, 745, 825], "where": [34, 57, 72, 110, 111, 137, 159, 163, 175, 190, 200, 218, 231, 249, 251, 279, 304, 388, 391, 393, 517, 535, 554, 563, 566, 568, 632, 645, 650, 691, 692, 695, 703, 704, 714, 741, 752, 770, 791, 798, 799, 825, 834, 845, 937, 941, 948, 1077, 1091, 1095, 1167, 1169, 1178, 1185], "appear": [34, 100, 279, 629, 714, 1164, 1178], "working_with_sparklin": [34, 279], "inject": [34, 72, 279], "locat": [34, 163, 214, 242, 247, 279, 554, 714, 797, 825, 834, 948, 1077, 1080, 1150, 1178], "syntax": [34, 166, 196, 204, 279, 570, 577, 578, 591, 710, 748, 788, 825, 1098, 1105, 1106, 1119, 1178], "ensur": [34, 111, 137, 138, 140, 174, 177, 206, 217, 279, 418, 714, 751, 754, 765, 766, 825, 828, 1159, 1178], "correctli": [34, 113, 279], "microsoft": [34, 279], "com": [34, 111, 279, 394, 395, 396, 577, 578, 579, 714, 943, 944, 945, 1105, 1106, 1107, 1178], "u": [34, 42, 44, 60, 127, 279, 344, 345, 352, 377, 389, 606, 608, 658, 659, 660, 661, 662, 663, 669, 828, 889, 890, 897, 926, 938, 1134, 1136], "offic": [34, 279], "f5ed2452": [34, 279], "2337": [34, 279], "4f71": [34, 279], "bed3": [34, 279], "c8ae6d2b276": [34, 279], "instanti": [34, 110, 222, 254, 279, 782, 801, 825], "basic": [34, 279, 1186], "random": [34, 35, 129, 136, 138, 140, 180, 220, 279, 413, 464, 532, 553, 559, 631, 714, 726, 957, 1015, 1056, 1076, 1087, 1166, 1178], "date": [34, 42, 72, 108, 109, 111, 113, 119, 122, 128, 131, 132, 133, 134, 138, 151, 156, 173, 175, 176, 178, 179, 191, 193, 216, 250, 279, 344, 345, 346, 349, 352, 355, 356, 357, 363, 364, 365, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 444, 540, 543, 544, 545, 546, 547, 549, 550, 551, 606, 607, 625, 658, 659, 661, 662, 669, 676, 700, 701, 702, 714, 733, 752, 753, 755, 756, 761, 780, 825, 828, 889, 890, 891, 894, 897, 898, 900, 901, 902, 903, 904, 905, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 982, 995, 996, 997, 1045, 1046, 1080, 1134, 1135, 1161, 1178], "dtm": [34, 279, 345, 828, 890], "2023": [34, 104, 130, 191, 279, 345, 663, 676, 828, 890], "500": [34, 190, 249, 279, 745, 798, 825, 905, 907, 915, 1066, 1067, 1069, 1178], "val": [34, 215, 279, 321, 489, 525, 625, 704, 714, 779, 825, 862], "10_000": [34, 279], "20_000": [34, 279], "30_000": [34, 279], "increas": [34, 72, 108, 120, 279, 336, 714, 880, 1178], "b4": [34, 279], "light": [34, 279], "twice": [34, 113, 279], "titl": [34, 57, 279], "explicit": [34, 110, 122, 136, 249, 279, 689, 798, 825], "integr": [34, 279, 1186], "multi_fram": [34, 279], "wb": [34, 279], "coordin": [34, 279], "advanc": [34, 113, 208, 279, 477, 1028, 1186], "min_color": [34, 279], "76933c": [34, 279], "mid_color": [34, 279], "c4d79b": [34, 279], "max_color": [34, 279], "ebf1d": [34, 279], "data_bar_2010": [34, 279], "bar_color": [34, 279], "9bbb59": [34, 279], "bar_negative_color_sam": [34, 279], "bar_negative_border_color_sam": [34, 279], "000": [34, 279, 1186], "white": [34, 279], "w": [34, 59, 60, 175, 178, 219, 279, 572, 577, 579, 636, 638, 752, 755, 825, 828, 1100, 1105, 1107, 1130], "get_worksheet_by_nam": [34, 279], "fmt_titl": [34, 279], "add_format": [34, 279], "4f6228": [34, 279], "font_siz": [34, 279], "12": [34, 72, 104, 137, 138, 149, 175, 193, 216, 227, 250, 279, 288, 325, 326, 334, 343, 345, 349, 353, 361, 363, 364, 365, 368, 369, 370, 372, 386, 387, 388, 522, 531, 540, 550, 557, 558, 572, 585, 593, 609, 646, 654, 657, 658, 659, 660, 661, 662, 678, 701, 702, 714, 730, 750, 752, 757, 761, 764, 777, 780, 787, 788, 793, 805, 825, 828, 870, 871, 888, 890, 912, 921, 935, 1036, 1075, 1084, 1100, 1113, 1121, 1137, 1178, 1186], "ital": [34, 279], "customis": [34, 279], "trend": [34, 279], "win_loss": [34, 279], "subtl": [34, 279], "tone": [34, 279], "hidden": [34, 279], "id": [34, 80, 124, 245, 265, 279, 539, 591, 592, 629, 714, 813, 1063, 1164, 1178, 1186], "q1": [34, 279], "55": [34, 74, 279], "20": [34, 138, 163, 183, 184, 201, 207, 209, 213, 214, 279, 301, 302, 303, 339, 372, 386, 413, 417, 525, 543, 544, 546, 669, 676, 701, 714, 771, 774, 825, 828, 883, 935, 1178], "35": [34, 279, 339, 714, 883, 1178], "q2": [34, 279], "30": [34, 163, 175, 183, 207, 213, 214, 236, 254, 279, 301, 302, 303, 339, 345, 353, 361, 363, 364, 370, 371, 372, 379, 386, 387, 413, 558, 676, 701, 714, 752, 774, 801, 825, 828, 883, 890, 913, 920, 921, 928, 935, 1178, 1186], "15": [34, 130, 137, 175, 184, 196, 216, 279, 336, 339, 353, 361, 365, 372, 386, 525, 540, 550, 654, 690, 701, 714, 752, 780, 825, 880, 883, 921, 935, 1178], "60": [34, 163, 279, 373, 385, 550, 606, 714, 918, 922, 934, 1134], "q3": [34, 279], "40": [34, 163, 207, 279, 372, 386, 413, 609, 714, 774, 825, 901, 935, 1137], "80": [34, 279], "q4": [34, 279], "75": [34, 156, 279, 290, 520, 529, 543, 544, 545, 546, 549, 550, 551, 679, 714, 882, 959, 1054, 1178, 1186], "account": [34, 104, 111, 124, 279, 368, 394, 395, 396, 714, 917, 943, 944, 945, 1178], "flavour": [34, 110, 279], "integer_dtyp": [34, 222, 279, 782, 825, 828], "0_": [34, 279], "just": [34, 122, 200, 279, 770, 825], "unifi": [34, 279, 828], "multi": [34, 108, 109, 279, 397, 577, 714, 1105], "2_color_scal": [34, 279], "95b3d7": [34, 279], "ffffff": [34, 279], "standardis": [34, 279], "z": [34, 59, 80, 104, 136, 138, 161, 186, 188, 192, 200, 218, 219, 248, 279, 286, 288, 290, 321, 413, 443, 486, 489, 509, 510, 511, 512, 513, 520, 527, 535, 578, 606, 608, 618, 636, 638, 656, 681, 685, 690, 698, 714, 760, 770, 789, 825, 828, 862, 951, 1106, 1134, 1136, 1178, 1185], "score": [34, 279], "conjunct": [34, 81, 113, 119, 279], "a123": [34, 279], "b345": [34, 279], "c567": [34, 279], "d789": [34, 279], "e101": [34, 279], "45": [34, 130, 216, 279, 345, 353, 361, 372, 386, 540, 550, 572, 578, 642, 643, 676, 701, 714, 780, 825, 828, 890, 921, 935, 1100, 1106, 1186], "85": [34, 279, 1186], "font": [34, 279], "consola": [34, 279], "standard": [34, 231, 240, 279, 356, 395, 549, 563, 568, 581, 695, 710, 714, 791, 825, 901, 944, 1091, 1095, 1109, 1178, 1186], "stdev": [34, 279], "ipccompress": [35, 36, 279], "arrow": [35, 36, 52, 97, 98, 110, 111, 114, 116, 125, 190, 218, 219, 235, 237, 279, 825, 1154, 1159, 1178], "ipc": [35, 36, 52, 114, 115, 116, 125, 128, 279, 726, 825], "feather": [35, 114, 125, 279, 726], "access": [35, 73, 74, 75, 76, 124, 127, 146, 190, 217, 218, 279, 488, 579, 714, 803, 825, 1107, 1186], "doc": [35, 36, 111, 131, 133, 155, 279], "python": [35, 36, 56, 98, 108, 109, 110, 130, 131, 133, 146, 190, 196, 218, 219, 237, 265, 279, 293, 345, 485, 487, 489, 579, 658, 659, 661, 662, 701, 702, 704, 714, 720, 813, 835, 890, 902, 903, 904, 909, 1036, 1107, 1158, 1178], "lz4": [35, 36, 39, 52, 53, 279, 825], "zstd": [35, 36, 39, 52, 53, 279, 825], "batch": [36, 106, 109, 110, 116, 126, 128, 279, 736, 765, 766, 825], "pretti": [37, 279], "row_ori": [37, 279], "iobas": [37, 38, 117, 118, 279, 502, 739, 777, 784, 805, 825], "serial": [37, 38, 279, 739, 805, 825], "represent": [37, 38, 239, 279, 321, 349, 353, 356, 357, 359, 361, 363, 366, 369, 370, 373, 387, 388, 390, 625, 714, 743, 763, 825, 862, 863, 894, 898, 900, 901, 905, 907, 910, 912, 915, 918, 919, 922, 936, 937, 939, 1157, 1161, 1178], "orient": [37, 73, 75, 101, 103, 279, 825], "slower": [37, 101, 103, 113, 174, 177, 196, 206, 250, 265, 279, 489, 679, 714, 751, 754, 813, 825, 1036, 1178], "common": [37, 72, 78, 79, 80, 249, 279, 486, 509, 714, 720, 736, 737, 743, 745, 775, 788, 798, 825], "write_ndjson": [37, 279], "bit_set": [37, 279, 784, 825], "newlin": [38, 118, 126, 279], "delimit": [38, 51, 118, 126, 208, 238, 279, 569, 825, 1097, 1155, 1178], "parquetcompress": [39, 279], "compression_level": [39, 53, 279, 825], "statist": [39, 53, 108, 109, 120, 127, 156, 279, 395, 396, 434, 543, 544, 545, 546, 547, 548, 549, 550, 551, 563, 714, 825, 882, 944, 945, 986, 1071, 1091, 1178], "row_group_s": [39, 53, 279, 825], "use_pyarrow": [39, 108, 114, 116, 120, 279, 1158, 1159, 1178], "pyarrow_opt": [39, 112, 120, 123, 279], "parquet": [39, 53, 120, 121, 127, 279, 726, 825], "gzip": [39, 53, 279, 825], "lzo": [39, 53, 279, 825], "brotli": [39, 53, 279, 825], "choos": [39, 52, 53, 175, 208, 279, 752, 825], "good": [39, 52, 53, 190, 279, 825], "perform": [39, 52, 53, 72, 88, 98, 108, 109, 110, 114, 120, 122, 125, 126, 127, 146, 150, 174, 175, 176, 177, 178, 179, 193, 196, 211, 216, 219, 244, 265, 279, 293, 489, 521, 540, 582, 583, 606, 607, 608, 714, 731, 752, 753, 755, 756, 761, 780, 790, 795, 804, 825, 1036, 1110, 1111, 1134, 1135, 1136, 1178], "fast": [39, 52, 53, 139, 141, 279, 400, 555, 714, 825, 949, 1081, 1178, 1186], "decompress": [39, 52, 53, 279, 825], "backward": [39, 53, 165, 193, 279, 311, 365, 402, 714, 747, 761, 825, 914, 951, 1178], "guarante": [39, 53, 98, 108, 109, 246, 279, 745, 796, 825, 956, 1178], "deal": [39, 53, 190, 279, 289, 291, 371, 372, 386, 532, 606, 608, 635, 637, 660, 714, 825, 832, 833, 920, 921, 935, 1056, 1134, 1136, 1178], "older": [39, 53, 279, 825], "reader": [39, 53, 106, 108, 109, 114, 116, 120, 279, 727, 825], "higher": [39, 53, 210, 271, 279, 530, 547, 688, 714, 776, 819, 825, 1055, 1070, 1178], "mean": [39, 53, 108, 109, 114, 120, 122, 156, 165, 174, 175, 193, 208, 216, 250, 258, 279, 368, 372, 386, 399, 402, 540, 543, 544, 545, 546, 547, 549, 550, 551, 563, 577, 646, 658, 659, 661, 662, 663, 701, 702, 704, 714, 747, 751, 752, 761, 765, 766, 780, 806, 825, 882, 917, 921, 935, 947, 951, 956, 1067, 1091, 1105, 1178], "smaller": [39, 53, 161, 279, 745, 825, 942, 1178], "disk": [39, 51, 52, 53, 114, 279, 788, 825], "11": [39, 53, 98, 130, 138, 216, 279, 288, 364, 365, 368, 372, 386, 417, 522, 532, 540, 542, 550, 564, 634, 697, 702, 714, 736, 737, 757, 764, 775, 780, 793, 825, 828, 917, 921, 935, 1036, 1065, 1178], "22": [39, 53, 130, 137, 279, 349, 369, 372, 386, 388, 389, 542, 543, 544, 546, 549, 550, 551, 606, 714, 825, 828, 921, 935, 938, 1065, 1134, 1178, 1186], "comput": [39, 53, 78, 80, 85, 161, 174, 193, 241, 246, 258, 271, 279, 285, 295, 296, 297, 298, 299, 300, 306, 307, 308, 322, 327, 328, 329, 331, 332, 333, 334, 335, 340, 391, 398, 434, 448, 455, 460, 461, 462, 465, 466, 467, 468, 473, 478, 480, 481, 482, 505, 521, 522, 528, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 560, 561, 562, 563, 567, 623, 624, 631, 636, 638, 642, 643, 644, 650, 652, 664, 691, 692, 704, 714, 736, 751, 758, 760, 761, 796, 803, 806, 819, 825, 830, 836, 837, 838, 839, 840, 841, 847, 848, 849, 865, 873, 874, 875, 876, 877, 878, 879, 884, 941, 942, 946, 986, 999, 1006, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1024, 1029, 1031, 1032, 1033, 1041, 1050, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1088, 1089, 1090, 1091, 1094, 1152, 1153, 1160, 1166, 1178], "512": [39, 110, 279, 526, 714, 1050, 1178], "implement": [39, 98, 110, 146, 196, 265, 279, 433, 489, 508, 510, 511, 512, 513, 527, 618, 679, 714, 813, 1036, 1079, 1080, 1178], "v": [39, 59, 60, 161, 279, 554, 714, 1077, 1178], "At": [39, 279], "moment": [39, 155, 279, 434, 563, 714, 986, 1091, 1178], "write_t": [39, 279], "partition_col": [39, 111, 279], "write_to_dataset": [39, 279], "similar": [39, 142, 169, 193, 226, 279, 375, 378, 469, 521, 539, 556, 704, 714, 745, 761, 786, 825, 924, 927, 1020, 1063, 1083, 1178], "spark": [39, 279], "partit": [39, 111, 112, 120, 123, 127, 128, 191, 206, 279], "we": [39, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 127, 175, 193, 216, 250, 279, 368, 372, 386, 450, 487, 489, 540, 543, 544, 545, 546, 547, 549, 550, 551, 579, 590, 658, 659, 661, 662, 676, 701, 702, 704, 714, 739, 752, 761, 765, 766, 777, 780, 825, 835, 917, 921, 935, 959, 1001, 1036, 1107, 1118, 1178], "use_pyarrow_write_to_dataset": [39, 279], "first": [39, 72, 108, 109, 113, 117, 122, 126, 131, 132, 133, 134, 137, 147, 173, 175, 178, 181, 193, 195, 196, 203, 207, 208, 233, 238, 239, 245, 246, 250, 263, 279, 303, 305, 336, 339, 365, 368, 372, 414, 421, 422, 438, 447, 450, 453, 454, 477, 488, 498, 525, 554, 566, 577, 580, 581, 591, 592, 647, 653, 667, 671, 704, 714, 736, 752, 755, 757, 761, 764, 774, 796, 803, 811, 825, 828, 844, 880, 882, 883, 914, 917, 921, 958, 968, 969, 988, 998, 1001, 1004, 1005, 1028, 1035, 1077, 1105, 1107, 1108, 1109, 1119, 1120, 1149, 1157, 1178, 1186], "watermark": [39, 279], "partitioned_object": [39, 279], "calendar": [41, 42, 175, 193, 216, 250, 279, 356, 368, 372, 386, 390, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 714, 752, 761, 780, 825, 901, 917, 921, 935, 939], "time_unit": [42, 44, 344, 345, 352, 377, 389, 608, 658, 659, 660, 661, 662, 663, 669, 828, 889, 890, 897, 926, 938, 1136], "time_zon": [42, 346, 371, 386, 608, 658, 659, 660, 661, 662, 828, 888, 891, 896, 920, 935, 1136], "timezon": [42, 828], "m": [42, 44, 60, 192, 279, 343, 344, 345, 351, 352, 375, 377, 378, 389, 577, 606, 607, 608, 611, 658, 659, 660, 661, 662, 663, 669, 760, 825, 828, 888, 889, 890, 896, 897, 924, 926, 927, 938, 1105, 1134, 1135, 1136, 1139], "zoneinfo": [42, 828], "run": [42, 51, 52, 53, 78, 79, 139, 141, 174, 177, 194, 196, 208, 223, 246, 255, 265, 279, 293, 336, 450, 489, 538, 539, 583, 693, 714, 736, 737, 743, 745, 751, 754, 765, 766, 770, 775, 783, 788, 796, 802, 825, 828, 880, 1001, 1036, 1062, 1063, 1111, 1178, 1185, 1186], "available_timezon": [42, 828], "check": [42, 108, 109, 122, 131, 132, 133, 134, 143, 170, 175, 176, 178, 179, 187, 189, 192, 216, 279, 312, 315, 316, 418, 423, 444, 540, 570, 575, 599, 714, 752, 753, 755, 756, 760, 765, 766, 780, 825, 852, 855, 856, 964, 966, 970, 971, 973, 980, 981, 982, 984, 985, 995, 1078, 1098, 1103, 1127, 1178], "128": [43, 74, 1050, 1178], "bit": [43, 45, 46, 47, 48, 49, 50, 66, 67, 68, 69, 534, 570, 714, 1058, 1098, 1178], "scale": [43, 161, 279, 489, 525, 609, 714, 942, 1137, 1178], "experiment": [43, 79, 128, 222, 248, 249, 254, 279, 336, 372, 489, 543, 544, 545, 546, 547, 549, 550, 551, 714, 737, 782, 801, 825, 864, 880, 921, 959, 1054, 1178], "progress": 43, "expect": [43, 89, 91, 96, 108, 110, 122, 489, 676, 714, 763, 765, 766, 825], "32": [45, 48, 67, 74, 189, 216, 279, 506, 540, 558, 714, 780, 825, 884, 918, 1050, 1070, 1178], "sign": [47, 48, 49, 50, 368, 534, 614, 714, 828, 917, 973, 1058, 1142, 1178], "maintain_ord": [51, 52, 53, 150, 174, 177, 206, 208, 244, 246, 250, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 287, 310, 411, 479, 489, 621, 628, 651, 714, 731, 737, 743, 745, 751, 754, 775, 788, 790, 795, 796, 807, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 825, 851, 1030, 1163, 1178], "type_coercion": [51, 52, 53, 78, 79, 736, 737, 743, 745, 775, 788, 825], "predicate_pushdown": [51, 52, 53, 78, 79, 736, 737, 743, 745, 765, 766, 775, 788, 825], "projection_pushdown": [51, 52, 53, 78, 79, 736, 737, 743, 745, 765, 766, 775, 788, 825], "simplify_express": [51, 52, 53, 78, 79, 736, 737, 743, 745, 775, 788, 825], "slice_pushdown": [51, 52, 53, 78, 79, 736, 737, 743, 745, 765, 766, 775, 788, 825], "no_optim": [51, 52, 53, 78, 79, 736, 737, 745, 765, 766, 775, 825], "evalu": [51, 52, 53, 164, 166, 193, 279, 290, 304, 336, 416, 439, 440, 477, 488, 520, 635, 637, 641, 645, 658, 659, 661, 662, 664, 673, 674, 687, 690, 696, 701, 702, 704, 705, 714, 736, 748, 758, 760, 761, 825, 845, 880, 990, 991, 1169, 1178], "queri": [51, 52, 53, 57, 59, 78, 79, 110, 111, 114, 122, 125, 126, 127, 163, 194, 207, 279, 487, 488, 489, 581, 714, 736, 737, 743, 745, 757, 764, 775, 788, 804, 808, 813, 825, 834, 948, 1036, 1109, 1178, 1185], "larger": [51, 52, 53, 650, 736, 825], "ram": [51, 52, 53, 825], "maintain": [51, 52, 53, 150, 244, 279, 310, 479, 554, 628, 714, 731, 790, 795, 825, 851, 1030, 1077, 1163, 1178], "slightli": [51, 52, 53, 113, 825], "faster": [51, 52, 53, 110, 163, 240, 248, 279, 293, 489, 629, 714, 825, 834, 835, 948, 1036, 1178], "coercion": [51, 52, 53, 78, 79, 535, 714, 736, 737, 743, 745, 775, 788, 825], "optim": [51, 52, 53, 78, 79, 120, 122, 125, 126, 127, 190, 194, 207, 211, 218, 246, 279, 736, 737, 743, 745, 765, 766, 775, 788, 796, 804, 813, 825, 865, 1178], "predic": [51, 52, 53, 78, 79, 122, 125, 126, 127, 128, 166, 189, 217, 279, 403, 633, 667, 714, 736, 737, 743, 745, 748, 765, 766, 775, 778, 788, 804, 825, 952, 1079, 1080, 1178], "pushdown": [51, 52, 53, 78, 79, 736, 737, 743, 745, 765, 766, 775, 778, 788, 804, 825, 1079, 1080, 1178], "project": [51, 52, 53, 78, 79, 122, 124, 125, 126, 127, 293, 565, 566, 714, 736, 737, 743, 745, 765, 766, 775, 778, 784, 788, 825], "slice": [51, 52, 53, 73, 78, 79, 161, 181, 191, 233, 279, 454, 474, 489, 497, 499, 541, 543, 544, 545, 546, 547, 549, 550, 551, 714, 736, 737, 743, 745, 765, 766, 775, 788, 825, 942, 958, 1005, 1025, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1149, 1178], "turn": [51, 52, 53, 78, 79, 108, 109, 122, 612, 736, 737, 743, 745, 765, 766, 775, 825, 1140], "off": [51, 52, 53, 78, 79, 108, 109, 122, 736, 737, 743, 745, 765, 766, 775, 825], "certain": [51, 52, 53, 79, 87, 112, 123, 184, 250, 279, 602, 603, 736, 737, 775, 825, 1178], "lf": [51, 52, 53, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 781, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 825, 1185, 1186], "scan_csv": [51, 52, 53, 108, 109, 825], "my_larger_than_ram_fil": [51, 52, 53, 825], "data_pagesize_limit": [53, 825], "reduc": [53, 108, 109, 120, 122, 125, 126, 127, 266, 267, 269, 272, 558, 667, 714, 814, 815, 817, 820, 825, 1038, 1053, 1085, 1148, 1178], "pressur": [53, 108, 109, 120, 122, 126, 127, 558, 714, 825, 1085, 1178], "improv": [53, 114, 125, 825], "speed": [53, 293, 489, 714, 825, 1186], "page": [53, 114, 120, 125, 127, 279, 714, 726, 825, 1178], "integer_list": 54, "float_list": 54, "wrap": [56, 104, 418, 714], "arbitrari": [56, 138, 828], "eager": [57, 58, 59, 60, 61, 62, 175, 208, 248, 279, 344, 346, 349, 352, 357, 364, 365, 368, 369, 371, 372, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 543, 544, 546, 549, 550, 551, 641, 645, 658, 659, 661, 662, 669, 673, 674, 687, 690, 696, 701, 702, 705, 713, 714, 752, 766, 825, 888, 889, 891, 894, 896, 897, 898, 904, 905, 907, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 1185], "against": [57, 110, 450, 825, 1001, 1185, 1186], "eagerli": [57, 477], "unset": [57, 137, 371, 477, 920], "init": [57, 144], "eager_execut": [57, 1185], "itself": [57, 136, 489, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 691, 692, 714, 763, 825, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1178, 1185], "impact": [57, 175, 178, 279, 752, 755, 825, 1185], "declar": [57, 97, 99, 100, 101, 103, 110, 117, 118, 126, 279, 825], "godfath": 57, "1972": 57, "6_000_000": 57, "134_821_952": 57, "dark": 57, "knight": 57, "2008": 57, "185_000_000": 57, "533_316_061": 57, "schindler": 57, "1993": 57, "22_000_000": 57, "96_067_179": 57, "pulp": 57, "fiction": 57, "1994": 57, "8_000_000": 57, "107_930_000": 57, "shawshank": 57, "redempt": 57, "25_000_000": 57, "28_341_469": 57, "release_year": 57, "budget": 57, "gross": 57, "imdb_scor": 57, "ctx": [57, 58, 59, 60, 61, 62], "film": 57, "1990": 57, "BY": [57, 59], "desc": [57, 59], "AS": [57, 694, 1185], "decad": 57, "total_gross": 57, "n_film": 57, "2000": [57, 355, 357, 364, 365, 368, 373, 828, 900, 913, 914, 917, 922], "533316061": 57, "232338648": 57, "1970": [57, 128], "134821952": 57, "register_glob": [58, 60, 62, 1185], "register_mani": [58, 59, 62], "unregist": [58, 59, 60, 1185], "frame_data": [58, 61], "execut": [58, 59, 61, 63, 80, 110, 194, 279, 318, 450, 631, 714, 732, 765, 766, 775, 825, 1001, 1166, 1178, 1185], "collect": [58, 59, 62, 75, 78, 79, 122, 123, 124, 128, 138, 140, 157, 159, 194, 208, 235, 246, 247, 279, 318, 397, 423, 489, 648, 665, 669, 696, 714, 729, 731, 733, 737, 739, 740, 741, 744, 745, 746, 747, 748, 749, 751, 752, 757, 759, 760, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 779, 780, 782, 784, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 825, 828, 971, 1178, 1185, 1186], "global": [59, 63, 81, 82, 129, 138, 143, 240, 279, 488, 714, 861, 863, 1185], "scope": [59, 62, 144, 725, 828, 1185], "automat": [59, 62, 97, 99, 100, 101, 103, 104, 108, 109, 110, 111, 113, 117, 118, 122, 126, 138, 140, 142, 222, 254, 279, 318, 488, 601, 602, 603, 714, 782, 801, 825, 1035, 1129, 1130, 1131, 1178, 1185], "map": [59, 60, 99, 100, 108, 109, 110, 111, 114, 115, 120, 121, 122, 125, 151, 160, 168, 190, 196, 212, 217, 218, 219, 236, 279, 288, 372, 386, 486, 487, 488, 489, 521, 539, 631, 678, 714, 733, 742, 778, 825, 828, 882, 921, 935, 1035, 1036, 1063, 1166, 1178, 1185], "recent": [59, 131, 132, 133, 134, 522, 714, 1050, 1178, 1185], "df1": [59, 61, 62, 72, 80, 131, 132, 163, 170, 201, 241, 252, 279, 771, 825], "x": [59, 60, 72, 80, 98, 104, 108, 109, 111, 122, 136, 138, 146, 161, 183, 186, 188, 192, 200, 208, 218, 219, 248, 279, 286, 288, 290, 338, 392, 393, 407, 410, 412, 413, 436, 443, 456, 482, 484, 486, 487, 489, 504, 506, 509, 510, 511, 512, 513, 516, 517, 520, 526, 527, 535, 539, 560, 563, 597, 617, 618, 625, 627, 634, 636, 638, 642, 643, 653, 654, 656, 667, 676, 678, 681, 685, 689, 698, 714, 760, 766, 770, 789, 825, 828, 863, 951, 984, 1036, 1088, 1091, 1125, 1161, 1178, 1185], "df2": [59, 61, 62, 72, 80, 131, 132, 163, 170, 241, 252, 279], "join": [59, 63, 72, 78, 79, 80, 82, 193, 249, 279, 417, 521, 714, 736, 737, 743, 745, 761, 775, 788, 798, 803, 825], "named_fram": [60, 1185], "lf1": [60, 62], "o": [60, 114, 125, 317, 336, 576, 626, 714, 857, 880, 1104, 1129, 1162, 1178], "lf2": [60, 62, 825], "p": [60, 74, 207, 279, 525, 696, 714, 774, 825], "q": [60, 219, 279, 696], "r": [60, 108, 109, 122, 525, 572, 576, 577, 578, 579, 591, 714, 828, 1100, 1104, 1105, 1106, 1107, 1119], "lf3": [60, 825], "lf4": [60, 825], "either": [60, 138, 189, 193, 194, 198, 206, 216, 217, 232, 240, 279, 529, 540, 606, 635, 644, 696, 714, 761, 763, 780, 825, 828, 1054, 1134, 1178, 1186], "tbl1": [60, 62], "tbl2": [60, 62], "tbl3": 60, "tbl4": 60, "statement": [61, 704], "hello_world": 61, "baz": [61, 184, 185, 208, 247, 279, 579, 596, 598, 710, 759, 797, 825, 828, 1107, 1126], "hello_data": 61, "foo_bar": [61, 493, 496, 596, 676], "registr": [62, 726], "lifetim": [62, 144, 725], "context": [62, 63, 81, 82, 142, 204, 261, 279, 287, 293, 318, 330, 403, 437, 450, 458, 487, 489, 497, 565, 566, 631, 639, 651, 666, 669, 675, 679, 690, 693, 713, 714, 725, 726, 803, 809, 825, 987, 1001, 1009, 1166, 1178, 1185], "manag": [62, 63, 81, 82, 725, 726, 1185], "often": [62, 144, 175, 176, 178, 179, 216, 279, 445, 446, 535, 540, 714, 752, 753, 755, 756, 780, 825, 996, 997], "want": [62, 79, 100, 163, 196, 204, 279, 386, 403, 487, 488, 489, 539, 543, 544, 545, 546, 547, 549, 550, 551, 582, 653, 658, 667, 687, 690, 705, 714, 737, 757, 764, 825, 828, 834, 935, 948, 1036, 1063, 1110, 1159, 1178], "df0": [62, 201, 279, 771, 825], "exit": [62, 63, 81, 144, 1185], "construct": [62, 63, 81, 82, 97, 99, 100, 101, 102, 103, 110, 279, 409, 488, 687, 690, 705, 710, 714, 739, 750, 777, 825, 861, 1178], "persist": 62, "through": [62, 98, 110, 710, 828, 1178], "tbl0": 62, "remain": [62, 108, 109, 122, 159, 161, 166, 279, 341, 342, 403, 449, 597, 598, 714, 741, 748, 765, 766, 825, 885, 886, 942, 952, 1000, 1125, 1126, 1178], "text": [62, 110, 582, 583, 591, 592, 694, 1110, 1111, 1186], "misc": 62, "testing1234": 62, "test1": 62, "test2": 62, "test3": 62, "disabl": [63, 81, 82, 190, 279, 736, 825], "cach": [63, 78, 79, 81, 82, 114, 122, 125, 127, 131, 132, 133, 134, 143, 488, 543, 544, 545, 546, 547, 549, 550, 551, 606, 607, 608, 611, 714, 725, 736, 737, 743, 745, 775, 788, 825, 861, 1134, 1135, 1136, 1139], "under": [63, 73, 74, 75, 76, 81, 82, 706, 707, 709, 710, 715, 716, 719, 721, 722, 723, 1170, 1172, 1174, 1179, 1182, 1183, 1184], "physic": [63, 82, 108, 109, 193, 279, 321, 625, 714, 732, 760, 761, 825, 862, 863, 1161, 1178], "equal": [63, 82, 108, 109, 110, 122, 131, 132, 133, 134, 150, 170, 175, 178, 193, 201, 244, 279, 318, 337, 392, 393, 410, 436, 477, 517, 529, 535, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 588, 589, 614, 691, 692, 710, 714, 731, 752, 755, 761, 771, 790, 795, 825, 881, 1028, 1054, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1078, 1116, 1117, 1142, 1178, 1186], "concaten": [63, 80, 81, 82, 169, 207, 279, 525, 648, 649, 714, 774, 825, 867, 1042, 1178], "introduc": [63, 82, 606, 607, 608, 1134, 1135, 1136], "overhead": [63, 82, 122, 125, 126, 127], "amount": [63, 82, 293, 489, 663, 714], "depend": [63, 77, 82, 110, 130, 441, 442, 489, 497, 529, 532, 663, 666, 669, 675, 714, 992, 993, 1054, 1056, 1178, 1186], "categori": [63, 82, 238, 279, 320, 321, 337, 529, 714, 860, 862, 881, 959, 1054, 1178], "nest": [63, 104, 120, 127, 161, 279, 726, 942, 1178, 1185, 1186], "clear": [63, 81, 153, 279, 735, 825, 872, 1178], "outermost": 63, "s1": [63, 81, 82, 133, 134, 169, 279, 985, 1028, 1160, 1169, 1178], "color": [63, 81, 82, 265, 312, 314, 315, 316, 631, 714, 813, 1166, 1178], "red": [63, 81, 82, 265, 631, 714, 813, 1166, 1178], "green": [63, 81, 82, 265, 631, 714, 813, 1166, 1178], "blue": [63, 81, 82, 312, 314, 315, 316, 631, 714, 1166, 1178], "concat": [63, 81, 82, 109, 867, 1042, 1178], "cat": [63, 81, 82, 239, 279, 337, 529, 570, 572, 610, 613, 625, 649, 709, 714, 828, 881, 959, 1054, 1098, 1100, 1138, 1141, 1174, 1178], "decor": [63, 73, 74, 75, 76, 138, 140, 196, 279, 489, 714, 725, 726, 1036, 1178], "dure": [63, 108, 109, 122, 144, 163, 279, 834, 948, 1178], "afterward": [63, 704], "construct_categor": 63, "composit": [64, 137, 1186], "schemadict": [64, 97, 99, 100, 101, 102, 103, 108, 110, 111, 113, 119, 122, 221, 279, 696, 765, 766, 781, 808, 813, 825], "struct_seri": [64, 813], "dai": [65, 175, 178, 191, 193, 216, 250, 279, 364, 365, 368, 369, 372, 379, 386, 388, 540, 543, 544, 545, 546, 547, 549, 550, 551, 657, 658, 659, 660, 661, 662, 663, 701, 702, 714, 752, 755, 761, 780, 825, 828, 913, 914, 917, 918, 921, 928, 935, 937], "static": [70, 808, 813], "utf": 71, "frametyp": [72, 1185], "joinstrategi": [72, 192, 279, 760, 825], "outer": [72, 80, 192, 249, 279, 760, 798, 825], "descend": [72, 150, 224, 230, 244, 279, 303, 471, 532, 555, 565, 566, 631, 644, 714, 731, 785, 790, 795, 825, 844, 981, 1022, 1056, 1081, 1093, 1166, 1178], "fill": [72, 80, 152, 164, 165, 226, 227, 248, 279, 311, 332, 335, 401, 402, 408, 417, 543, 544, 546, 550, 556, 557, 585, 593, 668, 687, 690, 705, 714, 746, 747, 786, 787, 803, 825, 950, 951, 962, 1047, 1066, 1067, 1069, 1072, 1073, 1074, 1083, 1084, 1113, 1121, 1178], "sort": [72, 73, 131, 132, 137, 150, 175, 176, 178, 179, 193, 201, 207, 208, 216, 224, 244, 250, 263, 273, 279, 303, 321, 403, 489, 521, 540, 544, 545, 546, 547, 549, 551, 555, 566, 631, 633, 644, 679, 714, 731, 743, 752, 753, 755, 756, 761, 771, 774, 775, 780, 785, 788, 795, 811, 821, 825, 828, 844, 862, 981, 1081, 1163, 1166, 1178, 1186], "origin": [72, 108, 109, 122, 159, 166, 246, 279, 341, 342, 371, 403, 433, 449, 488, 508, 521, 534, 535, 536, 571, 572, 577, 581, 642, 643, 714, 741, 748, 796, 825, 881, 885, 886, 920, 952, 1000, 1035, 1054, 1060, 1099, 1100, 1105, 1109, 1178], "In": [72, 79, 110, 112, 123, 124, 127, 138, 140, 144, 161, 163, 175, 176, 178, 179, 196, 204, 216, 240, 279, 489, 540, 658, 714, 737, 752, 753, 755, 756, 780, 825, 834, 942, 948, 1057, 1178], "duplic": [72, 86, 186, 192, 193, 246, 249, 279, 288, 419, 433, 508, 529, 714, 760, 761, 796, 798, 825, 965, 1054, 1178], "behaviour": [72, 80, 159, 279, 570, 577, 578, 591, 627, 714, 741, 825, 1098, 1105, 1106, 1119], "suitabl": [72, 80, 110, 136, 196, 279, 489, 554, 714, 1036, 1077, 1178, 1186], "get": [72, 79, 105, 115, 121, 128, 142, 150, 154, 160, 168, 171, 172, 175, 176, 178, 179, 181, 182, 186, 188, 189, 195, 203, 208, 216, 217, 221, 225, 229, 233, 244, 253, 263, 273, 279, 287, 301, 302, 303, 305, 310, 320, 331, 332, 333, 334, 335, 352, 404, 414, 432, 435, 438, 452, 457, 479, 490, 491, 492, 497, 499, 503, 514, 515, 523, 524, 530, 538, 540, 564, 568, 619, 620, 621, 628, 632, 658, 666, 671, 675, 679, 680, 681, 682, 683, 684, 685, 695, 699, 703, 714, 731, 737, 738, 742, 749, 752, 753, 755, 756, 757, 762, 764, 780, 781, 789, 793, 795, 800, 811, 821, 825, 842, 843, 844, 845, 846, 851, 860, 867, 876, 877, 878, 879, 897, 955, 958, 963, 965, 983, 988, 1003, 1008, 1030, 1037, 1039, 1040, 1042, 1045, 1046, 1051, 1052, 1055, 1062, 1092, 1095, 1149, 1154, 1155, 1163, 1167, 1168, 1178], "speedup": [72, 190, 196, 279, 489, 714, 1036, 1178], "receiv": [72, 110, 122, 196, 207, 265, 279, 489, 525, 714, 774, 825, 1186], "now": [72, 216, 279, 318, 714, 780, 825, 1136], "One": [72, 156, 204, 208, 279, 290, 520, 694, 714, 828, 882, 1178], "whose": [72, 193, 208, 279, 397, 665, 714, 761, 825], "uniqu": [72, 135, 136, 137, 140, 148, 149, 188, 192, 204, 208, 219, 270, 279, 294, 305, 337, 432, 507, 529, 606, 607, 608, 611, 629, 631, 640, 686, 714, 729, 730, 760, 818, 825, 846, 881, 882, 983, 1043, 1054, 1134, 1135, 1136, 1139, 1164, 1166, 1178], "post": 72, "constrain": [72, 159, 279, 741, 825], "newli": 72, "boolean": [72, 150, 166, 169, 194, 230, 244, 279, 289, 290, 291, 312, 315, 316, 355, 403, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 440, 444, 518, 520, 523, 524, 566, 580, 633, 634, 644, 645, 696, 704, 714, 731, 735, 748, 763, 790, 795, 825, 828, 832, 833, 845, 852, 854, 900, 952, 963, 964, 965, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 983, 990, 991, 995, 1048, 1051, 1052, 1079, 1098, 1159, 1169, 1178], "know": [72, 110, 208, 279, 477, 1159, 1168, 1178], "2022": [72, 151, 156, 173, 175, 193, 216, 250, 279, 345, 353, 361, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 606, 658, 659, 661, 662, 663, 669, 701, 702, 714, 733, 752, 761, 780, 825, 828, 890, 901, 917, 921, 935, 1134], "y": [72, 80, 98, 104, 136, 138, 146, 161, 186, 188, 192, 200, 208, 218, 219, 248, 279, 286, 288, 290, 375, 378, 392, 393, 410, 412, 436, 443, 456, 484, 486, 489, 509, 510, 511, 512, 513, 516, 517, 520, 527, 535, 539, 606, 607, 608, 618, 627, 634, 636, 638, 642, 643, 656, 663, 676, 681, 685, 698, 714, 760, 770, 789, 825, 828, 863, 924, 927, 1134, 1135, 1136], "df3": [72, 279], "set_tbl_format": 72, "09": [72, 130, 138, 216, 279, 345, 364, 365, 540, 609, 658, 702, 714, 780, 825, 828, 1137], "01": [72, 138, 151, 156, 173, 175, 216, 250, 279, 343, 344, 345, 346, 352, 353, 356, 357, 361, 363, 364, 365, 368, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 540, 543, 544, 546, 549, 550, 551, 606, 607, 608, 611, 658, 659, 661, 663, 714, 733, 752, 780, 825, 828, 889, 890, 891, 892, 893, 897, 898, 904, 905, 910, 913, 914, 915, 917, 920, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 1134, 1135, 1136, 1139], "02": [72, 151, 173, 175, 193, 216, 250, 279, 344, 345, 352, 364, 365, 368, 371, 372, 377, 380, 383, 385, 386, 389, 540, 543, 544, 545, 546, 547, 549, 550, 551, 552, 606, 607, 608, 611, 658, 659, 661, 662, 663, 701, 702, 714, 733, 752, 761, 780, 825, 828, 889, 890, 892, 893, 897, 898, 904, 905, 910, 913, 914, 915, 917, 920, 921, 925, 926, 929, 932, 934, 935, 1028, 1134, 1135, 1136, 1139], "03": [72, 104, 151, 175, 216, 250, 279, 344, 345, 346, 352, 364, 365, 368, 371, 372, 373, 375, 377, 378, 379, 380, 383, 385, 386, 389, 540, 543, 544, 546, 549, 550, 551, 607, 611, 658, 659, 661, 663, 714, 733, 752, 780, 825, 889, 890, 891, 897, 898, 904, 905, 913, 914, 915, 920, 921, 924, 926, 927, 928, 929, 932, 934, 1135, 1139], "af1": 72, "af2": 72, "af3": 72, "keep": [72, 108, 109, 122, 246, 249, 250, 279, 433, 488, 501, 647, 714, 796, 798, 825, 1035, 1178], "easili": [72, 110, 222, 254, 258, 279, 696, 782, 801, 806, 825], "dot": [72, 714, 788, 825, 1178], "product": [72, 155, 279, 334, 340, 714, 745, 825, 878, 884, 1178], "fill_nul": [72, 164, 279, 714, 746, 803, 825, 1178], "sum_horizont": [72, 697], "167": 72, "47": 72, "callabl": [73, 74, 75, 76, 122, 147, 169, 196, 207, 260, 265, 279, 293, 477, 485, 486, 487, 489, 509, 525, 541, 542, 639, 653, 654, 667, 677, 678, 679, 689, 714, 765, 766, 774, 808, 813, 825, 835, 1028, 1036, 1064, 1065, 1178], "by_first_letter_of_column_nam": 73, "f": [73, 109, 156, 173, 191, 235, 245, 248, 279, 286, 477, 558, 576, 606, 608, 639, 648, 677, 714, 1028, 1104, 1134, 1136], "fromkei": [73, 75], "by_first_letter_of_column_valu": 73, "starts_with": [73, 312, 315, 570, 575, 828, 1103], "to_seri": [73, 171, 279, 606, 645, 690, 1134], "xx": [73, 75, 137, 140, 828], "xy": [73, 75], "yy": [73, 75, 137, 140, 828], "yz": [73, 75], "b1": [73, 75], "b2": [73, 75], "pow_n": 74, "powersofn": 74, "next": [74, 175, 193, 216, 250, 279, 311, 368, 372, 386, 532, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935, 1056, 1178], "ceil": [74, 714, 1178], "previou": [74, 144, 510, 511, 522, 527, 616, 618, 714, 834, 1050, 1178], "floor": [74, 714, 1178], "nearest": [74, 193, 210, 271, 279, 323, 406, 417, 530, 547, 688, 714, 761, 776, 819, 825, 866, 954, 962, 1055, 1070, 1178], "24": [74, 130, 161, 175, 193, 196, 216, 250, 279, 334, 336, 349, 368, 369, 372, 380, 386, 388, 506, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 714, 752, 761, 780, 825, 880, 917, 921, 929, 935, 985, 1178], "001": [74, 357, 381, 382, 384, 614, 663, 930, 931, 933, 1142], "next_pow2": 74, "prev_pow2": 74, "nearest_pow2": 74, "split_by_column_dtyp": 75, "collect_al": [75, 79, 736, 737, 825], "31": [76, 138, 345, 349, 353, 361, 364, 368, 379, 606, 657, 658, 660, 669, 676, 828, 888, 890, 894, 913, 928, 1134, 1186], "42": [76, 180, 201, 216, 279, 540, 714, 771, 780, 825, 957, 1178], "961": 76, "1764": 76, "4160": 76, "build": [77, 98, 828, 1186], "wa": [77, 131], "compil": [77, 441, 442, 992, 993], "gate": 77, "info": [77, 112, 123, 124, 130], "otherwis": [77, 110, 113, 137, 142, 196, 201, 219, 222, 265, 279, 313, 324, 337, 394, 395, 396, 477, 489, 497, 525, 529, 534, 544, 545, 546, 547, 549, 551, 570, 573, 635, 679, 704, 714, 771, 782, 813, 825, 853, 869, 881, 943, 944, 945, 1028, 1036, 1054, 1058, 1079, 1080, 1098, 1101, 1178], "host": [77, 108, 114, 116, 120, 125], "git": 77, "lazy_fram": [78, 79], "comm_subplan_elim": [78, 79, 736, 737, 743, 745, 775, 788, 825], "comm_subexpr_elim": [78, 79, 318, 714, 736, 737, 743, 745, 775, 788, 825], "graph": [78, 194, 279, 736, 758, 803, 825], "parallel": [78, 80, 106, 111, 120, 127, 175, 178, 193, 194, 207, 223, 255, 279, 336, 450, 631, 704, 714, 726, 752, 755, 760, 761, 783, 802, 813, 825, 880, 1001, 1166, 1178], "threadpool": [78, 142], "Will": [78, 79, 736, 737, 743, 745, 775, 788, 825, 1178], "try": [78, 79, 92, 94, 108, 109, 114, 120, 122, 125, 127, 736, 737, 743, 745, 775, 788, 825], "branch": [78, 79, 736, 737, 743, 745, 775, 788, 825], "subplan": [78, 79, 736, 737, 743, 745, 775, 788, 825], "union": [78, 79, 80, 468, 736, 737, 743, 745, 775, 788, 825, 828, 1019], "subexpress": [78, 79, 736, 737, 743, 745, 775, 788, 825], "reus": [78, 79, 736, 737, 743, 745, 775, 788, 825], "part": [78, 79, 97, 113, 138, 578, 597, 598, 737, 743, 745, 775, 788, 803, 825, 1106, 1125, 1126], "fashion": [78, 79, 192, 279, 737, 743, 745, 775, 788, 825], "alpha": [78, 79, 293, 394, 395, 396, 714, 736, 737, 743, 745, 775, 788, 825, 943, 944, 945, 1178], "gevent": [79, 130, 737, 825], "_geventdataframeresult": [79, 737, 825], "await": [79, 737, 825], "asynchron": [79, 737, 825], "them": [79, 97, 99, 100, 101, 103, 117, 118, 119, 122, 126, 127, 162, 163, 175, 193, 201, 216, 250, 279, 418, 456, 514, 515, 521, 540, 648, 658, 659, 661, 662, 701, 702, 714, 737, 744, 752, 761, 771, 780, 825, 828, 834, 948, 1007, 1045, 1046, 1178], "schedul": [79, 737, 825], "insid": [79, 737, 825], "almost": [79, 196, 265, 279, 606, 607, 608, 737, 825, 1036, 1134, 1135, 1136, 1178], "instantli": [79, 737, 825], "asyncio": [79, 737, 825], "releas": [79, 293, 489, 714, 737, 825, 1186], "greenlet": [79, 737, 825], "task": [79, 737, 825], "wrapper": [79, 737, 825], "event": [79, 737, 825], "asyncresult": [79, 737, 825], "timeout": [79, 737, 825], "break": [79, 128, 248, 249, 279, 293, 336, 337, 372, 543, 544, 545, 546, 547, 549, 550, 551, 714, 737, 825, 864, 880, 881, 921, 959, 1054, 1178], "collect_async": [79, 825], "set_except": [79, 737, 825], "futur": [79, 146, 658, 737, 825], "rerais": [79, 737, 825], "iter": [80, 97, 110, 139, 141, 150, 166, 174, 175, 176, 177, 178, 179, 190, 191, 216, 217, 218, 219, 222, 223, 224, 230, 244, 245, 254, 255, 257, 258, 279, 336, 521, 566, 636, 638, 644, 647, 648, 649, 656, 681, 685, 693, 696, 698, 710, 714, 731, 748, 751, 752, 753, 754, 755, 756, 780, 782, 783, 785, 790, 795, 801, 802, 806, 825, 880, 1178, 1186], "polarstyp": 80, "concatmethod": 80, "vertic": [80, 163, 248, 252, 279, 569, 1097], "rechunk": [80, 97, 102, 108, 109, 114, 116, 120, 122, 125, 126, 127, 163, 279, 714, 834, 867, 948, 1042, 1178], "combin": [80, 92, 94, 166, 175, 180, 193, 216, 250, 279, 290, 304, 386, 520, 540, 586, 594, 600, 601, 602, 603, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 788, 825, 921, 935, 1114, 1122, 1128, 1129, 1130, 1131], "vertical_relax": 80, "diagon": [80, 245, 279], "diagonal_relax": 80, "vstack": [80, 163, 279], "addition": [80, 217, 279], "coerc": [80, 535, 714], "supertyp": [80, 165, 279, 292, 714, 747, 825], "mismatch": [80, 92, 118, 131, 133], "find": [80, 167, 279, 554, 714, 1077, 1178], "miss": [80, 108, 109, 122, 164, 279, 311, 394, 395, 396, 408, 427, 429, 714, 746, 825, 943, 944, 945, 1168, 1178], "stack": [80, 183, 252, 279], "don": [80, 175, 196, 246, 248, 279, 293, 336, 450, 489, 521, 714, 752, 796, 825, 828, 880, 1001, 1036, 1078, 1168, 1178], "auto": [80, 97, 99, 100, 101, 103, 117, 118, 120, 126, 127, 245, 279, 825, 1186], "logic": [80, 131, 132, 133, 134, 196, 265, 279, 289, 291, 489, 625, 635, 637, 679, 714, 739, 750, 760, 777, 784, 805, 813, 825, 832, 833, 1036, 1161, 1178], "align_fram": 80, "pattern": [80, 108, 109, 122, 125, 126, 127, 190, 279, 495, 570, 571, 572, 577, 578, 579, 591, 592, 813, 828, 1079, 1080, 1098, 1099, 1100, 1105, 1106, 1107, 1119, 1120, 1178], "collis": 80, "need": [80, 104, 108, 109, 111, 175, 176, 178, 179, 216, 219, 228, 240, 279, 477, 488, 540, 558, 609, 663, 687, 690, 705, 714, 752, 753, 755, 756, 780, 825, 1085, 1137, 1178, 1186], "sure": [80, 97, 102, 108, 109, 114, 116, 120, 175, 176, 178, 179, 211, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "contigu": [80, 97, 102, 108, 109, 114, 116, 120, 122, 125, 126, 127, 211, 279], "relev": 80, "df_h1": 80, "l1": 80, "l2": 80, "df_h2": 80, "r1": 80, "r2": 80, "r3": 80, "df_d1": 80, "df_d2": 80, "df_a1": 80, "df_a2": 80, "df_a3": 80, "enable_string_cach": 81, "stringcach": [81, 82, 192, 279, 726, 861, 863], "reliabl": [81, 82], "wai": [81, 82, 97, 99, 100, 101, 103, 117, 118, 126, 174, 191, 207, 230, 258, 279, 521, 525, 566, 577, 710, 714, 751, 774, 790, 806, 813, 825, 1105], "until": [81, 194, 279, 588, 589, 614, 1116, 1117, 1142], "deprec": [82, 83, 147, 149, 175, 176, 177, 178, 179, 227, 260, 279, 293, 318, 325, 326, 350, 354, 358, 360, 362, 367, 371, 374, 386, 421, 425, 428, 445, 448, 455, 459, 473, 478, 485, 541, 557, 571, 584, 585, 586, 587, 593, 594, 600, 606, 608, 639, 646, 658, 660, 677, 690, 701, 714, 730, 750, 752, 753, 754, 755, 756, 765, 777, 787, 805, 808, 825, 834, 835, 870, 871, 881, 895, 899, 906, 908, 911, 916, 920, 923, 935, 968, 974, 996, 999, 1006, 1010, 1024, 1029, 1054, 1064, 1084, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1134, 1136, 1178], "sinc": [82, 112, 123, 147, 149, 150, 175, 176, 177, 178, 179, 227, 244, 260, 279, 293, 318, 325, 326, 350, 352, 354, 358, 360, 362, 367, 371, 374, 386, 421, 425, 428, 445, 448, 455, 459, 473, 478, 485, 541, 557, 571, 584, 585, 586, 587, 593, 594, 600, 606, 608, 639, 646, 658, 660, 669, 677, 690, 701, 714, 730, 731, 750, 752, 753, 754, 755, 756, 765, 777, 787, 790, 795, 805, 808, 825, 834, 835, 870, 871, 881, 895, 897, 899, 906, 908, 911, 916, 920, 923, 935, 968, 974, 996, 999, 1006, 1010, 1024, 1029, 1054, 1064, 1084, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1134, 1136, 1178], "19": [82, 113, 130, 147, 175, 176, 177, 178, 179, 193, 216, 227, 260, 279, 293, 325, 326, 350, 354, 358, 360, 362, 367, 371, 372, 374, 386, 421, 425, 428, 445, 459, 485, 540, 541, 544, 546, 557, 571, 584, 585, 586, 587, 593, 594, 600, 606, 608, 609, 639, 658, 660, 677, 714, 752, 753, 754, 755, 756, 761, 765, 780, 787, 808, 825, 835, 870, 871, 881, 895, 899, 906, 908, 911, 916, 920, 921, 923, 935, 968, 974, 996, 1010, 1054, 1064, 1084, 1099, 1112, 1113, 1114, 1115, 1121, 1122, 1128, 1134, 1136, 1137, 1178], "longer": [82, 108, 122], "accept": [82, 107, 108, 109, 112, 114, 116, 120, 150, 174, 177, 222, 223, 226, 230, 244, 254, 255, 258, 279, 286, 324, 397, 418, 488, 521, 566, 634, 636, 638, 644, 647, 648, 649, 656, 665, 681, 685, 693, 696, 698, 704, 714, 731, 751, 754, 782, 783, 786, 790, 795, 801, 802, 806, 825, 869, 963, 1083, 1178], "disable_string_cach": 82, "finish": [85, 163, 279, 834, 948, 1178], "least": [89, 138, 522, 714, 1050, 1178], "unexpect": [90, 279, 487, 489, 714, 1036, 1178], "caus": [90, 98, 108, 109, 122, 131, 146, 163, 279, 834, 948, 1178], "panic": 90, "incompat": 94, "arrai": [97, 101, 108, 109, 120, 161, 235, 240, 241, 279, 306, 307, 308, 309, 310, 325, 326, 331, 332, 333, 334, 335, 443, 460, 461, 462, 463, 472, 476, 481, 543, 544, 546, 550, 555, 664, 714, 825, 847, 848, 849, 850, 851, 870, 871, 876, 877, 878, 879, 884, 942, 994, 1011, 1012, 1013, 1014, 1022, 1023, 1027, 1032, 1033, 1066, 1067, 1069, 1072, 1073, 1074, 1081, 1086, 1154, 1159, 1160, 1168, 1178], "chunkedarrai": [97, 203, 279, 884, 1178], "recordbatch": [97, 191, 279], "schemadefinit": [97, 99, 100, 101, 103, 117, 118, 126, 279, 825], "schema_overrid": [97, 99, 100, 101, 102, 103, 110, 111, 113, 117, 118, 119, 191, 240, 279, 825, 828, 851], "copi": [97, 98, 146, 152, 153, 191, 235, 240, 241, 254, 279, 400, 714, 734, 735, 801, 825, 868, 872, 949, 1154, 1159, 1160, 1178], "closest": 97, "pair": [97, 99, 100, 101, 103, 117, 118, 126, 137, 212, 279, 778, 825, 1186], "sever": [97, 99, 100, 101, 103, 117, 118, 126, 279, 825, 1186], "form": [97, 99, 100, 101, 103, 117, 118, 126, 190, 218, 248, 279, 522, 714, 825, 1050, 1178], "dimens": [97, 99, 101, 103, 117, 118, 126, 279, 536, 714, 825, 1060, 1178], "supportsinterchang": 98, "allow_copi": [98, 146], "interchang": [98, 146], "__dataframe__": 98, "convers": [98, 113, 146, 190, 191, 218, 219, 237, 241, 279, 606, 607, 608, 611, 726, 956, 1134, 1135, 1136, 1139, 1158, 1159, 1160, 1178], "detail": [98, 110, 111, 131, 133, 146, 279, 825, 1186], "latest": [98, 112, 123, 146, 371, 372, 386, 408, 498, 606, 608, 660, 714, 920, 921, 935, 1134, 1136], "from_panda": 98, "from_arrow": 98, "effici": [98, 110, 113, 191, 279], "reli": 98, "therefor": [98, 161, 279, 489, 704, 714, 942, 1178], "becaus": [98, 118, 161, 175, 178, 194, 196, 248, 265, 279, 450, 752, 755, 813, 825, 835, 942, 1001, 1036, 1178], "convert": [98, 102, 112, 113, 119, 123, 146, 236, 237, 238, 239, 240, 243, 279, 309, 338, 346, 375, 378, 476, 477, 486, 509, 531, 579, 590, 606, 607, 608, 609, 611, 714, 750, 825, 850, 863, 891, 924, 927, 1027, 1028, 1107, 1118, 1134, 1135, 1136, 1137, 1139, 1147, 1157, 1158, 1159, 1160, 1168, 1178], "panda": [98, 102, 130, 175, 241, 279, 364, 365, 625, 714, 752, 825, 913, 914, 1160, 1161, 1178], "pd": [98, 102, 625, 714, 1160, 1161, 1178], "df_pd": 98, "dfi": [98, 146], "clone": [99, 100, 101, 102, 103, 152, 240, 241, 279, 734, 825, 868, 1158, 1159, 1160, 1168, 1178], "dimension": [99, 101, 103, 240, 279, 825, 1178], "infer_schema_length": [100, 103, 108, 109, 113, 117, 122, 126, 279, 580, 825, 1108], "NOT": [100, 496, 1185], "typic": [100, 110, 196, 279, 351, 828, 896, 1036, 1178], "clearer": 100, "_partial_": [100, 279, 825], "omit": [100, 104, 136, 138, 140, 144, 204, 219, 279, 701, 702, 828], "mani": [100, 103, 110, 111, 163, 279, 580, 834, 948, 1108, 1178], "scan": [100, 103, 108, 109, 122, 123, 124, 125, 126, 127, 128, 175, 176, 178, 179, 216, 279, 540, 714, 745, 752, 753, 755, 756, 757, 764, 780, 825], "slow": [100, 103, 108, 109, 122, 293, 336, 489, 542, 714, 813, 880, 1065, 1178], "partial": [100, 108, 122], "present": [100, 138, 423, 602, 603, 714, 745, 825, 1168, 1178], "np": [101, 166, 240, 279, 621, 714, 748, 825, 967, 972, 976, 977, 1150, 1178], "ndarrai": [101, 166, 240, 279, 621, 714, 748, 825, 884, 1077, 1080, 1150, 1159, 1178], "numpi": [101, 130, 155, 190, 218, 219, 237, 240, 241, 279, 514, 515, 542, 714, 825, 967, 972, 976, 977, 1045, 1046, 1065, 1159, 1160, 1168, 1178], "columnar": [101, 103, 190, 218, 279], "interpret": [101, 103, 108, 109, 122, 279, 825], "yield": [101, 103, 108, 109, 110, 122, 161, 163, 245, 279, 521, 714, 825, 834, 942, 948, 1178], "conclus": [101, 103, 279, 825], "nan_to_nul": [102, 279, 825, 1178], "include_index": 102, "instal": [102, 108, 109, 111, 114, 116, 120, 130, 155, 240, 241, 279, 788, 825, 1160, 1178], "nan": [102, 131, 132, 133, 134, 138, 146, 164, 241, 279, 341, 342, 392, 393, 401, 410, 412, 417, 427, 429, 430, 431, 436, 484, 490, 503, 514, 515, 516, 517, 542, 627, 650, 714, 746, 825, 837, 841, 885, 886, 950, 976, 977, 1045, 1046, 1065, 1159, 1160, 1178, 1186], "pd_df": 102, "pd_seri": 102, "tbl": [104, 106, 109], "reconstruct": 104, "repr": [104, 138, 140], "trim": 104, "whitespac": [104, 586, 594, 600, 601, 602, 603, 1114, 1122, 1128, 1129, 1130, 1131], "prompt": 104, "extract": [104, 347, 349, 350, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 370, 373, 374, 376, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 525, 578, 579, 580, 581, 714, 892, 893, 894, 895, 898, 899, 901, 905, 906, 907, 908, 910, 911, 912, 915, 916, 918, 919, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 936, 937, 939, 1106, 1107, 1108, 1109], "to_init_repr": [104, 279, 1178], "truncat": [104, 108, 122, 173, 175, 178, 190, 218, 219, 237, 279, 752, 755, 775, 825], "identifi": [104, 200, 206, 246, 279, 770, 796, 825], "compound": [104, 219, 279, 828], "struct": [104, 204, 222, 243, 247, 254, 279, 337, 477, 488, 529, 538, 539, 579, 580, 597, 598, 631, 653, 654, 656, 678, 714, 782, 797, 801, 813, 825, 881, 1028, 1054, 1062, 1107, 1108, 1123, 1125, 1126, 1178], "neither": [104, 113, 119, 220, 279, 477, 1028], "source_ac": 104, "source_cha": 104, "ident": [104, 152, 153, 279, 375, 538, 539, 714, 734, 735, 825, 868, 872, 924, 1062, 1063, 1178], "timestamp": [104, 175, 178, 279, 371, 669, 752, 755, 825, 920], "tor_id": 104, "nnel_id": 104, "\u03bc": [104, 138, 175, 190, 193, 216, 218, 219, 237, 250, 279, 343, 344, 345, 346, 351, 353, 357, 361, 364, 365, 368, 371, 372, 373, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 540, 543, 544, 546, 549, 550, 551, 606, 608, 661, 663, 669, 714, 752, 761, 780, 825, 828, 888, 889, 890, 891, 892, 893, 896, 897, 898, 904, 905, 910, 913, 914, 915, 917, 920, 921, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 938, 1134, 1136], "asia": [104, 828, 892, 893, 925], "tokyo": [104, 828], "123456780": 104, "9876543210": 104, "56": [104, 623, 714], "59": [104, 137, 345, 353, 361, 373, 660, 700, 701, 702, 828, 890, 910, 922], "663053": 104, "jst": [104, 828], "803065983": 104, "2055938745": 104, "38": [104, 138], "18": [104, 149, 201, 216, 279, 318, 335, 372, 386, 389, 417, 433, 448, 455, 473, 478, 508, 540, 646, 658, 701, 714, 730, 750, 771, 775, 777, 780, 805, 825, 828, 834, 938, 999, 1006, 1024, 1029, 1136, 1178], "050545": 104, "source_actor_id": 104, "source_channel_id": 104, "to_list": [104, 216, 279, 1098, 1178], "datatypeclass": 105, "uint32": [105, 130, 151, 161, 279, 303, 349, 353, 357, 359, 361, 363, 366, 369, 370, 373, 387, 388, 411, 441, 442, 458, 535, 571, 572, 582, 583, 621, 625, 714, 733, 825, 828, 845, 858, 894, 898, 905, 907, 910, 912, 915, 918, 919, 922, 936, 937, 942, 973, 992, 993, 1009, 1078, 1099, 1100, 1110, 1111, 1161, 1178], "regular": [105, 190, 217, 218, 250, 279, 330, 397, 437, 458, 570, 571, 572, 577, 578, 579, 591, 592, 665, 714, 828, 987, 1009, 1098, 1099, 1100, 1105, 1106, 1107, 1119, 1120, 1178], "uint64": [105, 180, 279, 413, 441, 442, 534, 714, 957, 992, 993, 1058, 1178], "bigidx": 105, "read": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 163, 279, 409, 487, 704, 714, 739, 745, 750, 777, 825, 834, 948, 1178], "over": [106, 108, 109, 110, 112, 122, 138, 147, 163, 190, 191, 196, 217, 218, 219, 245, 257, 260, 265, 279, 293, 336, 402, 486, 487, 489, 497, 499, 500, 501, 509, 532, 543, 544, 545, 546, 547, 549, 550, 551, 639, 653, 654, 667, 677, 678, 679, 689, 714, 808, 813, 828, 834, 835, 880, 948, 1036, 1066, 1067, 1069, 1073, 1178], "fetch": [106, 122, 194, 279, 734, 736, 757, 764, 825], "ideal": 106, "read_csv_batch": [106, 727], "tpch": [106, 109], "tables_scale_100": [106, 109], "lineitem": [106, 109, 111], "try_parse_d": [106, 108, 109, 122], "n_row": [107, 108, 109, 114, 116, 120, 122, 125, 126, 127, 191, 279, 745, 825], "handler": [107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 739, 777, 825], "builtin": [107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 739, 777, 825], "stop": [107, 108, 109, 114, 116, 120, 122, 125, 126, 127, 543, 544, 546, 549, 550, 551, 714, 889, 891, 897, 898, 905, 907, 910, 915, 921, 926], "textio": 108, "new_column": [108, 109, 113, 122, 213, 279], "comment_char": [108, 109, 122], "skip_row": [108, 109, 122], "missing_utf8_is_empty_str": [108, 109, 122], "ignore_error": [108, 109, 118, 122], "n_thread": [108, 109], "8192": 108, "csvencod": [108, 109, 122], "low_memori": [108, 109, 120, 122, 126, 127], "skip_rows_after_head": [108, 109, 122], "row_count_nam": [108, 109, 114, 116, 120, 122, 125, 126, 127], "row_count_offset": [108, 109, 114, 116, 120, 122, 125, 126, 127], "sample_s": [108, 109], "eol_char": [108, 109, 122], "raise_if_empti": [108, 109, 113, 119, 122], "truncate_ragged_lin": [108, 122], "fsspec": [108, 109, 114, 116, 120, 123, 124, 125, 127, 130], "remot": [108, 109, 114, 116, 120], "autogener": [108, 109, 122], "column_x": [108, 109, 122], "enumer": [108, 109, 122, 191, 279], "shorter": [108, 109, 122], "comment": [108, 109, 122], "instanc": [108, 109, 122, 127, 138, 140, 144, 151, 163, 169, 279, 319, 498, 543, 544, 545, 546, 547, 549, 550, 551, 653, 667, 710, 714, 733, 766, 804, 825, 834, 858, 948, 1178], "escap": [108, 109, 122], "doesn": [108, 122, 175, 279, 391, 714, 752, 825, 941, 1168, 1178], "complet": [108, 110, 122, 1159, 1178], "wherea": [108, 110, 122, 514, 515, 714, 757, 764, 825, 1045, 1046, 1178], "would": [108, 109, 122, 303, 453, 489, 497, 532, 644, 714, 844, 1004, 1056, 1159, 1178], "prefer": [108, 109, 112, 122, 141, 163, 190, 196, 217, 218, 265, 279, 397, 489, 714, 825, 834, 948, 1036, 1178, 1186], "treat": [108, 109, 122, 330, 437, 458, 570, 572, 591, 592, 714, 987, 1009, 1098, 1100, 1119, 1120, 1178], "10000": [108, 191, 279], "might": [108, 109, 122, 142, 150, 240, 244, 279, 293, 489, 629, 714, 731, 790, 795, 825, 1160, 1178], "issu": [108, 109, 113, 122, 334, 335, 619, 714, 878, 879, 1148, 1178], "iso8601": [108, 109, 122], "succe": [108, 109, 122], "cpu": [108, 109], "system": [108, 109], "wrongli": 108, "done": [108, 109, 122, 128, 144, 148, 151, 193, 279, 292, 294, 319, 521, 640, 714, 729, 733, 761, 825, 858, 1178], "buffer": [108, 109, 110, 161, 190, 279, 942, 1178], "modifi": [108, 109, 122, 142, 144, 163, 183, 190, 252, 279, 304, 371, 389, 570, 577, 578, 591, 714, 834, 920, 938, 948, 1098, 1105, 1106, 1119, 1138, 1140, 1141, 1178], "upper": [108, 109, 110, 161, 175, 178, 279, 324, 325, 418, 477, 630, 641, 658, 659, 661, 662, 673, 674, 701, 702, 714, 752, 755, 825, 869, 870, 942, 963, 1034, 1165, 1178], "bound": [108, 109, 161, 175, 178, 279, 324, 325, 326, 418, 453, 475, 477, 483, 630, 641, 658, 659, 661, 662, 673, 674, 701, 702, 714, 752, 755, 825, 869, 870, 871, 942, 963, 1004, 1026, 1034, 1165, 1178], "lossi": [108, 109, 122], "decod": [108, 109], "expens": [108, 109, 120, 122, 126, 127, 139, 141, 175, 176, 178, 179, 190, 196, 216, 217, 218, 219, 245, 246, 279, 293, 489, 540, 714, 752, 753, 755, 756, 780, 796, 825, 834, 948, 1036, 1178, 1186], "aggreg": [108, 109, 120, 169, 174, 175, 177, 178, 197, 198, 199, 202, 204, 208, 209, 210, 216, 231, 232, 248, 251, 258, 259, 262, 264, 279, 287, 403, 415, 485, 487, 489, 521, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 635, 636, 637, 638, 653, 654, 655, 656, 667, 672, 680, 681, 684, 685, 689, 697, 698, 714, 752, 753, 755, 756, 766, 767, 768, 769, 772, 773, 776, 780, 791, 792, 799, 806, 807, 810, 812, 825, 960, 1064, 1065, 1066, 1067, 1069, 1072, 1073, 1074, 1178], "nativ": [108, 110, 113, 114, 116, 120, 136, 190, 196, 218, 219, 237, 265, 279, 489, 679, 714, 720, 813, 1036, 1178, 1186], "parser": 108, "regard": [108, 650], "sens": [108, 114, 116, 120, 125, 201, 250, 279, 521, 714, 771, 825], "particular": [108, 114, 116, 120, 125, 161, 279, 942, 1178], "usernam": [108, 111, 114, 116, 120, 125], "password": [108, 111, 114, 116, 120, 125], "skip": [108, 109, 113, 120, 122, 127, 248, 279, 835, 1036, 1178], "offset": [108, 109, 113, 114, 116, 120, 122, 125, 126, 127, 175, 176, 178, 179, 216, 229, 250, 256, 279, 343, 351, 364, 365, 368, 372, 386, 470, 540, 564, 595, 714, 752, 753, 755, 756, 780, 789, 804, 825, 888, 896, 913, 914, 917, 921, 935, 1021, 1092, 1123, 1136, 1178], "row_count": [108, 109, 114, 116, 120, 122, 125, 126, 127], "sampl": [108, 109, 265, 279, 563, 714, 813, 1091, 1178], "estim": [108, 109, 148, 161, 279, 294, 395, 396, 434, 640, 714, 729, 825, 942, 944, 945, 986, 1178], "alloc": [108, 109, 161, 211, 279, 714, 942, 1178], "encount": [108, 109, 122, 175, 178, 279, 514, 515, 580, 581, 650, 653, 667, 714, 752, 755, 825, 1045, 1046, 1108, 1109, 1178], "window": [108, 109, 122, 175, 176, 178, 179, 216, 279, 336, 372, 386, 394, 395, 396, 487, 489, 521, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 648, 691, 692, 714, 752, 753, 755, 756, 780, 825, 880, 921, 935, 943, 944, 945, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1178], "rn": [108, 109, 122], "go": [108, 109, 122, 575, 1103], "nodataerror": [108, 109, 113, 119, 122, 726], "lazili": [108, 109, 122, 123, 124, 125, 126, 127, 488, 714, 737, 825], "glob": [108, 109, 122, 125, 126, 127], "continu": [108, 120, 337, 529, 563, 714, 881, 1054, 1091, 1178], "benchmark": [108, 120], "50000": 109, "batchedcsvread": [109, 726], "upon": 109, "creation": 109, "gather": 109, "next_batch": 109, "big": 109, "interest": 109, "seen_group": 109, "big_fil": 109, "df_current_batch": 109, "partition_df": 109, "partition_bi": [109, 191, 279], "as_dict": [109, 206, 279], "fh": 109, "write_csv": [109, 122, 279], "els": [109, 704], "connectionorcursor": 110, "iter_batch": 110, "cursor": 110, "client": 110, "odbc": 110, "driver": [110, 111], "packag": [110, 113], "establish": 110, "resultset": 110, "manner": 110, "veri": [110, 190, 245, 279, 489, 714, 813], "poor": 110, "trip": 110, "still": [110, 111], "intern": [110, 129, 190, 279], "exact": [110, 136, 138, 140, 228, 279, 604, 605, 606, 607, 608, 627, 714, 1134, 1135, 1136], "incom": 110, "execute_opt": 110, "read_arrow_batches_from_odbc": 110, "read_database_uri": 110, "wide": [110, 173, 200, 248, 279, 770, 825], "snowflak": [110, 111], "variou": [110, 279, 714, 825, 828, 1178], "facil": 110, "initialis": [110, 144, 825, 1185], "flight": 110, "flightsql": 110, "flight_sql": 110, "about": [110, 563, 570, 577, 578, 591, 714, 1091, 1098, 1105, 1106, 1119, 1178, 1186], "notabl": 110, "dremio": 110, "influxdb": 110, "notic": [110, 279, 825, 1178], "dbapi2": 110, "connectorx": [110, 111, 130], "optimis": [110, 196, 219, 265, 279, 825, 1036, 1079, 1080, 1178, 1186], "translat": 110, "conn": 110, "url": [110, 127, 577, 579, 1105, 1107], "test_data": 110, "user_conn": 110, "normalised_scor": 110, "uint8": [110, 135, 137, 151, 239, 240, 248, 279, 334, 335, 488, 619, 634, 714, 733, 825, 828, 878, 879, 1148, 1178, 1186], "parameteris": 110, "metric": 110, "alchemy_conn": 110, "qmark": 110, "variad": 110, "1000": [110, 113, 161, 239, 279, 357, 381, 930, 1157, 1178, 1186], "localhost": 110, "5432": 110, "uid": 110, "usr": 110, "pwd": 110, "max_text_s": 110, "max_binary_s": 110, "do_someth": 110, "partition_on": 111, "partition_rang": 111, "partition_num": 111, "dbreadengin": 111, "raw": 111, "warehous": 111, "role": 111, "transfer": 111, "document": [111, 113, 375, 378, 581, 606, 607, 608, 611, 710, 863, 924, 927, 1109, 1134, 1135, 1136, 1139], "redshift": 111, "mysql": 111, "mariadb": 111, "clickhous": 111, "oracl": 111, "bigqueri": 111, "pleas": [111, 175, 279, 658, 663, 752, 825], "github": 111, "sfu": 111, "connector": 111, "destin": 111, "develop": [111, 138, 140], "read_databas": 111, "explicitli": [111, 136, 138, 144, 488, 696, 714, 725], "test_tabl": 111, "compani": 111, "testdb": 111, "public": [111, 279, 714, 726, 825, 1178], "myrol": 111, "delta_table_opt": [112, 123], "root": [112, 123, 322, 433, 486, 499, 508, 509, 510, 511, 512, 513, 527, 567, 618, 713, 714, 865, 1094, 1178], "absolut": [112, 123, 124, 131, 132, 133, 134, 285, 394, 395, 396, 714, 830, 943, 944, 945, 1178], "avoid": [112, 218, 279, 288, 714], "year": [112, 123, 175, 193, 216, 250, 279, 355, 356, 368, 369, 372, 386, 387, 540, 543, 544, 545, 546, 547, 549, 550, 551, 657, 658, 659, 660, 661, 662, 701, 702, 714, 752, 761, 780, 825, 900, 901, 917, 918, 921, 935, 936], "2021": [112, 123, 151, 156, 173, 175, 250, 279, 606, 676, 733, 752, 825, 828, 892, 893, 901, 925, 982, 1134, 1178], "aw": [112, 123, 127], "googl": [112, 123, 124], "service_account": [112, 123], "service_account_json_absolute_path": [112, 123], "az": [112, 123, 124], "adl": [112, 123, 124], "abf": [112, 123, 124], "azure_storage_account_nam": [112, 123, 124], "azure_storage_account_kei": [112, 123, 124], "without_fil": [112, 123, 124], "track": [112, 123, 124, 196, 279, 477, 1185], "sheet_id": [113, 119], "sheet_nam": [113, 119], "xlsx2csv": [113, 130], "openpyxl": [113, 130], "pyxlsb": [113, 130], "xlsx2csv_option": 113, "read_csv_opt": 113, "noreturn": [113, 119], "spreadsheet": [113, 119, 208, 279, 726], "xlsb": 113, "sheetnam": [113, 119], "nor": [113, 119, 220, 279], "fastest": 113, "read_csv": [113, 122], "refin": 113, "significantli": [113, 1186], "potenti": [113, 122, 125, 126, 127, 190, 217, 219, 279, 508], "unabl": 113, "julian": 113, "skip_empty_lin": 113, "influenc": [113, 745, 766, 825], "pipelin": 113, "correct": [113, 119, 395, 396, 434, 544, 545, 546, 547, 548, 549, 551, 563, 714, 765, 766, 825, 944, 945, 986, 1071, 1091, 1178], "known": [113, 138, 477, 808, 813, 1028], "better": [113, 196, 240, 265, 279, 489, 583, 714, 813, 1079, 1080, 1111, 1178], "detect": 113, "memory_map": [114, 120, 125], "v2": [114, 125], "greatli": [114, 125], "repeat": [114, 125, 533, 535, 687, 705, 714], "give": [114, 116, 120, 125, 126, 127, 200, 246, 279, 352, 434, 535, 627, 714, 726, 770, 796, 825, 897, 986, 1178], "That": [114, 765, 766, 825], "filenam": 114, "my_fil": 114, "write_ipc": [114, 279], "read_ndjson": 117, "openoffic": 119, "od": 119, "parallelstrategi": [120, 127], "use_statist": [120, 127], "stabl": [120, 150, 155, 220, 244, 279, 482, 714, 731, 770, 790, 795, 825], "row_group": [120, 127], "read_tabl": 120, "scan_parquet": [120, 128], "scan_pyarrow_dataset": [120, 127], "hive": [120, 127], "contribut": [120, 545, 547, 549, 551, 714], "with_column_nam": 122, "push": [122, 125, 126, 127, 128], "down": [122, 125, 126, 127, 128, 406, 714, 954, 1178], "therebi": [122, 125, 126, 127], "realloc": [122, 125, 126, 163, 279, 834, 948, 1178], "headerless": 122, "my_long_fil": 122, "thing": [122, 129, 666, 675], "less": [122, 193, 279, 436, 484, 598, 714, 761, 825, 1126, 1186], "breezah": 122, "languag": [122, 175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "hard": [122, 765, 766, 825], "mydf": 122, "lambda": [122, 147, 169, 196, 207, 208, 265, 279, 293, 394, 395, 396, 477, 485, 486, 487, 489, 509, 653, 654, 667, 678, 679, 689, 714, 765, 766, 774, 813, 825, 835, 943, 944, 945, 1028, 1036, 1178], "lower": [122, 175, 178, 210, 271, 279, 324, 326, 418, 483, 486, 509, 530, 534, 547, 641, 658, 659, 661, 662, 673, 674, 688, 701, 702, 714, 752, 755, 776, 819, 825, 869, 871, 963, 1034, 1055, 1058, 1070, 1165, 1178], "simpli": [122, 521, 653, 667, 714], "idx": [122, 175, 191, 279, 477, 752, 825, 1028, 1080, 1178], "uint16": [122, 334, 335, 619, 714, 828, 878, 879, 1148, 1178], "u16": [122, 138, 1186], "eu": [123, 124], "central": [123, 124, 434, 563, 714, 986, 1091, 1178], "iceberg": [124, 726], "pyiceberg": [124, 130], "metadata": [124, 175, 176, 178, 179, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "secret": [124, 127], "adlf": 124, "my": [124, 128, 612, 1140], "gcp": [124, 127], "oauth": 124, "token": 124, "ya29": 124, "dr": 124, "afm": 124, "py": 124, "impl": 124, "fsspecfileio": 124, "hive_partit": 127, "retri": 127, "prune": [127, 766, 825], "read_parquet": 127, "east": 127, "allow_pyarrow_filt": 128, "comparison": 128, "dset": 128, "folder": 128, "05": [128, 131, 132, 133, 134, 138, 151, 193, 250, 279, 345, 346, 371, 373, 375, 378, 379, 658, 661, 733, 761, 825, 828, 890, 891, 892, 893, 920, 921, 924, 925, 927, 928, 935], "04": [128, 151, 175, 250, 279, 345, 346, 364, 365, 371, 372, 375, 378, 379, 380, 383, 385, 389, 606, 661, 663, 733, 752, 825, 828, 891, 905, 910, 913, 914, 915, 920, 924, 927, 928, 929, 932, 934, 938, 1134], "seed": [129, 180, 220, 279, 413, 464, 532, 553, 559, 714, 957, 1015, 1056, 1076, 1087, 1178], "shuffl": [129, 220, 265, 279, 464, 553, 714, 813, 1015, 1076, 1178], "stdout": [130, 144, 173, 279, 500], "platform": 130, "maco": 130, "13": [130, 138, 152, 153, 164, 165, 172, 184, 194, 203, 216, 254, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 288, 350, 354, 358, 360, 362, 367, 374, 497, 499, 540, 609, 648, 653, 656, 667, 698, 703, 714, 734, 735, 746, 747, 763, 780, 801, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 825, 895, 899, 906, 908, 911, 916, 921, 923, 935, 936, 1036, 1137, 1178], "arm64": 130, "arm": 130, "64bit": [130, 534, 714, 1058, 1178], "main": [130, 737, 825], "aug": 130, "clang": 130, "14": [130, 138, 196, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 343, 417, 532, 701, 714, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 828, 888, 921], "1403": 130, "adbc_driver_sqlit": 130, "cloudpickl": 130, "23": [130, 175, 216, 279, 345, 349, 353, 361, 369, 372, 388, 540, 543, 544, 546, 549, 550, 551, 660, 663, 700, 701, 702, 714, 752, 780, 825, 828, 890, 898, 1186], "matplotlib": [130, 775, 788, 825], "26": [130, 351, 387, 896], "pydant": 130, "21": [130, 201, 232, 279, 543, 544, 546, 549, 550, 551, 669, 714, 771, 825, 828], "check_row_ord": [131, 132], "check_column_ord": [131, 132], "check_dtyp": [131, 132, 133, 134], "check_exact": [131, 132, 133, 134], "rtol": [131, 132, 133, 134], "atol": [131, 132, 133, 134], "08": [131, 132, 133, 134, 138, 216, 279, 345, 372, 540, 606, 661, 663, 714, 780, 825, 828, 921, 935, 1134], "categorical_as_str": [131, 132, 133, 134], "nans_compare_equ": [131, 132, 133, 134], "assert": [131, 132, 133, 134, 136, 138, 140, 216, 279, 726, 828], "assertionerror": [131, 132, 133, 134], "compar": [131, 132, 133, 134, 170, 279, 392, 393, 410, 412, 436, 484, 516, 517, 714, 863, 1078, 1178], "unsort": [131, 132], "exactli": [131, 132, 133, 134, 137, 138, 140, 597, 598, 604, 605, 663, 1086, 1125, 1126, 1132, 1133, 1178], "toler": [131, 132, 133, 134, 193, 279, 761, 825], "inexact": [131, 132, 133, 134], "share": [131, 132, 133, 134, 161, 279, 714, 942, 1178], "assert_series_equ": [131, 134, 1186], "assert_frame_not_equ": [131, 134], "pytest": [131, 133], "worthwhil": [131, 133], "shorten": [131, 133], "traceback": [131, 132, 133, 134], "tb": [131, 133, 161, 279, 942, 1178], "short": [131, 133], "tend": [131, 133], "unhelpfulli": [131, 133], "assert_frame_equ": [132, 133, 1186], "assert_series_not_equ": [132, 133], "check_nam": [133, 134], "searchstrategi": [135, 137, 138, 140], "null_prob": [135, 138, 140], "percentag": [135, 138, 140, 522, 714, 1050, 1178], "chanc": [135, 138, 140, 1186], "independ": [135, 136, 138, 140], "flag": [135, 279, 555, 570, 577, 578, 591, 714, 743, 765, 766, 825, 1081, 1098, 1105, 1106, 1119, 1178], "hypothesi": [135, 136, 137, 138, 139, 140, 1186], "sampled_from": [135, 1186], "unique_small_int": 135, "ccy": [135, 1186], "gbp": [135, 1186], "eur": [135, 156, 173, 279, 1186], "jpy": [135, 1186], "min_col": [136, 138], "max_col": [136, 138], "standalon": [136, 138, 828], "mincol": 136, "assign": [136, 175, 279, 477, 521, 532, 597, 598, 714, 752, 825, 1028, 1035, 1056, 1125, 1126, 1178], "minimum": [136, 137, 138, 140, 169, 202, 279, 394, 395, 396, 503, 515, 524, 532, 684, 685, 714, 772, 825, 909, 943, 944, 945, 1046, 1052, 1056, 1178, 1186], "especi": [136, 539, 714, 745, 825, 1063, 1178], "test_unique_xyz": 136, "assert_someth": 136, "punctuat": 136, "test_special_char_colname_init": 136, "inner_dtyp": [137, 140], "select_from": [137, 140], "min_siz": [137, 138, 140, 1186], "max_siz": [137, 138, 140, 1186], "anoth": [137, 174, 279, 336, 344, 475, 493, 496, 714, 751, 803, 825, 880, 889, 948, 1026, 1078, 1178], "randomli": 137, "innermost": 137, "2x": 137, "lst": 137, "11330": 137, "24030": 137, "116": 137, "zz": [137, 140], "uint8_pair": [137, 1186], "uint": [137, 1186], "zip": [137, 1186], "131": 137, "176": 137, "149": [137, 1186], "max_data_s": [138, 140], "include_col": 138, "allow_infin": [138, 140], "allowed_dtyp": [138, 140, 1186], "excluded_dtyp": [138, 140], "describ": [138, 173, 279, 1178], "desir": [138, 477, 1028], "n_chunk": [138, 140, 279, 834, 948, 1178], "randomis": 138, "onto": 138, "pct": 138, "preced": [138, 828], "disallow": [138, 140], "inf": [138, 140, 300, 337, 420, 424, 529, 627, 714, 841, 875, 881, 959, 967, 972, 1034, 1050, 1054, 1165, 1178], "exclud": [138, 140, 175, 279, 332, 335, 418, 714, 752, 825, 963, 982, 1178], "usag": [138, 140, 228, 279, 828, 1086, 1178], "deploi": [138, 140], "characterist": [138, 140], "concret": [138, 140], "test_repr": 138, "isinst": [138, 140, 279], "0x11f561580": 138, "0565": 138, "34715": 138, "5844": 138, "33": [138, 201, 279, 552, 714, 771, 825, 1070, 1178], "076854": 138, "3382": 138, "17": [138, 258, 542, 552, 669, 690, 701, 714, 806, 873, 875, 921, 1065, 1178, 1186], "48662": 138, "7540": 138, "29": [138, 175, 193, 216, 250, 279, 343, 364, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 888, 913, 917, 921, 935], "836271": 138, "4063": 138, "06": [138, 151, 250, 279, 345, 363, 370, 371, 387, 733, 825, 828, 920, 921], "39092": 138, "1889": 138, "41": [138, 550, 714, 1186], "874455": 138, "15836": 138, "1755e": 138, "575050513": 138, "profil": [139, 141, 736, 825], "balanc": [139, 141, 1186], "set_environ": 139, "polars_hypothesis_profil": [139, 141], "1500": 139, "constructor": 140, "normal": [140, 175, 279, 391, 434, 563, 714, 752, 825, 941, 986, 1091, 1178], "test_repr_is_valid_str": 140, "experi": 140, "create_list_strategi": [140, 1186], "polars_max_thread": 142, "behind": 142, "lock": 142, "reason": [142, 487, 714], "temporarili": [142, 144, 175, 176, 178, 179, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "pyspark": 142, "udf": [142, 147, 196, 207, 260, 265, 279, 293, 489, 525, 639, 679, 714, 774, 808, 813, 825, 835, 1036, 1178], "recommend": [142, 190, 207, 279, 828], "easi": [144, 1186], "restor": 144, "restore_default": 144, "relat": [144, 828], "set_tbl_row": 144, "initi": [144, 653, 667, 704], "whatev": 144, "were": [144, 710], "enter": 144, "advantag": [144, 207, 279], "set_": 144, "set_verbos": 144, "do_various_th": 144, "cleaner": 144, "breviti": 144, "vein": 144, "durat": [144, 193, 250, 279, 343, 350, 351, 354, 358, 360, 362, 367, 374, 379, 380, 381, 382, 383, 384, 385, 389, 625, 658, 659, 661, 662, 701, 702, 714, 761, 825, 828, 888, 895, 896, 899, 906, 908, 911, 916, 923, 928, 929, 930, 931, 932, 933, 934, 935, 938, 1161, 1178], "set_ascii_t": 144, "write_ascii_frame_to_stdout": 144, "sy": 144, "nan_as_nul": 146, "polarsdatafram": 146, "notimplementederror": 146, "num_row": 146, "get_column": [146, 242, 279], "dtypekind": 146, "inference_s": [147, 196, 279], "256": [147, 196, 279, 1050, 1178], "map_row": [147, 279], "tri": [147, 196, 279], "approxim": [148, 149, 279, 294, 640, 714, 729, 730, 825, 1186], "hyperloglog": [148, 279, 294, 640, 714, 729, 825], "algorithm": [148, 279, 294, 640, 714, 729, 825], "cardin": [148, 279, 294, 640, 714, 729, 825], "approx_n_uniqu": [149, 279, 714, 730, 825], "k": [150, 219, 244, 279, 317, 321, 434, 626, 714, 731, 795, 825, 857, 862, 986, 1162, 1178], "intoexpr": [150, 174, 175, 176, 177, 178, 179, 216, 222, 223, 226, 230, 244, 254, 255, 258, 279, 292, 312, 315, 316, 418, 445, 446, 448, 455, 456, 465, 466, 467, 468, 473, 478, 521, 554, 556, 557, 566, 596, 597, 598, 604, 605, 636, 638, 644, 647, 648, 649, 653, 656, 660, 667, 681, 685, 690, 693, 696, 698, 704, 714, 731, 751, 752, 753, 754, 755, 756, 780, 782, 783, 786, 790, 795, 801, 802, 806, 825, 852, 855, 856, 963, 1007, 1083, 1124, 1125, 1126, 1132, 1133, 1178], "nulls_last": [150, 230, 244, 279, 303, 565, 714, 731, 790, 795, 825, 844, 1178], "smallest": [150, 244, 279, 317, 714, 731, 795, 825, 857, 1178], "largest": [150, 175, 193, 216, 244, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 626, 658, 659, 661, 662, 701, 702, 714, 731, 752, 761, 780, 795, 825, 917, 921, 935, 1162, 1178], "wors": [150, 244, 279, 731, 790, 795, 825], "search": [150, 193, 244, 279, 731, 761, 790, 795, 825], "top_k": [150, 279, 317, 714, 731, 825, 857, 1178], "columnnameorselector": [151, 157, 159, 200, 206, 208, 219, 238, 246, 247, 248, 279, 733, 740, 741, 770, 796, 797, 825], "strict": [151, 279, 313, 319, 570, 573, 590, 606, 607, 608, 611, 714, 733, 825, 853, 858, 1078, 1098, 1101, 1118, 1134, 1135, 1136, 1139, 1178], "due": [151, 175, 193, 216, 219, 250, 279, 288, 319, 351, 368, 372, 386, 433, 508, 510, 511, 512, 513, 527, 540, 543, 544, 545, 546, 547, 549, 550, 551, 618, 658, 659, 661, 662, 701, 702, 714, 733, 752, 761, 780, 825, 858, 896, 917, 921, 935, 1178], "overflow": [151, 279, 319, 334, 335, 590, 619, 714, 733, 825, 858, 878, 879, 1118, 1148, 1178], "2020": [151, 156, 173, 216, 279, 346, 351, 357, 371, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 540, 606, 607, 608, 714, 733, 780, 825, 828, 891, 896, 920, 924, 927, 928, 929, 930, 931, 932, 933, 934, 935, 1134, 1135, 1136], "u8": [151, 238, 239, 248, 279, 488, 634, 714, 733, 825, 828, 1155, 1178, 1186], "to_dict": [151, 279, 733, 825], "as_seri": [151, 236, 279, 733, 825, 881, 1054, 1178], "tempor": [151, 175, 176, 178, 179, 190, 216, 218, 219, 237, 279, 324, 418, 540, 543, 544, 545, 546, 547, 549, 550, 551, 714, 726, 733, 752, 753, 755, 756, 780, 825, 828, 869, 963, 982, 1178], "greater": [152, 193, 279, 410, 412, 563, 588, 589, 598, 614, 714, 761, 825, 1091, 1116, 1117, 1126, 1142, 1178], "cheap": [152, 153, 223, 255, 279, 734, 735, 783, 802, 825, 834, 868, 872, 1178], "deepcopi": [152, 279, 734, 825, 868, 1178], "appl": [154, 183, 192, 212, 214, 236, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 537, 575, 599, 714, 760, 778, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 825, 1103, 1127], "banana": [154, 236, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 537, 575, 599, 714, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820], "orang": [154, 261, 262, 264, 266, 267, 269, 271, 272, 279, 809, 810, 812, 814, 815, 817, 819, 820], "pairwis": [155, 279], "pearson": [155, 279, 434, 563, 650, 714, 986, 1091, 1178], "correl": [155, 279, 650, 691], "coeffici": [155, 279, 563, 714, 1091, 1178], "corrcoef": [155, 279], "percentil": [156, 279, 882, 1178], "summari": [156, 279, 882, 1178], "glimps": [156, 181, 279], "median": [156, 208, 279, 402, 545, 714, 803, 825, 882, 1068, 1178], "usd": [156, 173, 279, 1186], "null_count": [156, 159, 279, 336, 714, 825, 880, 882, 956, 1178], "266667": [156, 279], "666667": [156, 185, 198, 251, 267, 279, 394, 714, 759, 799, 815, 825, 943, 1178], "std": [156, 279, 549, 714, 825, 882, 1072, 1178], "101514": [156, 279], "707107": [156, 279, 395, 549, 714, 944, 1178], "57735": [156, 279], "more_column": [157, 162, 224, 247, 279, 397, 665, 714, 740, 744, 785, 797, 825], "subset": [159, 204, 246, 279, 741, 796, 825], "preserv": [159, 166, 174, 177, 192, 196, 240, 241, 279, 341, 342, 403, 449, 560, 714, 741, 748, 760, 825, 885, 886, 952, 1000, 1088, 1160, 1178], "behavior": [159, 279, 475, 741, 825, 834, 881, 1026, 1054, 1178], "all_horizont": [159, 279, 635, 741, 825], "is_nul": [159, 279, 714, 741, 825, 1178], "sizeunit": [161, 279, 942, 1178], "heap": [161, 279, 714, 942, 1178], "its": [161, 279, 345, 372, 386, 566, 704, 714, 863, 890, 921, 935, 942, 1178], "bitmap": [161, 279, 942, 1178], "structarrai": [161, 279, 942, 1178], "constant": [161, 216, 279, 343, 400, 714, 780, 825, 888, 942, 949, 1178], "unchang": [161, 279, 625, 714, 765, 766, 808, 813, 825, 942, 1161, 1178], "capac": [161, 228, 279, 942, 1086, 1178], "ffi": [161, 279, 942, 1178], "kb": [161, 279, 942, 1178], "mb": [161, 279, 942, 1178], "gb": [161, 279, 942, 1178], "revers": [161, 279, 331, 332, 333, 334, 335, 486, 509, 510, 511, 527, 618, 714, 825, 876, 877, 878, 879, 1178], "1_000_000": [161, 279, 942, 1178], "25888898": [161, 279], "689577102661133": [161, 279], "long": [162, 200, 248, 279, 744, 770, 825], "letter": [162, 263, 273, 279, 397, 578, 665, 714, 744, 811, 821, 825, 828, 1106], "onlin": [163, 279, 834, 948, 1178], "rerun": [163, 279, 834, 948, 1178], "conveni": [163, 279, 834, 948, 1178], "Not": [164, 279, 427, 429, 488, 714, 746, 825], "fillnullstrategi": [165, 279, 402, 714, 747, 825, 951, 1178], "matches_supertyp": [165, 279, 747, 825], "forward": [165, 193, 226, 279, 364, 402, 408, 469, 556, 714, 747, 761, 786, 825, 913, 951, 1020, 1083, 1178], "consecut": [165, 279, 311, 402, 408, 569, 714, 747, 825, 951, 1097, 1178], "fill_nan": [165, 279, 714, 825, 1178], "intoexprcolumn": [166, 279, 317, 324, 325, 326, 464, 469, 522, 553, 556, 601, 602, 603, 626, 641, 658, 659, 661, 662, 673, 674, 701, 702, 714, 748, 786, 825, 857, 869, 870, 871, 1015, 1020, 1050, 1129, 1130, 1131, 1162, 1178], "constraint": [166, 279, 433, 508, 510, 511, 512, 513, 527, 618, 714, 748, 825], "is_in": [166, 279, 714, 1178], "reduct": [169, 279], "supercast": [169, 279], "parent": [169, 279], "rule": [169, 279], "arithmet": [169, 279], "zip_with": [169, 279, 1178], "foo11": [169, 279], "bar22": [169, 279], "null_equ": [170, 279, 1078, 1178], "retriev": [171, 279, 441, 442, 615, 992, 993, 1143], "max_items_per_column": [173, 279], "max_colname_length": [173, 279], "return_as_str": [173, 279, 500], "preview": [173, 279], "cleanli": [173, 279], "few": [173, 279], "exce": [173, 279], "trail": [173, 279, 594, 600, 601, 602, 1122, 1128, 1129, 1130], "ellipsi": [173, 279], "head": [173, 195, 233, 279, 292, 438, 714, 764, 825, 988, 1149, 1178], "tail": [173, 181, 279, 292, 563, 714, 825, 958, 1091, 1178], "more_bi": [174, 177, 206, 230, 279, 566, 714, 751, 754, 790, 825], "groupbi": [174, 208, 279, 293, 489, 639, 679, 714, 825], "consist": [174, 177, 206, 279, 606, 751, 754, 825, 834, 948, 1134, 1178], "regardless": [174, 177, 279, 581, 704, 1109], "agg": [174, 175, 178, 208, 216, 279, 287, 403, 405, 411, 489, 565, 566, 621, 633, 651, 679, 714, 736, 737, 743, 745, 751, 752, 753, 755, 756, 775, 780, 784, 788, 825, 828], "Or": [174, 175, 193, 216, 230, 250, 258, 279, 521, 540, 566, 658, 659, 661, 662, 701, 702, 704, 714, 751, 752, 761, 780, 790, 806, 825], "index_column": [175, 176, 178, 179, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "timedelta": [175, 176, 178, 179, 193, 216, 250, 279, 349, 368, 369, 372, 386, 388, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 761, 780, 825, 828, 902, 904, 909, 917, 921, 935, 1045, 1046, 1178], "period": [175, 176, 178, 179, 216, 279, 372, 386, 394, 395, 396, 522, 540, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 780, 825, 921, 935, 943, 944, 945, 1050, 1178], "include_boundari": [175, 178, 279, 752, 755, 825], "closedinterv": [175, 176, 178, 179, 216, 279, 418, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 780, 825, 963, 1178], "label": [175, 279, 337, 529, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 714, 752, 775, 825, 881, 1054, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1178], "start_bi": [175, 178, 279, 752, 755, 825], "startbi": [175, 178, 279, 752, 755, 825], "check_sort": [175, 176, 178, 179, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "dynamicgroupbi": [175, 178, 279], "member": [175, 279, 752, 825, 971, 1178], "look": [175, 279, 312, 477, 487, 714, 752, 825, 852], "descript": [175, 279, 752, 825], "ascend": [175, 176, 178, 179, 216, 279, 540, 544, 545, 546, 547, 549, 551, 714, 752, 753, 755, 756, 780, 825], "dynam": [175, 178, 279, 477, 543, 544, 545, 546, 547, 549, 550, 551, 714, 752, 755, 825, 1028], "matter": [175, 176, 178, 179, 190, 216, 218, 219, 237, 279, 540, 602, 603, 714, 752, 753, 755, 756, 780, 825], "interv": [175, 176, 178, 179, 216, 250, 279, 337, 372, 386, 418, 529, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 753, 755, 756, 780, 825, 881, 894, 897, 898, 905, 907, 910, 912, 915, 918, 919, 921, 926, 935, 936, 963, 1054, 1178], "_lower_bound": [175, 178, 279, 752, 755, 825], "_upper_bound": [175, 178, 279, 752, 755, 825], "harder": [175, 178, 279, 752, 755, 825], "inclus": [175, 176, 178, 179, 216, 279, 418, 540, 543, 544, 545, 546, 547, 549, 550, 551, 596, 597, 641, 658, 659, 661, 662, 673, 674, 701, 702, 714, 752, 753, 755, 756, 780, 825, 963, 1124, 1125, 1178], "datapoint": [175, 178, 279, 752, 755, 825], "boundari": [175, 279, 324, 325, 326, 386, 714, 752, 825, 869, 870, 871, 935, 959, 1178], "mondai": [175, 178, 279, 386, 388, 752, 755, 825, 935, 937], "tuesdai": [175, 178, 279, 752, 755, 825], "wednesdai": [175, 178, 279, 752, 755, 825], "thursdai": [175, 178, 279, 752, 755, 825], "fridai": [175, 178, 279, 752, 755, 825], "saturdai": [175, 178, 279, 752, 755, 825], "sundai": [175, 178, 279, 388, 752, 755, 825, 937], "earliest": [175, 178, 279, 371, 372, 386, 606, 608, 660, 752, 755, 825, 920, 921, 935, 1134, 1136], "weekli": [175, 178, 279, 386, 752, 755, 825, 935], "week": [175, 178, 193, 216, 250, 279, 368, 372, 386, 388, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 714, 752, 755, 761, 780, 825, 828, 917, 921, 935, 937], "sorted": [175, 176, 178, 179, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "verifi": [175, 176, 178, 179, 216, 279, 540, 714, 752, 753, 755, 756, 780, 825], "incorrectli": [175, 176, 178, 179, 216, 279, 477, 540, 714, 752, 753, 755, 756, 780, 825], "incorrect": [175, 176, 178, 179, 216, 279, 389, 540, 555, 714, 752, 753, 755, 756, 780, 808, 813, 825, 938, 1081, 1178], "roll": [175, 176, 179, 279, 364, 365, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 648, 691, 692, 714, 752, 753, 756, 825, 913, 914, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1178], "re": [175, 240, 279, 364, 365, 752, 825, 913, 914, 1185], "come": [175, 279, 364, 365, 434, 714, 727, 752, 824, 825, 913, 914, 986, 1178], "1d": [175, 193, 216, 250, 279, 344, 368, 372, 380, 383, 386, 389, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 676, 701, 702, 714, 752, 761, 780, 825, 828, 889, 897, 904, 917, 921, 926, 929, 932, 935], "set_index": [175, 279, 752, 825], "resampl": [175, 279, 752, 825], "reset_index": [175, 279, 752, 825], "though": [175, 279, 710, 752, 825], "unlik": [175, 279, 752, 825], "evenli": [175, 279, 752, 825], "upsampl": [175, 279, 752, 825], "1n": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "1u": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "microsecond": [175, 190, 193, 216, 218, 219, 237, 250, 279, 368, 372, 381, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 660, 661, 662, 663, 700, 701, 702, 714, 752, 761, 775, 780, 825, 828, 917, 921, 930, 935], "1m": [175, 193, 216, 250, 279, 357, 368, 372, 381, 382, 384, 385, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 930, 931, 933, 934, 935], "minut": [175, 193, 216, 250, 279, 368, 372, 383, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 660, 661, 662, 663, 700, 701, 702, 714, 752, 761, 780, 825, 828, 917, 921, 932, 935], "1h": [175, 193, 216, 250, 279, 351, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 896, 898, 917, 921, 935], "hour": [175, 193, 216, 250, 279, 368, 372, 380, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 660, 661, 662, 663, 700, 701, 702, 714, 752, 761, 780, 825, 828, 917, 921, 929, 935], "1w": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "1mo": [175, 193, 216, 250, 279, 346, 364, 365, 368, 371, 372, 379, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 891, 912, 913, 914, 917, 918, 919, 920, 921, 928, 935, 936], "month": [175, 193, 216, 250, 279, 349, 364, 365, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 657, 658, 659, 660, 661, 662, 663, 701, 702, 714, 752, 761, 780, 825, 894, 913, 914, 917, 921, 935], "1q": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "quarter": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "1y": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "1i": [175, 193, 216, 250, 279, 368, 540, 543, 544, 545, 546, 547, 549, 550, 551, 714, 752, 761, 780, 825, 917], "3d12h4m25": [175, 193, 216, 250, 279, 372, 386, 540, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 921, 935], "suffix": [175, 192, 193, 216, 222, 250, 254, 258, 279, 288, 315, 368, 372, 386, 427, 429, 430, 431, 486, 509, 510, 512, 513, 521, 527, 537, 540, 543, 544, 545, 546, 547, 549, 550, 551, 575, 602, 605, 658, 659, 661, 662, 701, 702, 714, 752, 760, 761, 780, 782, 801, 803, 806, 825, 828, 855, 917, 921, 935, 1103, 1133], "_satur": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "satur": [175, 193, 216, 250, 279, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 921, 935], "28": [175, 193, 216, 236, 250, 279, 286, 368, 371, 372, 386, 389, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 752, 761, 780, 825, 917, 920, 921, 935, 938, 1186], "correspond": [175, 193, 216, 240, 250, 279, 356, 368, 372, 386, 489, 532, 539, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 701, 702, 714, 736, 752, 761, 780, 825, 901, 917, 921, 935, 1056, 1063, 1178], "daylight": [175, 193, 216, 250, 279, 343, 351, 368, 372, 386, 540, 543, 544, 545, 546, 547, 549, 550, 551, 658, 659, 661, 662, 663, 701, 702, 714, 752, 761, 780, 825, 896, 917, 921, 935], "10i": [175, 216, 279, 540, 714, 752, 780, 825], "datetime_rang": [175, 279, 344, 346, 357, 364, 365, 368, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 389, 543, 544, 546, 549, 550, 551, 658, 714, 752, 825, 888, 889, 891, 896, 897, 898, 904, 905, 907, 910, 913, 914, 915, 917, 920, 921, 926, 928, 929, 930, 931, 932, 933, 934, 935], "30m": [175, 279, 372, 386, 752, 825, 921, 935], "_lower_boundari": [175, 279, 752, 825], "_upper_boundari": [175, 279, 752, 825], "lower_bound": [175, 279, 324, 326, 418, 714, 752, 825, 869, 871, 963, 1165, 1178], "upper_bound": [175, 279, 324, 325, 418, 477, 714, 752, 825, 869, 870, 963, 1034, 1178], "bys": [175, 279, 752, 825], "int_rang": [175, 248, 265, 279, 641, 752, 766, 813, 825], "2i": [175, 279, 752, 825], "3i": [175, 279, 752, 825], "a_agg_list": [175, 279, 752, 825], "rollinggroupbi": [176, 179, 216, 279], "group_bi": [177, 204, 208, 278, 279, 287, 403, 405, 411, 487, 489, 565, 566, 621, 633, 651, 679, 714, 736, 737, 743, 745, 754, 775, 788, 824, 825, 828], "group_by_dynam": [178, 216, 279, 755, 780, 825], "seed_1": [180, 279, 413, 714, 957, 1178], "seed_2": [180, 279, 413, 714, 957, 1178], "seed_3": [180, 279, 413, 714, 957, 1178], "hash": [180, 279, 714, 1178], "u64": [180, 279, 413, 534, 714, 775, 825, 957, 1178], "10783150408545073287": [180, 279], "1438741209321515184": [180, 279], "10047419486152048166": [180, 279], "2047317070637311557": [180, 279], "ab": [181, 195, 233, 254, 279, 615, 616, 714, 801, 825, 958, 988, 1149, 1178], "grown": [183, 279], "intermedi": [185, 279, 759, 825, 1186], "linear": [185, 210, 271, 279, 417, 443, 492, 530, 547, 648, 649, 688, 714, 759, 776, 819, 825, 962, 994, 1055, 1070, 1178], "333333": [185, 279, 433, 508, 714, 759, 825, 1050, 1074, 1178], "mask": [186, 188, 279, 313, 419, 421, 422, 425, 426, 432, 523, 524, 570, 573, 714, 853, 952, 956, 963, 965, 968, 969, 974, 975, 983, 1051, 1052, 1079, 1098, 1101, 1169, 1178], "visual": [186, 188, 279], "scalar": [189, 196, 217, 279, 554, 639, 676, 679, 714, 985, 1077, 1178], "With": [189, 226, 279, 469, 543, 544, 545, 546, 547, 549, 550, 551, 556, 714, 786, 825, 985, 1020, 1083, 1178], "buffer_s": [190, 279], "fit": [190, 228, 248, 279, 558, 690, 714, 1085, 1086, 1178], "signific": [190, 196, 279, 293, 489, 714, 1036, 1178], "4x": [190, 279], "materialis": [190, 191, 217, 218, 219, 279], "rows_by_kei": [190, 218, 279], "awar": [190, 218, 219, 237, 279, 745, 825, 1136], "iter_row": [191, 217, 218, 219, 279], "17_500": [191, 279], "klmnoopqrstuvwxyz": [191, 279], "__name__": [191, 279], "7500": [191, 279], "15_000": [191, 279], "record_batch": [191, 279], "to_arrow": [191, 279, 1178], "to_batch": [191, 279], "date32": [191, 279], "large_str": [191, 235, 241, 279], "15000": [191, 279], "2500": [191, 279], "left_on": [192, 193, 249, 279, 760, 761, 798, 825], "right_on": [192, 193, 249, 279, 760, 761, 798, 825], "_right": [192, 193, 279, 760, 761, 825], "joinvalid": [192, 279, 760, 825], "semi": [192, 279, 760, 825], "anti": [192, 279, 760, 813, 825, 1079, 1080, 1178], "cross": [192, 279, 386, 760, 825, 935], "many_to_mani": [192, 279, 760, 825], "one_to_on": [192, 279, 760, 825], "one_to_mani": [192, 279, 760, 825], "many_to_on": [192, 279, 760, 825], "join_asof": [192, 279, 760, 825], "other_df": [192, 279], "by_left": [193, 279, 761, 825], "by_right": [193, 279, 761, 825], "asofjoinstrategi": [193, 279, 761, 825], "allow_parallel": [193, 279, 760, 761, 825], "force_parallel": [193, 279, 760, 761, 825], "asof": [193, 279, 761, 825], "rather": [193, 279, 500, 529, 539, 614, 714, 761, 825, 1054, 1063, 1142, 1178], "asof_join": [193, 279], "distanc": [193, 279, 761, 825, 959, 1178], "plan": [193, 194, 279, 732, 736, 739, 743, 750, 760, 761, 777, 784, 788, 805, 825], "forc": [193, 196, 265, 279, 760, 761, 813, 825, 1036, 1178], "gdp": [193, 279, 761, 825], "2016": [193, 279, 761, 825], "2017": [193, 279, 761, 825], "2018": [193, 279, 371, 761, 825, 920], "2019": [193, 279, 761, 825], "jan": [193, 279, 761, 825], "1st": [193, 279, 761, 825], "4164": [193, 279, 761, 825], "4411": [193, 279, 761, 825], "4566": [193, 279, 761, 825], "4696": [193, 279, 761, 825], "set_sort": [193, 216, 250, 279, 540, 714, 761, 780, 825, 1178], "popul": [193, 279, 761, 825], "12th": [193, 279, 761, 825], "82": [193, 279, 761, 825], "66": [193, 249, 279, 550, 634, 714, 761, 798, 825, 1070, 1178], "83": [193, 279, 761, 825], "52": [193, 254, 279, 387, 552, 714, 761, 801, 825], "request": [194, 279], "describe_plan": [194, 279], "unoptim": [194, 279], "describe_optimized_plan": [194, 279], "show_graph": [194, 279, 825], "un": [194, 279], "graphviz": [194, 279, 788, 825], "much": [196, 248, 265, 279, 336, 475, 489, 582, 583, 679, 714, 813, 880, 1026, 1036, 1110, 1111, 1178], "_significantly_": [196, 265, 279, 1036, 1178], "intens": [196, 265, 279, 521, 714, 1036, 1178], "materi": [196, 265, 279, 736, 775, 813, 825, 828, 1036, 1178], "parallelis": [196, 265, 279, 1036, 1178], "achiev": [196, 265, 279, 489, 583, 714, 881, 1036, 1054, 1111, 1178], "best": [196, 265, 279, 489, 714, 1036, 1178], "black": [196, 279, 312, 314, 315, 316], "arbitrarili": [196, 279], "rearrang": [196, 279], "transform": [196, 279, 487, 610, 612, 613, 714], "lru_cach": [196, 279, 489, 714, 1036, 1178], "column_1": [196, 245, 279], "axi": [197, 198, 200, 202, 232, 279, 642, 643, 770, 825], "null_strategi": [198, 232, 279], "nullstrategi": [198, 232, 279], "propag": [198, 232, 279, 393, 514, 515, 517, 569, 714, 1045, 1046, 1097, 1178], "spam": [198, 279, 578, 1106], "id_var": [200, 279, 770, 825], "value_var": [200, 279, 770, 825], "variable_nam": [200, 279, 770, 825], "value_nam": [200, 279, 770, 825], "unpivot": [200, 279, 770, 825], "massag": [200, 279, 770, 825], "measur": [200, 279, 770, 825], "merg": [201, 279, 771, 825], "caller": [201, 279, 477, 766, 771, 808, 813, 825], "respons": [201, 279, 771, 825], "steve": [201, 279, 771, 825], "elis": [201, 279, 771, 825], "bob": [201, 279, 771, 825], "ag": [201, 279, 771, 825], "44": [201, 279, 340, 714, 771, 825], "anna": [201, 279, 771, 825], "megan": [201, 279, 771, 825], "thoma": [201, 279, 771, 825], "what": [204, 279, 1159, 1168, 1178], "pack": [204, 279], "expr_unique_subset": [204, 279], "df_nuniqu": [204, 279], "df_agg_nuniqu": [204, 279], "include_kei": [206, 219, 279], "offer": [207, 279, 525, 714, 774, 825], "fulli": [207, 220, 279], "cast_str_to_int": [207, 279, 774, 825], "col_nam": [207, 279, 774, 825], "tdf": [207, 279, 774, 825], "aggregate_funct": [208, 279], "pivotagg": [208, 279], "sort_column": [208, 279], "section": [208, 279, 570, 577, 578, 591, 658, 659, 661, 662, 701, 702, 1098, 1105, 1106, 1119], "predefin": [208, 279], "predict": [208, 211, 250, 279], "transpos": [208, 279], "discoveri": [208, 279], "col1": [208, 245, 279, 825, 1186], "col2": [208, 245, 279, 825, 1186], "col3": [208, 279, 1186], "tanh": [208, 279, 714, 1178], "998347": [208, 279], "964028": [208, 279], "999954": [208, 279], "unique_column_valu": [208, 279], "interpol": [210, 271, 279, 402, 492, 530, 547, 688, 714, 776, 819, 825, 1055, 1070, 1178], "rollinginterpolationmethod": [210, 271, 279, 530, 547, 688, 714, 776, 819, 825, 1055, 1070, 1178], "midpoint": [210, 271, 279, 530, 547, 688, 714, 776, 819, 825, 1055, 1070, 1178], "t_0": [216, 279, 540, 543, 544, 545, 546, 547, 549, 550, 551, 714, 780, 825], "t_1": [216, 279, 540, 543, 544, 545, 546, 547, 549, 550, 551, 714, 780, 825], "t_n": [216, 279, 540, 543, 544, 545, 546, 547, 549, 550, 551, 714, 780, 825], "43": [216, 279, 335, 540, 550, 714, 780, 825], "strptime": [216, 279, 371, 540, 714, 780, 825, 920], "2d": [216, 240, 279, 368, 540, 676, 714, 780, 825, 888, 894], "sum_a": [216, 279, 540, 714, 780, 825], "min_a": [216, 279, 540, 714, 780, 825], "max_a": [216, 279, 540, 714, 780, 825], "by_pred": [217, 279], "accord": [217, 279, 488, 529, 658, 659, 661, 662, 701, 702, 714, 901, 1054, 1178], "mutual": [217, 279], "exclus": [217, 279, 634, 641, 673, 674, 714], "clariti": [217, 279], "toomanyrowsreturnederror": [217, 279, 726], "norowsreturnederror": [217, 279, 726], "inherit": [217, 279], "rowserror": [217, 279, 726], "high": [219, 279, 529, 714, 1054, 1178], "cost": [219, 279], "reoconstruct": [219, 279], "defaultdict": [219, 279], "assum": [219, 279, 765, 766, 808, 813, 825], "with_replac": [220, 279, 464, 553, 714, 1015, 1076, 1178], "ordereddict": [221, 279, 696, 781, 825], "named_expr": [222, 223, 254, 255, 279, 693, 696, 782, 783, 801, 802, 825], "threshold": [222, 279, 782, 825], "set_auto_structifi": [222, 254, 279, 782, 801, 825], "auto_structifi": [222, 254, 279, 782, 801, 825], "is_odd": [222, 279, 782, 825], "_is_odd": [222, 279, 782, 825], "sequenti": [223, 255, 279, 783, 802, 825], "fill_valu": [226, 227, 248, 279, 556, 557, 714, 786, 787, 825, 1083, 1084, 1178], "opposit": [226, 279, 469, 556, 714, 786, 825, 1020, 1083, 1178], "lag": [226, 279, 469, 556, 648, 714, 786, 825, 1020, 1083, 1178], "shift": [227, 279, 339, 447, 522, 557, 648, 714, 787, 825, 883, 998, 1050, 1084, 1178], "shrink": [228, 279, 558, 714, 1085, 1086, 1178], "hold": [228, 279], "ddof": [231, 251, 279, 549, 551, 568, 632, 650, 691, 692, 695, 703, 714, 791, 799, 825, 1072, 1074, 1095, 1167, 1178], "deviat": [231, 279, 395, 549, 568, 695, 714, 791, 825, 944, 1095, 1178], "degre": [231, 251, 279, 531, 549, 551, 568, 632, 643, 650, 691, 692, 695, 703, 714, 791, 799, 825, 1072, 1074, 1095, 1167, 1178], "freedom": [231, 251, 279, 549, 551, 568, 632, 650, 691, 692, 695, 703, 714, 791, 799, 825, 1072, 1074, 1095, 1167, 1178], "divisor": [231, 251, 279, 549, 551, 568, 632, 650, 691, 692, 695, 703, 714, 791, 799, 825, 1072, 1074, 1095, 1167, 1178], "816497": [231, 279], "16a": [232, 279], "27b": [232, 279], "38c": [232, 279], "nth": [234, 279, 598, 622, 714, 794, 825, 1126, 1151, 1178], "mostli": [235, 279, 403, 714], "categoricaltyp": [235, 279], "fruit": [236, 279, 537, 575, 599, 714, 1103, 1127], "car": [236, 279, 537, 714], "beetl": [236, 279, 537, 714], "audi": [236, 279, 537, 714], "300": [236, 279, 1066, 1067, 1069, 1178], "drop_first": [238, 279], "dummi": [238, 279, 1155, 1178], "foo_1": [238, 279], "foo_2": [238, 279], "bar_3": [238, 279], "bar_4": [238, 279], "ham_a": [238, 279], "ham_b": [238, 279], "instantiat": [239, 279, 1157, 1178], "from_repr": [239, 279, 1157, 1178], "df_from_str_repr": [239, 279], "eval": [239, 279, 664, 1157, 1178], "indexord": [240, 279], "fortran": [240, 279], "downstream": [240, 279, 555, 714, 1081, 1178], "applic": [240, 279, 489, 543, 544, 545, 546, 547, 549, 550, 551, 714], "prevent": [240, 279, 288, 334, 335, 433, 508, 619, 714, 825, 878, 879, 1148, 1178], "reshap": [240, 279, 451, 714, 1002, 1178], "ll": [240, 279], "u1": [240, 279], "f4": [240, 279], "view": [240, 279, 489, 714, 1159, 1178], "recarrai": [240, 279], "rec": [240, 279], "use_pyarrow_extension_arrai": [241, 279, 1160, 1178], "extens": [241, 279, 1160, 1178], "trigger": [241, 279, 714, 1160, 1178], "sent": [241, 279, 1159, 1160, 1178], "pandas_df1": [241, 279], "pandas_df2": [241, 279], "pandas_df2_pa": [241, 279], "na": [241, 279, 599, 1160, 1178], "four": [243, 279], "five": [243, 279, 1186], "bottom_k": [244, 279, 626, 714, 795, 825, 1162, 1178], "include_head": [245, 279], "header_nam": [245, 279], "column_nam": [245, 279], "perhap": [245, 279], "column_2": [245, 279], "name_gener": [245, 279], "base_nam": [245, 279], "my_column_": [245, 279], "my_column_0": [245, 279], "my_column_1": [245, 279], "my_column_2": [245, 279], "new_id": [245, 279], "uniquekeepstrategi": [246, 279, 796, 825], "kept": [246, 279, 796, 825], "decompos": [247, 279, 797, 825], "t_a": [247, 279, 797, 825], "t_b": [247, 279, 797, 825], "t_c": [247, 279, 797, 825], "t_d": [247, 279, 797, 825], "womp": [247, 279, 797, 825], "t_": [247, 279, 797, 825], "t_struct": [247, 279, 797, 825], "step": [248, 279, 641, 673, 674], "unstackdirect": [248, 279], "pivot": [248, 279], "phase": [248, 279], "subject": [248, 279], "ascii_uppercas": [248, 279], "h": [248, 279, 286, 375, 378, 558, 606, 608, 611, 714, 1134, 1136, 1139], "x_0": [248, 279, 394, 395, 396, 714, 943, 944, 945, 1178], "x_1": [248, 279], "y_0": [248, 279, 394, 395, 396, 714, 943, 944, 945, 1178], "y_1": [248, 279], "z_0": [248, 279], "z_1": [248, 279], "include_nul": [249, 279, 798, 825], "ignore_nul": [249, 279, 289, 291, 394, 395, 396, 569, 635, 637, 714, 832, 833, 943, 944, 945, 1097, 1168, 1178], "syntact": [249, 279, 635, 637, 655, 665, 666, 670, 675, 680, 684, 687, 688, 693, 697, 705, 798, 825, 1094, 1178], "sugar": [249, 279, 635, 637, 655, 665, 666, 670, 675, 680, 684, 687, 688, 693, 697, 705, 798, 825, 1094, 1178], "coalesc": [249, 279, 606, 798, 825, 1134], "400": [249, 279, 798, 825, 1066, 1067, 1069, 1178], "600": [249, 279, 798, 825, 828], "700": [249, 279, 798, 825], "new_df": [249, 279, 798, 825], "time_column": [250, 279], "frequenc": [250, 279], "date_rang": [250, 279, 349, 352, 369, 377, 388, 894, 912, 918, 919, 936, 937], "forward_fil": [250, 279, 332, 335, 714], "varianc": [251, 279, 396, 434, 551, 632, 703, 714, 799, 825, 945, 986, 1074, 1167, 1178], "grow": [252, 279], "not_": [254, 279, 428, 714, 801, 825, 1178], "not_c": [254, 279, 801, 825], "diff": [254, 279, 379, 380, 381, 382, 383, 384, 385, 465, 714, 801, 825, 928, 929, 930, 931, 932, 933, 934, 1016, 1178], "_diff": [254, 279, 801, 825], "row_nr": [256, 279, 488, 543, 544, 546, 549, 550, 551, 714, 804, 825, 1080, 1178], "named_agg": [258, 806], "_sum": [258, 806], "_mean_squar": [258, 806], "b_sum": [258, 806], "c_mean_squar": [258, 806], "sub": [260, 265, 306, 307, 308, 714, 847, 848, 849], "map_group": [260, 639, 808], "deem": [261, 651, 809], "nr": [263, 273, 811, 821], "triangl": [265, 813], "group_df": [265, 813], "maxim": [266, 301, 714, 814, 842, 1178], "833333": [267, 815], "minim": [269, 302, 442, 558, 566, 714, 817, 843, 993, 1040, 1085, 1178], "overview": [279, 714, 726, 825, 1178, 1186], "frameinittyp": [279, 825], "entri": [279, 825, 1185], "mydatafram": 279, "df4": 279, "df5": 279, "df6": 279, "approx_uniqu": [279, 825], "corr": 279, "drop_in_plac": 279, "drop_nul": [279, 341, 714, 825, 885, 1178], "estimated_s": [279, 1178], "explod": [279, 405, 521, 536, 714, 825, 1060, 1178], "find_idx_by_nam": 279, "fold": [279, 498, 647, 653, 654, 689], "frame_equ": [279, 386], "group_by_rol": [279, 825], "groupby_dynam": [279, 825], "groupby_rol": [279, 825], "hash_row": 279, "hstack": 279, "insert_at_idx": 279, "is_dupl": [279, 714, 1178], "is_empti": [279, 1178], "is_uniqu": [279, 714, 1178], "iter_slic": 279, "melt": [279, 825], "merge_sort": [279, 825], "n_uniqu": [279, 714, 1178], "pipe": [279, 714, 825], "quantil": [279, 529, 547, 714, 825, 1054, 1070, 1178], "replace_at_idx": 279, "select_seq": [279, 825], "shift_and_fil": [279, 714, 825, 1178], "shrink_to_fit": [279, 1178], "take_everi": [279, 714, 825, 1178], "to_dummi": [279, 1178], "to_numpi": [279, 487, 714, 1178], "to_panda": [279, 1178], "to_struct": [279, 578], "unnest": [279, 337, 529, 538, 578, 579, 597, 598, 616, 714, 825, 881, 1028, 1054, 1062, 1125, 1126, 1178], "unstack": 279, "with_columns_seq": [279, 825], "write_avro": 279, "write_databas": 279, "write_delta": 279, "write_excel": 279, "write_ipc_stream": 279, "write_json": [279, 825], "write_parquet": 279, "cumprod": [286, 714, 1178], "ghi": [286, 578, 714, 828, 1106], "94": [287, 714], "to_uppercas": [288, 512, 579, 714], "confus": [289, 427, 429, 714], "kleen": [289, 291, 635, 637, 714, 832, 833, 1178], "bitwis": [290, 520, 634, 635, 636, 637, 638, 714], "upcast": [292, 714], "skip_nul": [293, 489, 714, 835, 1036, 1178], "pass_nam": [293, 489, 714], "mapelementsstrategi": [293, 489, 714], "thread_loc": [293, 489, 714], "map_el": [293, 487, 634, 714, 835, 1178], "unknown": [293, 488, 489, 577, 676, 714, 1105], "stage": [293, 714], "code": [293, 312, 314, 315, 316, 489, 555, 714, 745, 763, 825, 1081, 1178], "gil": [293, 489, 714], "invers": [295, 296, 297, 298, 299, 300, 714, 836, 837, 838, 839, 840, 841, 1178], "cosin": [295, 296, 327, 328, 487, 714, 836, 837, 873, 874, 1178], "570796": [295, 297, 714, 836, 838, 1178], "hyperbol": [296, 298, 300, 328, 562, 624, 714, 837, 839, 841, 874, 1090, 1153, 1178], "sine": [297, 298, 487, 561, 562, 714, 838, 839, 1089, 1090, 1178], "881374": [298, 714, 839, 1178], "tangent": [299, 300, 623, 624, 714, 840, 841, 1152, 1153, 1178], "785398": [299, 642, 643, 714, 840, 1178], "arg_wher": [304, 714], "i8": [309, 476, 558, 687, 690, 705, 714, 850, 883, 1027, 1061, 1165, 1178], "seen": [311, 408, 714], "substr": [312, 315, 316, 570, 575, 591, 592, 596, 597, 598, 599, 828, 852, 855, 856, 1098, 1103, 1119, 1120, 1124, 1125, 1126, 1127], "ends_with": [312, 316, 570, 599, 828, 1127], "yellow": [312, 314, 315, 316], "x00": [312, 314, 315, 316], "xff": [312, 314, 315, 316], "contains_with_lit": 312, "contains_with_expr": 312, "transferencod": [313, 314, 573, 574, 853, 854, 1101, 1102], "hex": [313, 314, 573, 574, 590, 853, 854, 1101, 1102, 1118], "base64": [313, 314, 573, 574, 853, 854, 1101, 1102], "code_encoded_hex": 314, "000000": 314, "ffff00": 314, "0000ff": 314, "anywher": [315, 316, 606, 607, 608, 1134, 1135, 1136], "ends_with_lit": 315, "ends_with_expr": 315, "starts_with_lit": 316, "starts_with_expr": 316, "complex": [317, 336, 626, 714, 857, 880, 1162, 1178], "frac": [317, 394, 395, 396, 563, 626, 714, 857, 943, 944, 945, 1091, 1162, 1178], "supersed": [318, 714], "to_fram": [320, 352, 372, 377, 386, 606, 881, 1054, 1079, 1080, 1125, 1126, 1134, 1178], "categoricalord": [321, 862], "lexic": [321, 828, 862, 864], "259921": [322, 714, 865, 1178], "587401": [322, 714], "numericliter": [324, 325, 326, 714, 869, 870, 871, 1178], "temporalliter": [324, 325, 326, 714, 869, 870, 871, 1178], "outsid": [324, 714, 869, 1178], "clip": [325, 326, 714, 870, 871, 1178], "543081": [328, 714, 874, 1178], "cotang": [329, 714, 875, 1178], "cumul": [331, 332, 333, 334, 335, 653, 654, 655, 656, 714, 876, 877, 878, 879, 1178], "a_revers": [331, 332, 333, 334, 335, 486, 509, 511, 537, 618, 714], "value_cummax": [332, 714], "value_cummax_all_fil": [332, 714], "value_cumsum": [335, 714], "value_cumsum_all_fil": [335, 714], "min_period": [336, 394, 395, 396, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 691, 692, 714, 880, 943, 944, 945, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1178], "slide": [336, 714, 880, 1178], "slot": [336, 339, 447, 714, 880, 883, 998, 1178], "realli": [336, 714, 880, 1178], "visit": [336, 714, 880, 1178], "left_clos": [337, 529, 714, 881, 1054, 1178], "include_break": [337, 529, 714, 881, 1054, 1178], "bin": [337, 529, 590, 634, 707, 714, 881, 959, 1054, 1118, 1172, 1178], "discret": [337, 339, 391, 447, 465, 529, 714, 881, 883, 941, 959, 998, 1016, 1054, 1178], "plu": [337, 482, 714, 881, 1033, 1054, 1178], "endpoint": [337, 529, 543, 544, 545, 546, 547, 549, 550, 551, 714, 881, 1054, 1178], "observ": [337, 394, 395, 396, 529, 714, 881, 943, 944, 945, 1054, 1178], "fall": [337, 529, 539, 714, 881, 963, 1054, 1063, 1178], "qcut": [337, 714, 881, 1178], "breakpoint": [337, 529, 714, 881, 1054, 1178], "brk": [337, 529, 714], "foo_bin": [337, 529, 714], "radian": [338, 642, 714], "pi": [338, 714, 873, 875, 1089, 1152, 1178], "720": [338, 531, 714], "540": [338, 531, 714], "360": [338, 531, 714], "180": [338, 531, 714], "null_behavior": [339, 447, 714, 883, 998, 1178], "nullbehavior": [339, 447, 714, 883, 998, 1178], "drop_nan": [342, 714, 886, 1178], "utc": [343, 346, 351, 371, 606, 608, 828, 888, 891, 896, 920, 1134, 1136], "usual": [343, 888], "vari": [343, 888, 1186], "rare": [343, 888], "countri": [343, 888], "switch": [343, 888], "samoa": [343, 888], "apia": [343, 888], "did": [343, 888], "2011": [343, 888], "dst_offset": [343, 386, 888, 935], "2012": [343, 888], "replace_time_zon": [343, 351, 892, 893, 925], "pacif": [343, 888], "11h": [343, 888], "13h": [343, 888], "lose": [344, 889], "2001": [344, 349, 352, 353, 355, 361, 363, 368, 369, 370, 372, 377, 386, 387, 388, 389, 543, 544, 546, 549, 550, 551, 606, 714, 828, 889, 894, 897, 898, 900, 902, 903, 904, 905, 907, 909, 910, 912, 915, 917, 918, 919, 921, 926, 935, 936, 937, 938, 939, 1134], "time_unit_m": [344, 889], "time_unit_n": [344, 889], "naiv": [345, 890, 1136], "compon": [345, 373, 606, 608, 663, 890, 922, 1134, 1136], "resolv": 345, "tm": [345, 828], "456000": [345, 890], "101000": 345, "456": [345, 828, 890, 1156, 1178], "07": [345, 371, 372, 386, 606, 658, 661, 669, 828, 890, 920, 1134], "101": [345, 590, 1118, 1186], "d1": 345, "d2": 345, "d3": 345, "europ": [346, 351, 371, 386, 891, 896, 920, 935], "london": [346, 351, 371, 386, 891, 896, 920, 935], "gmt": [346, 351, 371, 386, 891, 896, 920, 935], "bst": [346, 351, 371, 386, 891, 896, 920, 935], "weekdai": [349, 369], "ordinal_dai": [349, 388], "day_of_month": [349, 369, 388], "day_of_year": [349, 369, 388], "356": [349, 369, 388], "357": [349, 369, 388], "358": [349, 369, 388], "359": [349, 369, 388], "total_dai": [350, 895], "base_utc_offset": [351, 896], "0m": [351, 896], "epochtimeunit": [352, 669, 897], "unix": [352, 669, 897], "epoch_n": [352, 897], "epoch_": [352, 897], "978307200000000": [352, 377, 897, 926], "978307200": [352, 897], "978393600000000": [352, 377, 897, 926], "978393600": [352, 897], "978480000000000": [352, 377, 897, 926], "978480000": [352, 897], "2010": [353, 361, 828], "total_hour": [354, 899], "leap": [355, 368, 900, 917], "2002": [355, 368, 900, 917, 939], "iso": [356, 387, 388, 901, 936, 937], "1977": [356, 390], "1978": [356, 390], "1979": [356, 390], "calendar_year": [356, 390], "1976": [356, 390], "1_001": [357, 381, 382, 384], "002": [357, 381, 382, 384, 663, 930, 931, 933], "003": [357, 381, 382, 384], "3000": 357, "997": [357, 381, 382, 384], "997000": 357, "998": [357, 381, 382, 384], "998000": 357, "999": [357, 381, 382, 384, 828, 1186], "999000": [357, 828], "total_microsecond": [358, 906], "total_millisecond": [360, 908], "total_minut": [362, 911], "think": [364, 365, 913, 914], "vectoris": [364, 365, 913, 914], "tseri": [364, 365, 913, 914], "monthend": [364, 913], "rollforward": [364, 913], "monthbegin": [365, 914], "rollback": [365, 914], "total_nanosecond": [367, 916], "minu": [368, 917], "dictat": [368, 714, 917], "2005": [368, 917], "date_plus_1i": [368, 917], "1y2mo": [368, 917], "date_min": 368, "1998": [368, 917], "1999": [368, 828, 917], "2003": [368, 669, 917], "2004": [368, 917], "2006": [368, 917], "new_dat": 368, "ordin": [369, 532, 714, 918, 1056, 1178], "366": [369, 918], "use_earliest": [371, 386, 606, 608, 660, 920, 935, 1134, 1136], "ambigu": [371, 372, 386, 606, 608, 660, 920, 921, 935, 1134, 1136], "convert_time_zon": [371, 920], "london_timezon": [371, 920], "amsterdam": [371, 920], "london_to_amsterdam": [371, 920], "cet": [371, 920], "cest": [371, 920], "ts_local": [371, 920], "brussel": [371, 920], "half": [372, 394, 395, 396, 714, 921, 943, 944, 945, 1178], "225": [372, 386], "10m": [372, 386, 921, 935], "milli": [373, 922], "micro": [373, 922], "456789": [373, 828, 922], "111110": [373, 922], "765431": [373, 922], "11111": [373, 922], "total_second": [374, 923], "to_str": [375, 924], "datetime_str": [375, 378], "timestamp_n": [377, 926], "timestamp_m": 377, "978307200000": 377, "978393600000": 377, "978480000000": 377, "strftime": [378, 927], "days_diff": 379, "hours_diff": 380, "microseconds_diff": 381, "milliseconds_diff": 382, "minutes_diff": 383, "1440": [383, 932], "nanoseconds_diff": 384, "seconds_diff": 385, "offset_bi": [386, 663, 935], "15m": [386, 935], "ambiguous_map": 386, "map_dict": [386, 487, 714, 935, 1178], "53": [387, 936], "time_unit_u": 389, "32971": [389, 938], "32974": [389, 938], "32976": [389, 938], "iso_year": 390, "718281828459045": [391, 480, 714, 941, 1031, 1178], "pk": [391, 714, 941, 1178], "probabl": [391, 529, 714, 941, 1054, 1178], "459148": [391, 714], "754888": [391, 714], "eq": [393, 714, 1178], "span": [394, 395, 396, 714, 943, 944, 945, 1178], "half_lif": [394, 395, 396, 714, 943, 944, 945, 1178], "adjust": [394, 395, 396, 563, 714, 943, 944, 945, 1091, 1178], "exponenti": [394, 395, 396, 398, 526, 714, 943, 944, 945, 946, 1178], "weight": [394, 395, 396, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 563, 714, 943, 944, 945, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1091, 1178], "decai": [394, 395, 396, 714, 943, 944, 945, 1178], "term": [394, 395, 396, 714, 943, 944, 945, 1178], "mass": [394, 395, 396, 714, 943, 944, 945, 1178], "gamma": [394, 395, 396, 714, 943, 944, 945, 1178], "foral": [394, 395, 396, 714, 943, 944, 945, 1178], "geq": [394, 395, 396, 714, 943, 944, 945, 1178], "theta": [394, 395, 396, 714, 943, 944, 945, 1178], "life": [394, 395, 396, 714, 943, 944, 945, 1178], "exp": [394, 395, 396, 714, 943, 944, 945, 1178], "ln": [394, 395, 396, 714, 943, 944, 945, 1178], "smooth": [394, 395, 396, 714, 943, 944, 945, 1178], "factor": [394, 395, 396, 625, 714, 943, 944, 945, 1161, 1178], "leq": [394, 395, 396, 714, 943, 944, 945, 1178], "imbal": [394, 395, 396, 714, 943, 944, 945, 1178], "ew": [394, 395, 396, 714, 943, 944, 945, 1178], "w_i": [394, 395, 396, 714, 943, 944, 945, 1178], "recurs": [394, 395, 396, 714, 943, 944, 945, 1178], "y_t": [394, 395, 396, 714, 943, 944, 945, 1178], "y_": [394, 395, 396, 714, 943, 944, 945, 1178], "x_t": [394, 395, 396, 714, 943, 944, 945, 1178], "x_2": [394, 395, 396, 714, 943, 944, 945, 1178], "428571": [394, 714, 943, 1178], "bia": [395, 396, 434, 548, 563, 714, 944, 945, 986, 1071, 1091, 1178], "unbias": [395, 396, 714, 944, 945, 1178], "963624": [395, 714, 944, 1178], "928571": [396, 714, 945, 1178], "wildcard": [397, 653, 654, 667, 689, 714], "regex": [397, 495, 570, 571, 572, 575, 577, 578, 579, 591, 592, 599, 665, 714, 828, 1098, 1099, 1100, 1103, 1105, 1106, 1107, 1119, 1120, 1127], "aa": [397, 570, 665, 714, 1098], "ba": [397, 599, 665, 714, 828], "cc": [397, 665, 714], "718282": [398, 714], "389056": [398, 714], "54": [398, 714, 1186], "59815": [398, 714], "expand": [399, 494, 495, 535, 714, 828, 947, 1178], "pythonliter": [400, 714, 949, 1037, 1040, 1178], "extrem": [400, 542, 714, 949, 1065, 1178], "group_col": [403, 633, 714], "g1": [403, 633, 714], "g2": [403, 633, 714], "lt": [403, 633, 714, 1178], "gte": [403, 633, 714], "exprlistnamespac": [405, 714], "divis": [407, 627, 714], "truediv": [407, 714], "9774092659964970114": [413, 714], "13614470193936745724": [413, 714], "1101441246220388612": [413, 714], "11638928888656214026": [413, 714], "13382926553367784577": [413, 714], "cumsum": [416, 617, 656, 714, 758, 825, 985, 1178], "interpolationmethod": [417, 714, 962, 1178], "regrid": [417, 714], "grid": [417, 714], "df_original_grid": [417, 714], "grid_point": [417, 714], "df_new_grid": [417, 714], "conflat": [418, 714], "finit": [420, 627, 650, 714, 967, 1178], "occurr": [421, 422, 425, 426, 631, 714, 959, 968, 969, 974, 975, 1166, 1178], "is_first_distinct": [421, 714, 968, 1178], "optional_memb": [423, 714, 971, 1178], "infinit": [424, 627, 714, 972, 1178], "is_last_distinct": [425, 714, 974, 1178], "_isnan": [427, 714], "b_isnan": [427, 714], "negat": [428, 518, 714, 1048, 1178], "_is_not_nan": [429, 714], "b_is_not_nan": [429, 714], "_not_nul": [430, 714], "a_not_nul": [430, 714], "b_not_nul": [430, 714], "_isnul": [431, 714], "a_isnul": [431, 714], "b_isnul": [431, 714], "chain": [433, 508, 510, 511, 512, 513, 527, 618, 704, 714], "undo": [433, 501, 508, 510, 511, 527, 618, 714], "fisher": [434, 563, 714, 986, 1091, 1178], "fourth": [434, 714, 986, 1178], "subtract": [434, 617, 714, 986, 1178], "distribut": [434, 563, 714, 986, 1091, 1178], "elimin": [434, 714, 986, 1178], "bias": [434, 563, 714, 986, 1091, 1178], "scipi": [434, 563, 714, 986, 1091, 1178], "stat": [434, 563, 714, 986, 1091, 1178], "153061": [434, 714], "sublist": [441, 442, 444, 447, 452, 453, 454, 456, 457, 465, 470, 474, 475, 477, 971, 992, 993, 995, 998, 1003, 1004, 1005, 1007, 1008, 1016, 1021, 1025, 1026, 1028, 1178], "membership": [444, 995], "listcol": 446, "number_of_two": 446, "set_differ": [448, 999], "blindli": [450, 1001], "worth": [450, 1001], "enough": [450, 563, 714, 1001, 1091, 1178], "concat_list": [450, 664, 1001], "rank": [450, 650, 664, 714, 1001, 1178], "exprnamespac": 451, "flat": [451, 536, 714, 1002, 1060, 1178], "set_intersect": [455, 1006], "x_y": 456, "th": [465, 563, 714, 1016, 1091, 1178], "symmetr": [467, 473, 1018, 1024], "sdiff": 467, "taken": [470, 595, 1021, 1123], "set_symmetric_differ": [473, 1024], "null_on_oob": [475, 1026], "cheaper": [475, 1026], "n_field_strategi": [477, 1028], "tostructstrategi": [477, 1028], "first_non_nul": [477, 1028], "max_width": [477, 1028], "field_0": [477, 1028], "field_1": [477, 1028], "field_n": [477, 1028], "pre": [477, 489, 529, 687, 690, 705, 714, 1054, 1178], "n0": 477, "n1": 477, "set_union": [478, 1029], "logarithm": [480, 481, 482, 714, 1031, 1032, 1033, 1178], "584963": [480, 714], "30103": [481, 714], "60206": [481, 714], "natur": [482, 714, 1033, 1178], "693147": [482, 714], "098612": [482, 714], "386294": [482, 714], "lowest": [483, 714], "9223372036854775808": [483, 714], "agg_list": [485, 487, 714], "map_batch": [485, 677, 714, 765, 825], "b_revers": [486, 509, 511, 537, 618, 714], "rstrip": [486, 509, 714], "_revers": [486, 509, 511, 537, 618, 714], "whole": [487, 565, 566, 577, 714, 813, 825, 1105], "elementwis": [487, 541, 542, 543, 544, 546, 550, 714, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1178], "third": [487, 714], "parti": [487, 714], "book": [487, 714], "bug": [487, 489, 714, 765, 766, 808, 813, 825, 1036, 1178], "func": [487, 714], "argmax": [487, 714], "remap": [488, 714, 1035, 1178], "lookup": [488, 710, 714, 1035, 1178], "country_code_dict": [488, 714], "ca": [488, 714], "canada": [488, 714], "de": [488, 714], "germani": [488, 714], "fr": [488, 714], "franc": [488, 714], "country_cod": [488, 714], "rest": [488, 714], "discourag": [489, 714], "loop": [489, 714], "a_times_2": [489, 714], "tip": [489, 714], "again": [489, 714], "behav": [489, 602, 603, 714, 834, 1178], "exprmetanamespac": [493, 496], "foo_bar2": [493, 496], "raise_if_undetermin": 497, "computeerror": [497, 590, 726, 1118], "e_filt": [497, 499], "e_sum_ov": [497, 499], "e_sum_slic": [497, 499], "tree": 500, "modulu": [504, 714], "xlog2": [506, 526, 714], "reverse_": [510, 527, 714], "reverse_a": [510, 527, 714], "reverse_b": [510, 527, 714], "lowercas": [512, 610, 1138], "uppercas": [513, 613, 1141], "to_lowercas": 513, "poison": [514, 515, 714, 1045, 1046, 1178], "nanmax": [514, 515, 714, 1045, 1046, 1178], "inequ": [516, 714], "ne": [517, 714, 1178], "more_expr": [521, 644, 647, 648, 649, 714], "mapping_strategi": [521, 714], "windowmappingstrategi": [521, 714], "group_to_row": [521, 714], "outcom": [521, 714], "group_dtyp": [521, 714], "warn": [521, 714], "flatten": [521, 714], "_max": [521, 714], "c_max": [521, 714], "_min": [521, 714], "c_min": [521, 714], "percent": [522, 714, 1050, 1178], "090909": [522, 714], "peak": [523, 524, 714, 1051, 1052, 1178], "extract_numb": [525, 714], "digit": [525, 552, 578, 714, 1075, 1100, 1106, 1178, 1186], "scale_negative_even": [525, 714], "expon": [526, 714, 1178], "allow_dupl": [529, 714, 1054, 1178], "duplicateerror": [529, 714, 726, 1054, 1178], "happen": [529, 714, 1054, 1178], "cut": [529, 714, 1054, 1178], "566371": [531, 714], "424778": [531, 714], "283185": [531, 714], "141593": [531, 714, 836, 1178], "rankmethod": [532, 714, 1056, 1178], "ti": [532, 714, 1056, 1178], "competit": [532, 714, 1056, 1178], "highest": [532, 630, 650, 714, 825, 1056, 1178], "immedi": [532, 641, 645, 658, 659, 661, 662, 673, 674, 687, 690, 696, 701, 702, 705, 714, 1056, 1178], "safe": [534, 714, 1058, 1136, 1159, 1178], "fruits_revers": [537, 714], "cars_revers": [537, 714], "rle": [539, 714, 1063, 1178], "themselv": [539, 714, 1063, 1178], "a_r": [539, 714], "ab_r": [539, 714], "window_s": [541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 691, 692, 714, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1178], "rolling_map": [541, 714, 1064, 1178], "multipli": [541, 542, 543, 544, 546, 549, 550, 551, 714, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1178], "rolling_sum": [542, 714, 1065, 1178], "nansum": [542, 714, 1065, 1178], "travers": [543, 544, 546, 550, 714, 1066, 1067, 1069, 1072, 1073, 1074, 1178], "vector": [543, 544, 546, 550, 714, 1066, 1067, 1069, 1072, 1073, 1074, 1178], "5h": [543, 544, 545, 546, 547, 549, 550, 551, 714], "df_tempor": [543, 544, 546, 549, 550, 551, 714], "closur": [543, 544, 549, 550, 551, 714], "rolling_row_max": [543, 714], "2h": [543, 544, 546, 549, 550, 551, 714], "rolling_row_mean": [544, 714], "rolling_row_min": [546, 714], "625": [547, 714], "skew": [548, 714, 1071, 1178], "381802": [548, 714, 1071, 1178], "47033": [548, 714, 1071, 1178], "38180177416060584": [548, 714, 1071, 1178], "47033046033698594": [548, 714, 1071, 1178], "433013": [549, 714, 791, 825], "rolling_row_std": [549, 714], "rolling_row_sum": [550, 714], "39": [550, 669, 714], "63": [550, 714], "69": [550, 714], "1875": [551, 714, 799, 825], "rolling_row_var": [551, 714], "searchsortedsid": [554, 714, 1077, 1178], "leftmost": [554, 714, 1077, 1178], "rightmost": [554, 714, 1077, 1178], "six": [554, 714], "extrema": [558, 714, 1085, 1178], "112": [558, 714, 1186], "129": [558, 714], "8589934592": [558, 714], "1073741824": [558, 714], "175201": [562, 714, 1090, 1178], "unimod": [563, 714, 1091, 1178], "skewtest": [563, 714, 1091, 1178], "speak": [563, 714, 1091, 1178], "g_1": [563, 714, 1091, 1178], "m_3": [563, 714, 1091, 1178], "m_2": [563, 714, 1091, 1178], "m_i": [563, 714, 1091, 1178], "sum_": [563, 714, 1091, 1178], "texttt": [563, 714, 1091, 1178], "k_3": [563, 714, 1091, 1178], "k_2": [563, 714, 1091, 1178], "sqrt": [563, 642, 643, 714, 1091, 1178], "343622": [563, 714], "value1": [566, 714], "value2": [566, 714], "attain": [566, 714], "414214": [567, 714, 1094, 1178], "sensit": [570, 578, 591, 1098, 1106, 1119], "ilmsuxu": [570, 577, 578, 591, 1098, 1105, 1106, 1119], "default_match": 570, "insensitive_match": 570, "crab": [570, 1098], "dog": [570, 610, 613, 649, 1098, 1138, 1141], "rab": [570, 1098], "success": [571, 572, 578, 1099, 1100, 1106], "overlap": [571, 572, 578, 1099, 1100, 1106], "123": [572, 578, 592, 614, 828, 1100, 1106, 1120, 1142, 1156, 1178], "bla": [572, 578, 1100, 1106], "asd": [572, 578, 1100, 1106], "678": [572, 578, 1100, 1106], "910t": [572, 578, 1100, 1106], "count_digit": 572, "dbc": [572, 1100], "3xy": [572, 1100], "1zy3": [572, 1100], "666f6f": [574, 1102], "626172": [574, 1102], "mango": [575, 599, 1103, 1127], "has_suffix": 575, "le": [575, 714, 1178], "nu": 575, "group_index": [577, 1105], "captur": [577, 579, 1105, 1107], "nthose": [577, 1105], "nodd": [577, 1105], "nthe": [577, 1105], "vote": [577, 579, 1105, 1107], "ballon_dor": [577, 579, 1105, 1107], "404": [577, 579, 1105, 1107], "ref": [577, 579, 1105, 1107], "candid": [577, 579, 1105, 1107], "messi": [577, 579, 1105, 1107], "ronaldo": [577, 1105], "haystack": [578, 1106], "email": [578, 1106], "real": [578, 1106], "some_account": [578, 1106], "somewher": [578, 1106], "net": [578, 1106], "jkl": [578, 1106], "uvw": [578, 1106], "co": [578, 714, 1106, 1178], "uk": [578, 1106], "address": 578, "xi": [578, 1106], "insensit": [578, 591, 828, 1098, 1106, 1119], "char": [578, 1106], "quantifi": [578, 1106], "email_part": [578, 1106], "extracted_nr": 578, "910": [578, 1106], "unnam": [579, 1107], "weghorst": [579, 1107], "candi": 579, "json_path_match": [580, 1108], "jsonpath": [580, 581, 1108, 1109], "json_path": [581, 1109], "json_val": [581, 1109], "len_char": [582, 587, 1110, 1115], "_o": [582, 583, 1110, 1111], "caf\u00e9": [582, 583, 1110, 1111], "345": [582, 583, 1110, 1111], "\u6771\u4eac": [582, 583, 1110, 1111], "n_byte": [582, 583], "n_char": [582, 583], "fill_char": [585, 588, 589, 593, 1113, 1116, 1117, 1121], "justifi": [585, 593, 1113, 1121], "pad_end": [585, 589, 1113, 1117], "strip_chars_start": [586, 602, 604, 1114], "strip": [586, 594, 601, 602, 603, 604, 605, 1114, 1122, 1129, 1130, 1131], "pad": [588, 589, 614, 1116, 1117, 1142], "reach": [588, 589, 614, 1116, 1117, 1142], "pad_start": [588, 593, 614, 1116, 1121, 1142], "cow": [588, 589, 1116, 1117], "monkei": [588, 589, 1116, 1117], "hippopotamu": [588, 589, 1116, 1117], "zfill": [589, 634, 714, 1117], "radix": [590, 1118], "parseerror": [590, 1118], "becom": [590, 1118], "silent": [590, 1118], "110": [590, 1118], "010": [590, 1118], "fa1e": [590, 1118], "ff00": [590, 1118], "cafe": [590, 1118], "64030": [590, 1118], "65280": [590, 1118], "51966": [590, 1118], "replace_al": [591, 1119], "citi": 591, "philadelphia": 591, "season": 591, "spring": 591, "summer": 591, "autumn": 591, "winter": 591, "weather": [591, 1119], "raini": [591, 1119], "sunni": [591, 1119], "cloudi": 591, "snowi": 591, "foggi": [591, 1119], "123abc": [591, 1119], "abc456": [591, 1119], "abcabc": [592, 1120], "123a123": [592, 1120], "bc": [592, 697, 1120], "strip_chars_end": [594, 603, 605, 1122], "subslic": [595, 1123], "pear": [595, 1123], "papaya": [595, 1123], "dragonfruit": [595, 1123], "s_slice": 595, "ear": [595, 1123], "aya": [595, 1123], "uit": [595, 1123], "ya": [595, 1123], "onf": [595, 1123], "foo_bar_baz": 596, "split_inclus": 596, "foo_": [596, 668], "bar_": 596, "a_1": [597, 1125, 1155, 1178], "d_4": [597, 1125], "rename_field": [597, 598, 881, 1054, 1125, 1126, 1178], "first_part": [597, 598, 1125, 1126], "second_part": [597, 598, 1125, 1126], "remaind": [598, 1126], "app": [599, 1127], "has_prefix": 599, "strip_char": [600, 1128], "nworld": 601, "ow": 601, "hell": [601, 1129], "rld": [601, 603, 1131], "word": [602, 603], "strip_suffix": [602, 604], "oldw": 602, "he": 602, "abcdeff": 602, "fed": 602, "strip_prefix": [603, 605], "tworld": [603, 1129, 1131], "wod": [603, 1131], "aabcdef": 603, "cba": 603, "foobar": [604, 605, 1132, 1133], "foofoobar": [604, 1132], "foobarbar": [605, 1133], "polarstemporaltyp": [606, 1134], "penalti": [606, 607, 608, 1134, 1135, 1136], "clean": [606, 607, 608, 1134, 1135, 1136], "beforehand": [606, 607, 608, 1134, 1135, 1136], "certainli": [606, 607, 608, 1134, 1135, 1136], "3f": [606, 608, 1134, 1136], "00z": [606, 608, 1134, 1136], "sun": [606, 1134], "jul": [606, 1134], "34": [606, 1134], "inference_length": [609, 1137], "3420": [609, 1137], "120134": [609, 1137], "3212": [609, 1137], "90": [609, 1137], "143": [609, 1137, 1186], "variant": [610, 612, 613], "titlecas": [612, 1140], "sing": [612, 1140], "welcom": [612, 1140], "THERE": [612, 1140], "NO": [612, 828, 1140], "There": [612, 1140], "999999": [614, 660, 700, 701, 702, 828, 1142], "0123": [614, 1142], "cd": [615, 616], "struct_col": [615, 616], "www": 616, "xxx": 616, "yyi": 616, "zzz": 616, "obvious": 616, "structfieldnotfounderror": [616, 726], "761594": [624, 714, 1153, 1178], "replic": [625, 714, 1161, 1178], "vals_phys": [625, 714], "floordiv": [627, 714], "ieee": [627, 714], "754": [627, 714], "mathemat": [627, 664, 714], "undefin": [627, 714], "On": [627, 714], "operand": [627, 714], "infin": [627, 714], "value_count": [629, 714, 1178], "9223372036854775807": [630, 714], "binary_str": [634, 714], "250": [634, 714, 1067, 1178, 1186], "bin_x": [634, 714], "bin_i": [634, 714], "xor_xi": [634, 714], "bin_xor_xi": [634, 714], "00001010": [634, 714], "00001011": [634, 714], "00001000": [634, 714], "00000010": [634, 714], "11111010": [634, 714], "00000011": [634, 714], "249": [634, 714], "11111001": [634, 714], "01000010": [634, 714], "00000100": [634, 714], "70": [634, 714], "01000110": [634, 714], "AND": [635, 636, 828, 1159, 1178], "OR": [637, 638, 748, 825, 828], "any_horizont": 637, "returns_scalar": [639, 679, 714], "polarsintegertyp": [641, 673, 674], "arctan": [642, 643, 714, 1178], "angl": [642, 643], "plane": [642, 643], "rai": [642, 643], "tworoottwo": [642, 643], "arctan2d": 642, "atan2d": [642, 643], "atan2": [642, 643], "135": [642, 643], "356194": [642, 643], "arctan2": 643, "arg_tru": [645, 714, 1178], "mimic": 648, "a_lag_": 648, "a_rol": 648, "swim": 649, "walk": 649, "full_sent": 649, "correlationmethod": 650, "propagate_nan": 650, "spearman": 650, "544705": 650, "covari": [652, 692, 714], "acc": [653, 654, 667, 689], "include_init": 653, "accumul": [653, 654, 667, 689], "fn": [653, 654, 667, 689], "new_valu": [653, 654, 667, 689], "cumreduc": 653, "cumsum_horizont": 655, "month_end": 658, "granular": 658, "finer": 658, "permut": 658, "1985": [658, 661], "america": 661, "new_york": 661, "est": 661, "contrast": 663, "sometim": [663, 713], "tbl_width_char": 663, "120": 663, "add_week": 663, "add_dai": 663, "add_second": 663, "add_milli": 663, "add_hour": 663, "add_calendar_dai": 663, "add_calendar_month": 663, "mo": 663, "add_calendar_year": 663, "2024": [663, 828], "a_b_doubl": 664, "f_string": 668, "placehold": 668, "hello_": 668, "_world": 668, "_bar_": 668, "foo_a_bar_1": 668, "foo_b_bar_2": 668, "foo_c_bar_3": 668, "epoch": 669, "timestep": 669, "1666683077": 669, "1666683099": 669, "12345": [669, 866, 954, 1075, 1178], "12346": 669, "agg_group": [670, 714], "allow_object": 676, "valueexcept": 676, "test_func": 678, "list_of_seri": 679, "my_custom_aggreg": 679, "understood": 679, "max_horizont": 680, "min_horizont": [684, 693], "power": [694, 1178], "a_a": 694, "a_txt": 694, "605551": 695, "605551275463989": 695, "my_struct": 696, "thens": 704, "elif": 704, "pick": 704, "own": [704, 1186], "isn": 704, "arr": [706, 1159, 1170, 1178], "technic": 710, "further": [710, 1160, 1178], "columnfactori": 710, "more_nam": 710, "__call__": 710, "helper": 710, "__getattr__": 710, "idiomat": [710, 813], "quick": [710, 882, 1178, 1186], "prototyp": 710, "keystrok": 710, "drawback": 710, "readabl": 710, "modul": [713, 828, 1186], "and_": 714, "arcco": [714, 1178], "arccosh": [714, 1178], "arcsin": [714, 1178], "arcsinh": [714, 1178], "arctanh": [714, 1178], "arg_max": [714, 1178], "arg_min": [714, 1178], "arg_sort": [714, 1178], "arg_uniqu": [714, 1178], "backward_fil": 714, "cbrt": [714, 1178], "clip_max": [714, 1178], "clip_min": [714, 1178], "cosh": [714, 1178], "cot": [714, 1178], "cumcount": 714, "cummax": [714, 1178], "cummin": [714, 1178], "cumulative_ev": [714, 1178], "entropi": [714, 1178], "eq_miss": [714, 1178], "ewm_mean": [714, 1178], "ewm_std": [714, 1178], "ewm_var": [714, 1178], "extend_const": [714, 1178], "from_json": [714, 825], "ge": [714, 1178], "gt": [714, 1178], "implod": [714, 1178], "inspect": [714, 825], "is_between": [714, 1178], "is_finit": [714, 1178], "is_first": [714, 1178], "is_infinit": [714, 1178], "is_last": [714, 1178], "is_nan": [714, 1178], "is_not": 714, "is_not_nan": [714, 1178], "is_not_nul": [714, 1178], "keep_nam": 714, "kurtosi": [714, 1178], "log10": [714, 1178], "log1p": [714, 1178], "map_alia": 714, "mod": 714, "mul": 714, "nan_max": [714, 1178], "nan_min": [714, 1178], "ne_miss": [714, 1178], "or_": 714, "pct_chang": [714, 1178], "peak_max": [714, 1178], "peak_min": [714, 1178], "pow": [714, 1178], "register_plugin": 714, "lib": [714, 1154, 1178], "is_elementwis": 714, "input_wildcard_expans": 714, "cast_to_supertyp": 714, "pass_name_to_appli": 714, "changes_length": 714, "plugin": 714, "highli": 714, "unsaf": 714, "unstabl": 714, "serializ": 714, "ran": 714, "reinterpret": [714, 1178], "repeat_bi": 714, "rle_id": [714, 1178], "rolling_appli": [714, 1178], "rolling_max": [714, 1178], "rolling_mean": [714, 1178], "rolling_median": [714, 1178], "rolling_min": [714, 1178], "rolling_quantil": [714, 1178], "rolling_skew": [714, 1178], "rolling_std": [714, 1178], "rolling_var": [714, 1178], "search_sort": [714, 1178], "shrink_dtyp": [714, 1178], "sin": [714, 1178], "sinh": [714, 1178], "sort_bi": 714, "tan": [714, 1178], "to_phys": [714, 863, 1178], "unique_count": [714, 1178], "xor": 714, "expos": 726, "miscellan": 726, "arrowerror": 726, "columnnotfounderror": 726, "invalidoperationerror": 726, "polarspanicerror": 726, "schemaerror": 726, "schemafieldnotfounderror": 726, "shapeerror": 726, "parametr": 726, "build_info": 726, "get_index_typ": 726, "show_vers": 726, "threadpool_s": 726, "sqlcontext": [726, 1185], "hit": [732, 825], "node": [732, 736, 758, 765, 766, 770, 775, 778, 825], "_eager": [736, 825], "explain": [736, 825], "purpos": [736, 745, 825], "set_streaming_chunk_s": [736, 825], "collect_all_async": [737, 825], "async": [737, 825], "stringio": [739, 750, 784, 825], "snippet": [741, 825], "Be": [745, 825], "fewer": [745, 825], "suscept": [745, 825], "deseri": [750, 777, 784, 825], "lazygroupbi": [751, 752, 753, 754, 755, 756, 780, 825], "other_lf": [760, 825], "validate_output_schema": [765, 766, 825], "streamabl": [765, 766, 770, 825], "past": [765, 766, 825], "paramount": [765, 766, 825], "elig": [765, 766, 825], "invari": [766, 825], "upheld": [766, 825], "100_000": [766, 825], "200000": [766, 825], "199998": [766, 825], "199996": [766, 825], "199994": [766, 825], "199992": [766, 825], "show_plot": [775, 825], "truncate_nod": [775, 825], "figsiz": [775, 788, 825], "gantt": [775, 825], "plot": [775, 788, 825], "group_by_partit": [775, 825], "470": [775, 825], "475": [775, 825], "1964": [775, 825], "swap": [778, 825], "dynamic_group_bi": [780, 825], "dataframescan": [784, 825], "output_schema": [784, 825], "run_parallel": [784, 825], "duplicate_check": [784, 825], "later": [784, 825], "output_path": [788, 825], "raw_output": [788, 825], "figur": [788, 825], "290994": [791, 825], "118034": [791, 825], "implicit": [798, 825], "new_lf": [798, 825], "extern": [803, 825], "lf_other": [803, 825], "afoo": [803, 825], "cfoo": [803, 825], "train_lf": [803, 825], "feature_0": [803, 825], "feature_1": [803, 825], "test_lf": [803, 825], "_train": [803, 825], "feature_0_train": [803, 825], "opaqu": 813, "my_column": 813, "lf5": 825, "lf6": 825, "read_json": 825, "sink_csv": 825, "sink_ipc": 825, "sink_parquet": 825, "with_context": 825, "intuit": 828, "broadcast": 828, "emploi": 828, "complement": 828, "plenti": 828, "cde": 828, "fgg": 828, "jjk": 828, "lmn": 828, "opp": 828, "qqr": 828, "by_dtyp": 828, "as_expr": 828, "dispatch": 828, "1_234_500": 828, "5_000_555": 828, "1234500": 828, "5000555": 828, "by_nam": 828, "4_500_000": 828, "4500000": 828, "3265500": 828, "zap": 828, "2031": 828, "tstamp_tokyo": 828, "987654": 828, "123465": 828, "tstamp_utc": 828, "2025": 828, "666000": 828, "tstamp": 828, "600000": 828, "123000": 828, "666": 828, "td1": 828, "123456": 828, "987000": 828, "td2": 828, "td3": 828, "2m": [828, 910], "456m": 828, "7d": 828, "456789\u00b5": 828, "18d": 828, "999999\u00b5": 828, "23h": 828, "987m": 828, "14d": 828, "16h": 828, "39m": 828, "21d": 828, "456001\u00b5": 828, "expand_selector": 828, "789": 828, "colz": [828, 1186], "everyth": 828, "signed_integ": 828, "unsigned_integ": 828, "is_selector": 828, "obj": 828, "_selector_proxy_": 828, "include_categor": 828, "set_ord": [828, 864], "2345": 828, "3456": 828, "append_chunk": [834, 1178], "super": [834, 1178], "292432": [837, 1178], "549306": [841, 1178], "catnamespac": 859, "56789": [866, 954, 1075, 1178], "901234": [866, 954, 1075, 1178], "1232e": [873, 875, 1178], "1656e15": [875, 1178], "break_point_label": [881, 1054, 1178], "break_point": [881, 959, 1054, 1178], "category_label": [881, 1054, 1178], "series_num": [882, 1178], "581139": [882, 1178], "series_str": [882, 1178], "datetimeindex": [884, 1178], "datetimenamespac": 887, "ser": [892, 893, 925], "kathmandu": [892, 893, 925], "0545": [892, 893, 925], "500m": [905, 907, 915], "500000": 905, "500000000": 915, "date_minus_1y_2mon": 917, "165": [921, 935], "series_equ": [921, 1178], "timestamp_u": 926, "978307200000000000": 926, "978393600000000000": 926, "978480000000000000": 926, "005": [941, 1178], "06293300616044681": [941, 1178], "65": [941, 1178], "8568409950394724": [941, 1178], "4000000": [942, 1178], "814697265625": [942, 1178], "bitmask": [956, 1178], "absenc": [956, 1178], "presenc": [956, 1159, 1178], "confirm": [956, 1178], "10734580197236529959": [957, 1178], "3022416320763508302": [957, 1178], "13756996518000038261": [957, 1178], "bin_count": [959, 1178], "a_count": [959, 1178], "listnamespac": 989, "field_2": 1028, "n00": 1028, "n01": 1028, "n02": 1028, "2147483648": [1034, 1178], "iso3166": [1035, 1178], "tur": [1035, 1140, 1178], "jpn": [1035, 1178], "nld": [1035, 1178], "country_lookup": [1035, 1178], "japan": [1035, 1178], "t\u00fcrkiy": [1035, 1178], "netherland": [1035, 1178], "unrecognis": [1035, 1178], "unspecifi": [1035, 1178], "country_nam": [1035, 1178], "166667": [1050, 1178], "142857": [1050, 1178], "200": [1066, 1067, 1069, 1178], "150": [1067, 1178], "350": [1067, 1178], "450": [1067, 1178], "dev": [1072, 1178], "527525": [1072, 1178], "57": [1075, 1178, 1186], "frequent": [1079, 1080, 1178], "mutat": [1080, 1178], "2246e": [1089, 1152, 1178], "stringnamespac": 1096, "orld": 1130, "6331e16": [1152, 1178], "int64arrai": [1154, 1178], "a_2": [1155, 1178], "a_3": [1155, 1178], "s_from_str_repr": [1157, 1178], "zero_copy_onli": [1159, 1178], "writabl": [1159, 1178], "immut": [1159, 1178], "127": [1165, 1178], "seriesview": [1168, 1178], "arraylik": 1178, "dtype_if_empti": 1178, "position": 1178, "scenario": 1178, "chunk_length": 1178, "333": 1178, "get_chunk": 1178, "has_valid": 1178, "hist": 1178, "is_boolean": 1178, "is_float": 1178, "is_integ": 1178, "is_numer": [1178, 1186], "is_sort": 1178, "is_tempor": 1178, "is_utf8": 1178, "new_from_index": 1178, "set_at_idx": 1178, "two_a": 1185, "__enter__": 1185, "__exit__": 1185, "exc_typ": 1185, "baseexcept": 1185, "exc_val": 1185, "exc_tb": 1185, "tracebacktyp": 1185, "primari": 1186, "guid": 1186, "machin": 1186, "xdist": 1186, "hardwar": 1186, "setup": 1186, "sec": 1186, "numeric_dtyp": 1186, "null_probabililti": 1186, "test_numer": 1186, "col0": 1186, "col4": 1186, "29096": 1186, "485": 1186, "2147483647": 1186, "8257e14": 1186, "7508": 1186, "37338": 1186, "7264": 1186, "321": 1186, "16996": 1186, "121": 1186, "361": 1186, "63204": 1186, "1443e235": 1186, "conform": 1186, "ascii_lett": 1186, "id_char": 1186, "alphabet": 1186, "price": 1186, "min_valu": 1186, "max_valu": 1186, "test_price_calcul": 1186, "a101": 1186, "8nin": 1186, "qhoo": 1186, "714": 1186, "544": 1186, "i0e0": 1186, "0000": 1186, "test_miscellan": 1186, "235": 1186, "87": 1186, "186": 1186, "174": 1186, "179": 1186, "213": 1186, "221": 1186, "86": 1186, "255": 1186}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [40, 0, 1, "", "DataType"], [41, 0, 1, "", "Date"], [42, 0, 1, "", "Datetime"], [43, 0, 1, "", "Decimal"], [44, 0, 1, "", "Duration"], [45, 0, 1, "", "Float32"], [46, 0, 1, "", "Float64"], [47, 0, 1, "", "Int16"], [48, 0, 1, "", "Int32"], [49, 0, 1, "", "Int64"], [50, 0, 1, "", "Int8"], [54, 0, 1, "", "List"], [55, 0, 1, "", "Null"], [56, 0, 1, "", "Object"], [1185, 0, 1, "", "SQLContext"], [63, 0, 1, "", "StringCache"], [64, 0, 1, "", "Struct"], [65, 0, 1, "", "Time"], [66, 0, 1, "", "UInt16"], [67, 0, 1, "", "UInt32"], [68, 0, 1, "", "UInt64"], [69, 0, 1, "", "UInt8"], [70, 0, 1, "", "Unknown"], [71, 0, 1, "", "Utf8"], [72, 4, 1, "", "align_frames"], [635, 4, 1, "", "all"], [636, 4, 1, "", "all_horizontal"], [637, 4, 1, "", "any"], [638, 4, 1, "", "any_horizontal"], [639, 4, 1, "", "apply"], [640, 4, 1, "", "approx_n_unique"], [641, 4, 1, "", "arange"], [642, 4, 1, "", "arctan2"], [643, 4, 1, "", "arctan2d"], [644, 4, 1, "", "arg_sort_by"], [645, 4, 1, "", "arg_where"], [646, 4, 1, "", "avg"], [77, 4, 1, "", "build_info"], [647, 4, 1, "", "coalesce"], [78, 4, 1, "", "collect_all"], [79, 4, 1, "", "collect_all_async"], [80, 4, 1, "", "concat"], [648, 4, 1, "", "concat_list"], [649, 4, 1, "", "concat_str"], [650, 4, 1, "", "corr"], [651, 4, 1, "", "count"], [652, 4, 1, "", "cov"], [653, 4, 1, "", "cumfold"], [654, 4, 1, "", "cumreduce"], [655, 4, 1, "", "cumsum"], [656, 4, 1, "", "cumsum_horizontal"], [657, 4, 1, "", "date"], [658, 4, 1, "", "date_range"], [659, 4, 1, "", "date_ranges"], [660, 4, 1, "", "datetime"], [661, 4, 1, "", "datetime_range"], [662, 4, 1, "", "datetime_ranges"], [81, 4, 1, "", "disable_string_cache"], [663, 4, 1, "", "duration"], [664, 4, 1, "", "element"], [82, 4, 1, "", "enable_string_cache"], [665, 4, 1, "", "exclude"], [666, 4, 1, "", "first"], [667, 4, 1, "", "fold"], [668, 4, 1, "", "format"], [97, 4, 1, "", "from_arrow"], [98, 4, 1, "", "from_dataframe"], [99, 4, 1, "", "from_dict"], [100, 4, 1, "", "from_dicts"], [669, 4, 1, "", "from_epoch"], [101, 4, 1, "", "from_numpy"], [102, 4, 1, "", "from_pandas"], [103, 4, 1, "", "from_records"], [104, 4, 1, "", "from_repr"], [105, 4, 1, "", "get_index_type"], [670, 4, 1, "", "groups"], [671, 4, 1, "", "head"], [672, 4, 1, "", "implode"], [673, 4, 1, "", "int_range"], [674, 4, 1, "", "int_ranges"], [675, 4, 1, "", "last"], [676, 4, 1, "", "lit"], [677, 4, 1, "", "map"], [678, 4, 1, "", "map_batches"], [679, 4, 1, "", "map_groups"], [680, 4, 1, "", "max"], [681, 4, 1, "", "max_horizontal"], [682, 4, 1, "", "mean"], [683, 4, 1, "", "median"], [684, 4, 1, "", "min"], [685, 4, 1, "", "min_horizontal"], [686, 4, 1, "", "n_unique"], [687, 4, 1, "", "ones"], [688, 4, 1, "", "quantile"], [107, 4, 1, "", "read_avro"], [108, 4, 1, "", "read_csv"], [109, 4, 1, "", "read_csv_batched"], [110, 4, 1, "", "read_database"], [111, 4, 1, "", "read_database_uri"], [112, 4, 1, "", "read_delta"], [113, 4, 1, "", "read_excel"], [114, 4, 1, "", "read_ipc"], [115, 4, 1, "", "read_ipc_schema"], [116, 4, 1, "", "read_ipc_stream"], [117, 4, 1, "", "read_json"], [118, 4, 1, "", "read_ndjson"], [119, 4, 1, "", "read_ods"], [120, 4, 1, "", "read_parquet"], [121, 4, 1, "", "read_parquet_schema"], [689, 4, 1, "", "reduce"], [690, 4, 1, "", "repeat"], [691, 4, 1, "", "rolling_corr"], [692, 4, 1, "", "rolling_cov"], [122, 4, 1, "", "scan_csv"], [123, 4, 1, "", "scan_delta"], [124, 4, 1, "", "scan_iceberg"], [125, 4, 1, "", "scan_ipc"], [126, 4, 1, "", "scan_ndjson"], [127, 4, 1, "", "scan_parquet"], [128, 4, 1, "", "scan_pyarrow_dataset"], [693, 4, 1, "", "select"], [828, 6, 0, "-", "selectors"], [129, 4, 1, "", "set_random_seed"], [130, 4, 1, "", "show_versions"], [694, 4, 1, "", "sql_expr"], [695, 4, 1, "", "std"], [696, 4, 1, "", "struct"], [697, 4, 1, "", "sum"], [698, 4, 1, "", "sum_horizontal"], [699, 4, 1, "", "tail"], [142, 4, 1, "", "threadpool_size"], [700, 4, 1, "", "time"], [701, 4, 1, "", "time_range"], [702, 4, 1, "", "time_ranges"], [143, 4, 1, "", "using_string_cache"], [703, 4, 1, "", "var"], [704, 4, 1, "", "when"], [705, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_fmt_float"], [14, 1, 1, "", "set_fmt_str_lengths"], [15, 1, 1, "", "set_fmt_table_cell_list_len"], [16, 1, 1, "", "set_streaming_chunk_size"], [17, 1, 1, "", "set_tbl_cell_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_verbose"], [29, 1, 1, "", "state"]], "polars.DataFrame": [[146, 1, 1, "", "__dataframe__"], [147, 1, 1, "", "apply"], [148, 1, 1, "", "approx_n_unique"], [149, 1, 1, "", "approx_unique"], [150, 1, 1, "", "bottom_k"], [151, 1, 1, "", "cast"], [152, 1, 1, "", "clear"], [153, 1, 1, "", "clone"], [154, 2, 1, "", "columns"], [155, 1, 1, "", "corr"], [156, 1, 1, "", "describe"], [157, 1, 1, "", "drop"], [158, 1, 1, "", "drop_in_place"], [159, 1, 1, "", "drop_nulls"], [160, 2, 1, "", "dtypes"], [161, 1, 1, "", "estimated_size"], [162, 1, 1, "", "explode"], [163, 1, 1, "", "extend"], [164, 1, 1, "", "fill_nan"], [165, 1, 1, "", "fill_null"], [166, 1, 1, "", "filter"], [167, 1, 1, "", "find_idx_by_name"], [168, 2, 1, "", "flags"], [169, 1, 1, "", "fold"], [170, 1, 1, "", "frame_equal"], [171, 1, 1, "", "get_column"], [172, 1, 1, "", "get_columns"], [173, 1, 1, "", "glimpse"], [174, 1, 1, "", "group_by"], [175, 1, 1, "", "group_by_dynamic"], [176, 1, 1, "", "group_by_rolling"], [177, 1, 1, "", "groupby"], [178, 1, 1, "", "groupby_dynamic"], [179, 1, 1, "", "groupby_rolling"], [180, 1, 1, "", "hash_rows"], [181, 1, 1, "", "head"], [182, 2, 1, "", "height"], [183, 1, 1, "", "hstack"], [184, 1, 1, "", "insert_at_idx"], [185, 1, 1, "", "interpolate"], [186, 1, 1, "", "is_duplicated"], [187, 1, 1, "", "is_empty"], [188, 1, 1, "", "is_unique"], [189, 1, 1, "", "item"], [190, 1, 1, "", "iter_rows"], [191, 1, 1, "", "iter_slices"], [192, 1, 1, "", "join"], [193, 1, 1, "", "join_asof"], [194, 1, 1, "", "lazy"], [195, 1, 1, "", "limit"], [196, 1, 1, "", "map_rows"], [197, 1, 1, "", "max"], [198, 1, 1, "", "mean"], [199, 1, 1, "", "median"], [200, 1, 1, "", "melt"], [201, 1, 1, "", "merge_sorted"], [202, 1, 1, "", "min"], [203, 1, 1, "", "n_chunks"], [204, 1, 1, "", "n_unique"], [205, 1, 1, "", "null_count"], [206, 1, 1, "", "partition_by"], [207, 1, 1, "", "pipe"], [208, 1, 1, "", "pivot"], [209, 1, 1, "", "product"], [210, 1, 1, "", "quantile"], [211, 1, 1, "", "rechunk"], [212, 1, 1, "", "rename"], [213, 1, 1, "", "replace"], [214, 1, 1, "", "replace_at_idx"], [215, 1, 1, "", "reverse"], [216, 1, 1, "", "rolling"], [217, 1, 1, "", "row"], [218, 1, 1, "", "rows"], [219, 1, 1, "", "rows_by_key"], [220, 1, 1, "", "sample"], [221, 2, 1, "", "schema"], [222, 1, 1, "", "select"], [223, 1, 1, "", "select_seq"], [224, 1, 1, "", "set_sorted"], [225, 2, 1, "", "shape"], [226, 1, 1, "", "shift"], [227, 1, 1, "", "shift_and_fill"], [228, 1, 1, "", "shrink_to_fit"], [229, 1, 1, "", "slice"], [230, 1, 1, "", "sort"], [231, 1, 1, "", "std"], [232, 1, 1, "", "sum"], [233, 1, 1, "", "tail"], [234, 1, 1, "", "take_every"], [235, 1, 1, "", "to_arrow"], [236, 1, 1, "", "to_dict"], [237, 1, 1, "", "to_dicts"], [238, 1, 1, "", "to_dummies"], [239, 1, 1, "", "to_init_repr"], [240, 1, 1, "", "to_numpy"], [241, 1, 1, "", "to_pandas"], [242, 1, 1, "", "to_series"], [243, 1, 1, "", "to_struct"], [244, 1, 1, "", "top_k"], [245, 1, 1, "", "transpose"], [246, 1, 1, "", "unique"], [247, 1, 1, "", "unnest"], [248, 1, 1, "", "unstack"], [249, 1, 1, "", "update"], [250, 1, 1, "", "upsample"], [251, 1, 1, "", "var"], [252, 1, 1, "", "vstack"], [253, 2, 1, "", "width"], [254, 1, 1, "", "with_columns"], [255, 1, 1, "", "with_columns_seq"], [256, 1, 1, "", "with_row_count"], [30, 1, 1, "", "write_avro"], [31, 1, 1, "", "write_csv"], [32, 1, 1, "", "write_database"], [33, 1, 1, "", "write_delta"], [34, 1, 1, "", "write_excel"], [35, 1, 1, "", "write_ipc"], [36, 1, 1, "", "write_ipc_stream"], [37, 1, 1, "", "write_json"], [38, 1, 1, "", "write_ndjson"], [39, 1, 1, "", "write_parquet"]], "polars.DataType": [[40, 1, 1, "", "__init__"]], "polars.Date": [[41, 1, 1, "", "__init__"]], "polars.Datetime": [[42, 1, 1, "", "__init__"]], "polars.Decimal": [[43, 1, 1, "", "__init__"]], "polars.Duration": [[44, 1, 1, "", "__init__"]], "polars.Expr": [[285, 1, 1, "", "abs"], [286, 1, 1, "", "add"], [287, 1, 1, "", "agg_groups"], [288, 1, 1, "", "alias"], [289, 1, 1, "", "all"], [290, 1, 1, "", "and_"], [291, 1, 1, "", "any"], [292, 1, 1, "", "append"], [293, 1, 1, "", "apply"], [294, 1, 1, "", "approx_n_unique"], [295, 1, 1, "", "arccos"], [296, 1, 1, "", "arccosh"], [297, 1, 1, "", "arcsin"], [298, 1, 1, "", "arcsinh"], [299, 1, 1, "", "arctan"], [300, 1, 1, "", "arctanh"], [301, 1, 1, "", "arg_max"], [302, 1, 1, "", "arg_min"], [303, 1, 1, "", "arg_sort"], [304, 1, 1, "", "arg_true"], [305, 1, 1, "", "arg_unique"], [311, 1, 1, "", "backward_fill"], [317, 1, 1, "", "bottom_k"], [318, 1, 1, "", "cache"], [319, 1, 1, "", "cast"], [322, 1, 1, "", "cbrt"], [323, 1, 1, "", "ceil"], [324, 1, 1, "", "clip"], [325, 1, 1, "", "clip_max"], [326, 1, 1, "", "clip_min"], [327, 1, 1, "", "cos"], [328, 1, 1, "", "cosh"], [329, 1, 1, "", "cot"], [330, 1, 1, "", "count"], [331, 1, 1, "", "cumcount"], [332, 1, 1, "", "cummax"], [333, 1, 1, "", "cummin"], [334, 1, 1, "", "cumprod"], [335, 1, 1, "", "cumsum"], [336, 1, 1, "", "cumulative_eval"], [337, 1, 1, "", "cut"], [338, 1, 1, "", "degrees"], [339, 1, 1, "", "diff"], [340, 1, 1, "", "dot"], [341, 1, 1, "", "drop_nans"], [342, 1, 1, "", "drop_nulls"], [391, 1, 1, "", "entropy"], [392, 1, 1, "", "eq"], [393, 1, 1, "", "eq_missing"], [394, 1, 1, "", "ewm_mean"], [395, 1, 1, "", "ewm_std"], [396, 1, 1, "", "ewm_var"], [397, 1, 1, "", "exclude"], [398, 1, 1, "", "exp"], [399, 1, 1, "", "explode"], [400, 1, 1, "", "extend_constant"], [401, 1, 1, "", "fill_nan"], [402, 1, 1, "", "fill_null"], [403, 1, 1, "", "filter"], [404, 1, 1, "", "first"], [405, 1, 1, "", "flatten"], [406, 1, 1, "", "floor"], [407, 1, 1, "", "floordiv"], [408, 1, 1, "", "forward_fill"], [409, 1, 1, "", "from_json"], [410, 1, 1, "", "ge"], [411, 1, 1, "", "get"], [412, 1, 1, "", "gt"], [413, 1, 1, "", "hash"], [414, 1, 1, "", "head"], [415, 1, 1, "", "implode"], [416, 1, 1, "", "inspect"], [417, 1, 1, "", "interpolate"], [418, 1, 1, "", "is_between"], [419, 1, 1, "", "is_duplicated"], [420, 1, 1, "", "is_finite"], [421, 1, 1, "", "is_first"], [422, 1, 1, "", "is_first_distinct"], [423, 1, 1, "", "is_in"], [424, 1, 1, "", "is_infinite"], [425, 1, 1, "", "is_last"], [426, 1, 1, "", "is_last_distinct"], [427, 1, 1, "", "is_nan"], [428, 1, 1, "", "is_not"], [429, 1, 1, "", "is_not_nan"], [430, 1, 1, "", "is_not_null"], [431, 1, 1, "", "is_null"], [432, 1, 1, "", "is_unique"], [433, 1, 1, "", "keep_name"], [434, 1, 1, "", "kurtosis"], [435, 1, 1, "", "last"], [436, 1, 1, "", "le"], [437, 1, 1, "", "len"], [438, 1, 1, "", "limit"], [480, 1, 1, "", "log"], [481, 1, 1, "", "log10"], [482, 1, 1, "", "log1p"], [483, 1, 1, "", "lower_bound"], [484, 1, 1, "", "lt"], [485, 1, 1, "", "map"], [486, 1, 1, "", "map_alias"], [487, 1, 1, "", "map_batches"], [488, 1, 1, "", "map_dict"], [489, 1, 1, "", "map_elements"], [490, 1, 1, "", "max"], [491, 1, 1, "", "mean"], [492, 1, 1, "", "median"], [503, 1, 1, "", "min"], [504, 1, 1, "", "mod"], [505, 1, 1, "", "mode"], [506, 1, 1, "", "mul"], [507, 1, 1, "", "n_unique"], [514, 1, 1, "", "nan_max"], [515, 1, 1, "", "nan_min"], [516, 1, 1, "", "ne"], [517, 1, 1, "", "ne_missing"], [518, 1, 1, "", "not_"], [519, 1, 1, "", "null_count"], [520, 1, 1, "", "or_"], [521, 1, 1, "", "over"], [522, 1, 1, "", "pct_change"], [523, 1, 1, "", "peak_max"], [524, 1, 1, "", "peak_min"], [525, 1, 1, "", "pipe"], [526, 1, 1, "", "pow"], [527, 1, 1, "", "prefix"], [528, 1, 1, "", "product"], [529, 1, 1, "", "qcut"], [530, 1, 1, "", "quantile"], [531, 1, 1, "", "radians"], [532, 1, 1, "", "rank"], [533, 1, 1, "", "rechunk"], [534, 1, 1, "", "reinterpret"], [535, 1, 1, "", "repeat_by"], [536, 1, 1, "", "reshape"], [537, 1, 1, "", "reverse"], [538, 1, 1, "", "rle"], [539, 1, 1, "", "rle_id"], [540, 1, 1, "", "rolling"], [541, 1, 1, "", "rolling_apply"], [542, 1, 1, "", "rolling_map"], [543, 1, 1, "", "rolling_max"], [544, 1, 1, "", "rolling_mean"], [545, 1, 1, "", "rolling_median"], [546, 1, 1, "", "rolling_min"], [547, 1, 1, "", "rolling_quantile"], [548, 1, 1, "", "rolling_skew"], [549, 1, 1, "", "rolling_std"], [550, 1, 1, "", "rolling_sum"], [551, 1, 1, "", "rolling_var"], [552, 1, 1, "", "round"], [553, 1, 1, "", "sample"], [554, 1, 1, "", "search_sorted"], [555, 1, 1, "", "set_sorted"], [556, 1, 1, "", "shift"], [557, 1, 1, "", "shift_and_fill"], [558, 1, 1, "", "shrink_dtype"], [559, 1, 1, "", "shuffle"], [560, 1, 1, "", "sign"], [561, 1, 1, "", "sin"], [562, 1, 1, "", "sinh"], [563, 1, 1, "", "skew"], [564, 1, 1, "", "slice"], [565, 1, 1, "", "sort"], [566, 1, 1, "", "sort_by"], [567, 1, 1, "", "sqrt"], [568, 1, 1, "", "std"], [617, 1, 1, "", "sub"], [618, 1, 1, "", "suffix"], [619, 1, 1, "", "sum"], [620, 1, 1, "", "tail"], [621, 1, 1, "", "take"], [622, 1, 1, "", "take_every"], [623, 1, 1, "", "tan"], [624, 1, 1, "", "tanh"], [625, 1, 1, "", "to_physical"], [626, 1, 1, "", "top_k"], [627, 1, 1, "", "truediv"], [628, 1, 1, "", "unique"], [629, 1, 1, "", "unique_counts"], [630, 1, 1, "", "upper_bound"], [631, 1, 1, "", "value_counts"], [632, 1, 1, "", "var"], [633, 1, 1, "", "where"], [634, 1, 1, "", "xor"]], "polars.Expr.arr": [[306, 1, 1, "", "max"], [307, 1, 1, "", "min"], [308, 1, 1, "", "sum"], [309, 1, 1, "", "to_list"], [310, 1, 1, "", "unique"]], "polars.Expr.bin": [[312, 1, 1, "", "contains"], [313, 1, 1, "", "decode"], [314, 1, 1, "", "encode"], [315, 1, 1, "", "ends_with"], [316, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[320, 1, 1, "", "get_categories"], [321, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[343, 1, 1, "", "base_utc_offset"], [344, 1, 1, "", "cast_time_unit"], [345, 1, 1, "", "combine"], [346, 1, 1, "", "convert_time_zone"], [347, 1, 1, "", "date"], [348, 1, 1, "", "datetime"], [349, 1, 1, "", "day"], [350, 1, 1, "", "days"], [351, 1, 1, "", "dst_offset"], [352, 1, 1, "", "epoch"], [353, 1, 1, "", "hour"], [354, 1, 1, "", "hours"], [355, 1, 1, "", "is_leap_year"], [356, 1, 1, "", "iso_year"], [357, 1, 1, "", "microsecond"], [358, 1, 1, "", "microseconds"], [359, 1, 1, "", "millisecond"], [360, 1, 1, "", "milliseconds"], [361, 1, 1, "", "minute"], [362, 1, 1, "", "minutes"], [363, 1, 1, "", "month"], [364, 1, 1, "", "month_end"], [365, 1, 1, "", "month_start"], [366, 1, 1, "", "nanosecond"], [367, 1, 1, "", "nanoseconds"], [368, 1, 1, "", "offset_by"], [369, 1, 1, "", "ordinal_day"], [370, 1, 1, "", "quarter"], [371, 1, 1, "", "replace_time_zone"], [372, 1, 1, "", "round"], [373, 1, 1, "", "second"], [374, 1, 1, "", "seconds"], [375, 1, 1, "", "strftime"], [376, 1, 1, "", "time"], [377, 1, 1, "", "timestamp"], [378, 1, 1, "", "to_string"], [379, 1, 1, "", "total_days"], [380, 1, 1, "", "total_hours"], [381, 1, 1, "", "total_microseconds"], [382, 1, 1, "", "total_milliseconds"], [383, 1, 1, "", "total_minutes"], [384, 1, 1, "", "total_nanoseconds"], [385, 1, 1, "", "total_seconds"], [386, 1, 1, "", "truncate"], [387, 1, 1, "", "week"], [388, 1, 1, "", "weekday"], [389, 1, 1, "", "with_time_unit"], [390, 1, 1, "", "year"]], "polars.Expr.list": [[439, 1, 1, "", "all"], [440, 1, 1, "", "any"], [441, 1, 1, "", "arg_max"], [442, 1, 1, "", "arg_min"], [443, 1, 1, "", "concat"], [444, 1, 1, "", "contains"], [445, 1, 1, "", "count_match"], [446, 1, 1, "", "count_matches"], [447, 1, 1, "", "diff"], [448, 1, 1, "", "difference"], [449, 1, 1, "", "drop_nulls"], [450, 1, 1, "", "eval"], [451, 1, 1, "", "explode"], [452, 1, 1, "", "first"], [453, 1, 1, "", "get"], [454, 1, 1, "", "head"], [455, 1, 1, "", "intersection"], [456, 1, 1, "", "join"], [457, 1, 1, "", "last"], [458, 1, 1, "", "len"], [459, 1, 1, "", "lengths"], [460, 1, 1, "", "max"], [461, 1, 1, "", "mean"], [462, 1, 1, "", "min"], [463, 1, 1, "", "reverse"], [464, 1, 1, "", "sample"], [465, 1, 1, "", "set_difference"], [466, 1, 1, "", "set_intersection"], [467, 1, 1, "", "set_symmetric_difference"], [468, 1, 1, "", "set_union"], [469, 1, 1, "", "shift"], [470, 1, 1, "", "slice"], [471, 1, 1, "", "sort"], [472, 1, 1, "", "sum"], [473, 1, 1, "", "symmetric_difference"], [474, 1, 1, "", "tail"], [475, 1, 1, "", "take"], [476, 1, 1, "", "to_array"], [477, 1, 1, "", "to_struct"], [478, 1, 1, "", "union"], [479, 1, 1, "", "unique"]], "polars.Expr.meta": [[493, 1, 1, "", "eq"], [494, 1, 1, "", "has_multiple_outputs"], [495, 1, 1, "", "is_regex_projection"], [496, 1, 1, "", "ne"], [497, 1, 1, "", "output_name"], [498, 1, 1, "", "pop"], [499, 1, 1, "", "root_names"], [500, 1, 1, "", "tree_format"], [501, 1, 1, "", "undo_aliases"], [502, 1, 1, "", "write_json"]], "polars.Expr.name": [[508, 1, 1, "", "keep"], [509, 1, 1, "", "map"], [510, 1, 1, "", "prefix"], [511, 1, 1, "", "suffix"], [512, 1, 1, "", "to_lowercase"], [513, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[569, 1, 1, "", "concat"], [570, 1, 1, "", "contains"], [571, 1, 1, "", "count_match"], [572, 1, 1, "", "count_matches"], [573, 1, 1, "", "decode"], [574, 1, 1, "", "encode"], [575, 1, 1, "", "ends_with"], [576, 1, 1, "", "explode"], [577, 1, 1, "", "extract"], [578, 1, 1, "", "extract_all"], [579, 1, 1, "", "extract_groups"], [580, 1, 1, "", "json_extract"], [581, 1, 1, "", "json_path_match"], [582, 1, 1, "", "len_bytes"], [583, 1, 1, "", "len_chars"], [584, 1, 1, "", "lengths"], [585, 1, 1, "", "ljust"], [586, 1, 1, "", "lstrip"], [587, 1, 1, "", "n_chars"], [588, 1, 1, "", "pad_end"], [589, 1, 1, "", "pad_start"], [590, 1, 1, "", "parse_int"], [591, 1, 1, "", "replace"], [592, 1, 1, "", "replace_all"], [593, 1, 1, "", "rjust"], [594, 1, 1, "", "rstrip"], [595, 1, 1, "", "slice"], [596, 1, 1, "", "split"], [597, 1, 1, "", "split_exact"], [598, 1, 1, "", "splitn"], [599, 1, 1, "", "starts_with"], [600, 1, 1, "", "strip"], [601, 1, 1, "", "strip_chars"], [602, 1, 1, "", "strip_chars_end"], [603, 1, 1, "", "strip_chars_start"], [604, 1, 1, "", "strip_prefix"], [605, 1, 1, "", "strip_suffix"], [606, 1, 1, "", "strptime"], [607, 1, 1, "", "to_date"], [608, 1, 1, "", "to_datetime"], [609, 1, 1, "", "to_decimal"], [610, 1, 1, "", "to_lowercase"], [611, 1, 1, "", "to_time"], [612, 1, 1, "", "to_titlecase"], [613, 1, 1, "", "to_uppercase"], [614, 1, 1, "", "zfill"]], "polars.Expr.struct": [[615, 1, 1, "", "field"], [616, 1, 1, "", "rename_fields"]], "polars.Float32": [[45, 1, 1, "", "__init__"]], "polars.Float64": [[46, 1, 1, "", "__init__"]], "polars.Int16": [[47, 1, 1, "", "__init__"]], "polars.Int32": [[48, 1, 1, "", "__init__"]], "polars.Int64": [[49, 1, 1, "", "__init__"]], "polars.Int8": [[50, 1, 1, "", "__init__"]], "polars.LazyFrame": [[729, 1, 1, "", "approx_n_unique"], [730, 1, 1, "", "approx_unique"], [731, 1, 1, "", "bottom_k"], [732, 1, 1, "", "cache"], [733, 1, 1, "", "cast"], [734, 1, 1, "", "clear"], [735, 1, 1, "", "clone"], [736, 1, 1, "", "collect"], [737, 1, 1, "", "collect_async"], [738, 2, 1, "", "columns"], [739, 1, 1, "", "deserialize"], [740, 1, 1, "", "drop"], [741, 1, 1, "", "drop_nulls"], [742, 2, 1, "", "dtypes"], [743, 1, 1, "", "explain"], [744, 1, 1, "", "explode"], [745, 1, 1, "", "fetch"], [746, 1, 1, "", "fill_nan"], [747, 1, 1, "", "fill_null"], [748, 1, 1, "", "filter"], [749, 1, 1, "", "first"], [750, 1, 1, "", "from_json"], [751, 1, 1, "", "group_by"], [752, 1, 1, "", "group_by_dynamic"], [753, 1, 1, "", "group_by_rolling"], [754, 1, 1, "", "groupby"], [755, 1, 1, "", "groupby_dynamic"], [756, 1, 1, "", "groupby_rolling"], [757, 1, 1, "", "head"], [758, 1, 1, "", "inspect"], [759, 1, 1, "", "interpolate"], [760, 1, 1, "", "join"], [761, 1, 1, "", "join_asof"], [762, 1, 1, "", "last"], [763, 1, 1, "", "lazy"], [764, 1, 1, "", "limit"], [765, 1, 1, "", "map"], [766, 1, 1, "", "map_batches"], [767, 1, 1, "", "max"], [768, 1, 1, "", "mean"], [769, 1, 1, "", "median"], [770, 1, 1, "", "melt"], [771, 1, 1, "", "merge_sorted"], [772, 1, 1, "", "min"], [773, 1, 1, "", "null_count"], [774, 1, 1, "", "pipe"], [775, 1, 1, "", "profile"], [776, 1, 1, "", "quantile"], [777, 1, 1, "", "read_json"], [778, 1, 1, "", "rename"], [779, 1, 1, "", "reverse"], [780, 1, 1, "", "rolling"], [781, 2, 1, "", "schema"], [782, 1, 1, "", "select"], [783, 1, 1, "", "select_seq"], [784, 1, 1, "", "serialize"], [785, 1, 1, "", "set_sorted"], [786, 1, 1, "", "shift"], [787, 1, 1, "", "shift_and_fill"], [788, 1, 1, "", "show_graph"], [51, 1, 1, "", "sink_csv"], [52, 1, 1, "", "sink_ipc"], [53, 1, 1, "", "sink_parquet"], [789, 1, 1, "", "slice"], [790, 1, 1, "", "sort"], [791, 1, 1, "", "std"], [792, 1, 1, "", "sum"], [793, 1, 1, "", "tail"], [794, 1, 1, "", "take_every"], [795, 1, 1, "", "top_k"], [796, 1, 1, "", "unique"], [797, 1, 1, "", "unnest"], [798, 1, 1, "", "update"], [799, 1, 1, "", "var"], [800, 2, 1, "", "width"], [801, 1, 1, "", "with_columns"], [802, 1, 1, "", "with_columns_seq"], [803, 1, 1, "", "with_context"], [804, 1, 1, "", "with_row_count"], [805, 1, 1, "", "write_json"]], "polars.List": [[54, 1, 1, "", "__init__"]], "polars.Null": [[55, 1, 1, "", "__init__"]], "polars.Object": [[56, 1, 1, "", "__init__"]], "polars.SQLContext": [[1185, 1, 1, "", "__enter__"], [1185, 1, 1, "", "__exit__"], [1185, 1, 1, "", "__init__"], [57, 1, 1, "", "execute"], [58, 1, 1, "", "register"], [59, 1, 1, "", "register_globals"], [60, 1, 1, "", "register_many"], [61, 1, 1, "", "tables"], [62, 1, 1, "", "unregister"]], "polars.Series": [[830, 1, 1, "", "abs"], [831, 1, 1, "", "alias"], [832, 1, 1, "", "all"], [833, 1, 1, "", "any"], [834, 1, 1, "", "append"], [835, 1, 1, "", "apply"], [836, 1, 1, "", "arccos"], [837, 1, 1, "", "arccosh"], [838, 1, 1, "", "arcsin"], [839, 1, 1, "", "arcsinh"], [840, 1, 1, "", "arctan"], [841, 1, 1, "", "arctanh"], [842, 1, 1, "", "arg_max"], [843, 1, 1, "", "arg_min"], [844, 1, 1, "", "arg_sort"], [845, 1, 1, "", "arg_true"], [846, 1, 1, "", "arg_unique"], [857, 1, 1, "", "bottom_k"], [858, 1, 1, "", "cast"], [859, 3, 1, "", "cat"], [865, 1, 1, "", "cbrt"], [866, 1, 1, "", "ceil"], [867, 1, 1, "", "chunk_lengths"], [868, 1, 1, "", "clear"], [869, 1, 1, "", "clip"], [870, 1, 1, "", "clip_max"], [871, 1, 1, "", "clip_min"], [872, 1, 1, "", "clone"], [873, 1, 1, "", "cos"], [874, 1, 1, "", "cosh"], [875, 1, 1, "", "cot"], [876, 1, 1, "", "cummax"], [877, 1, 1, "", "cummin"], [878, 1, 1, "", "cumprod"], [879, 1, 1, "", "cumsum"], [880, 1, 1, "", "cumulative_eval"], [881, 1, 1, "", "cut"], [882, 1, 1, "", "describe"], [883, 1, 1, "", "diff"], [884, 1, 1, "", "dot"], [885, 1, 1, "", "drop_nans"], [886, 1, 1, "", "drop_nulls"], [887, 3, 1, "", "dt"], [940, 3, 1, "", "dtype"], [941, 1, 1, "", "entropy"], [942, 1, 1, "", "estimated_size"], [943, 1, 1, "", "ewm_mean"], [944, 1, 1, "", "ewm_std"], [945, 1, 1, "", "ewm_var"], [946, 1, 1, "", "exp"], [947, 1, 1, "", "explode"], [948, 1, 1, "", "extend"], [949, 1, 1, "", "extend_constant"], [950, 1, 1, "", "fill_nan"], [951, 1, 1, "", "fill_null"], [952, 1, 1, "", "filter"], [953, 3, 1, "", "flags"], [954, 1, 1, "", "floor"], [955, 1, 1, "", "get_chunks"], [956, 1, 1, "", "has_validity"], [957, 1, 1, "", "hash"], [958, 1, 1, "", "head"], [959, 1, 1, "", "hist"], [960, 1, 1, "", "implode"], [961, 3, 1, "", "inner_dtype"], [962, 1, 1, "", "interpolate"], [963, 1, 1, "", "is_between"], [964, 1, 1, "", "is_boolean"], [965, 1, 1, "", "is_duplicated"], [966, 1, 1, "", "is_empty"], [967, 1, 1, "", "is_finite"], [968, 1, 1, "", "is_first"], [969, 1, 1, "", "is_first_distinct"], [970, 1, 1, "", "is_float"], [971, 1, 1, "", "is_in"], [972, 1, 1, "", "is_infinite"], [973, 1, 1, "", "is_integer"], [974, 1, 1, "", "is_last"], [975, 1, 1, "", "is_last_distinct"], [976, 1, 1, "", "is_nan"], [977, 1, 1, "", "is_not_nan"], [978, 1, 1, "", "is_not_null"], [979, 1, 1, "", "is_null"], [980, 1, 1, "", "is_numeric"], [981, 1, 1, "", "is_sorted"], [982, 1, 1, "", "is_temporal"], [983, 1, 1, "", "is_unique"], [984, 1, 1, "", "is_utf8"], [985, 1, 1, "", "item"], [986, 1, 1, "", "kurtosis"], [987, 1, 1, "", "len"], [988, 1, 1, "", "limit"], [989, 3, 1, "", "list"], [1031, 1, 1, "", "log"], [1032, 1, 1, "", "log10"], [1033, 1, 1, "", "log1p"], [1034, 1, 1, "", "lower_bound"], [1035, 1, 1, "", "map_dict"], [1036, 1, 1, "", "map_elements"], [1037, 1, 1, "", "max"], [1038, 1, 1, "", "mean"], [1039, 1, 1, "", "median"], [1040, 1, 1, "", "min"], [1041, 1, 1, "", "mode"], [1042, 1, 1, "", "n_chunks"], [1043, 1, 1, "", "n_unique"], [1044, 3, 1, "", "name"], [1045, 1, 1, "", "nan_max"], [1046, 1, 1, "", "nan_min"], [1047, 1, 1, "", "new_from_index"], [1048, 1, 1, "", "not_"], [1049, 1, 1, "", "null_count"], [1050, 1, 1, "", "pct_change"], [1051, 1, 1, "", "peak_max"], [1052, 1, 1, "", "peak_min"], [1053, 1, 1, "", "product"], [1054, 1, 1, "", "qcut"], [1055, 1, 1, "", "quantile"], [1056, 1, 1, "", "rank"], [1057, 1, 1, "", "rechunk"], [1058, 1, 1, "", "reinterpret"], [1059, 1, 1, "", "rename"], [1060, 1, 1, "", "reshape"], [1061, 1, 1, "", "reverse"], [1062, 1, 1, "", "rle"], [1063, 1, 1, "", "rle_id"], [1064, 1, 1, "", "rolling_apply"], [1065, 1, 1, "", "rolling_map"], [1066, 1, 1, "", "rolling_max"], [1067, 1, 1, "", "rolling_mean"], [1068, 1, 1, "", "rolling_median"], [1069, 1, 1, "", "rolling_min"], [1070, 1, 1, "", "rolling_quantile"], [1071, 1, 1, "", "rolling_skew"], [1072, 1, 1, "", "rolling_std"], [1073, 1, 1, "", "rolling_sum"], [1074, 1, 1, "", "rolling_var"], [1075, 1, 1, "", "round"], [1076, 1, 1, "", "sample"], [1077, 1, 1, "", "search_sorted"], [1078, 1, 1, "", "series_equal"], [1079, 1, 1, "", "set"], [1080, 1, 1, "", "set_at_idx"], [1081, 1, 1, "", "set_sorted"], [1082, 3, 1, "", "shape"], [1083, 1, 1, "", "shift"], [1084, 1, 1, "", "shift_and_fill"], [1085, 1, 1, "", "shrink_dtype"], [1086, 1, 1, "", "shrink_to_fit"], [1087, 1, 1, "", "shuffle"], [1088, 1, 1, "", "sign"], [1089, 1, 1, "", "sin"], [1090, 1, 1, "", "sinh"], [1091, 1, 1, "", "skew"], [1092, 1, 1, "", "slice"], [1093, 1, 1, "", "sort"], [1094, 1, 1, "", "sqrt"], [1095, 1, 1, "", "std"], [1096, 3, 1, "", "str"], [1148, 1, 1, "", "sum"], [1149, 1, 1, "", "tail"], [1150, 1, 1, "", "take"], [1151, 1, 1, "", "take_every"], [1152, 1, 1, "", "tan"], [1153, 1, 1, "", "tanh"], [1154, 1, 1, "", "to_arrow"], [1155, 1, 1, "", "to_dummies"], [1156, 1, 1, "", "to_frame"], [1157, 1, 1, "", "to_init_repr"], [1158, 1, 1, "", "to_list"], [1159, 1, 1, "", "to_numpy"], [1160, 1, 1, "", "to_pandas"], [1161, 1, 1, "", "to_physical"], [1162, 1, 1, "", "top_k"], [1163, 1, 1, "", "unique"], [1164, 1, 1, "", "unique_counts"], [1165, 1, 1, "", "upper_bound"], [1166, 1, 1, "", "value_counts"], [1167, 1, 1, "", "var"], [1168, 1, 1, "", "view"], [1169, 1, 1, "", "zip_with"]], "polars.Series.arr": [[847, 1, 1, "", "max"], [848, 1, 1, "", "min"], [849, 1, 1, "", "sum"], [850, 1, 1, "", "to_list"], [851, 1, 1, "", "unique"]], "polars.Series.bin": [[852, 1, 1, "", "contains"], [853, 1, 1, "", "decode"], [854, 1, 1, "", "encode"], [855, 1, 1, "", "ends_with"], [856, 1, 1, "", "starts_with"]], "polars.Series.cat": [[860, 1, 1, "", "get_categories"], [861, 1, 1, "", "is_local"], [862, 1, 1, "", "set_ordering"], [863, 1, 1, "", "to_local"], [864, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[888, 1, 1, "", "base_utc_offset"], [889, 1, 1, "", "cast_time_unit"], [890, 1, 1, "", "combine"], [891, 1, 1, "", "convert_time_zone"], [892, 1, 1, "", "date"], [893, 1, 1, "", "datetime"], [894, 1, 1, "", "day"], [895, 1, 1, "", "days"], [896, 1, 1, "", "dst_offset"], [897, 1, 1, "", "epoch"], [898, 1, 1, "", "hour"], [899, 1, 1, "", "hours"], [900, 1, 1, "", "is_leap_year"], [901, 1, 1, "", "iso_year"], [902, 1, 1, "", "max"], [903, 1, 1, "", "mean"], [904, 1, 1, "", "median"], [905, 1, 1, "", "microsecond"], [906, 1, 1, "", "microseconds"], [907, 1, 1, "", "millisecond"], [908, 1, 1, "", "milliseconds"], [909, 1, 1, "", "min"], [910, 1, 1, "", "minute"], [911, 1, 1, "", "minutes"], [912, 1, 1, "", "month"], [913, 1, 1, "", "month_end"], [914, 1, 1, "", "month_start"], [915, 1, 1, "", "nanosecond"], [916, 1, 1, "", "nanoseconds"], [917, 1, 1, "", "offset_by"], [918, 1, 1, "", "ordinal_day"], [919, 1, 1, "", "quarter"], [920, 1, 1, "", "replace_time_zone"], [921, 1, 1, "", "round"], [922, 1, 1, "", "second"], [923, 1, 1, "", "seconds"], [924, 1, 1, "", "strftime"], [925, 1, 1, "", "time"], [926, 1, 1, "", "timestamp"], [927, 1, 1, "", "to_string"], [928, 1, 1, "", "total_days"], [929, 1, 1, "", "total_hours"], [930, 1, 1, "", "total_microseconds"], [931, 1, 1, "", "total_milliseconds"], [932, 1, 1, "", "total_minutes"], [933, 1, 1, "", "total_nanoseconds"], [934, 1, 1, "", "total_seconds"], [935, 1, 1, "", "truncate"], [936, 1, 1, "", "week"], [937, 1, 1, "", "weekday"], [938, 1, 1, "", "with_time_unit"], [939, 1, 1, "", "year"]], "polars.Series.list": [[990, 1, 1, "", "all"], [991, 1, 1, "", "any"], [992, 1, 1, "", "arg_max"], [993, 1, 1, "", "arg_min"], [994, 1, 1, "", "concat"], [995, 1, 1, "", "contains"], [996, 1, 1, "", "count_match"], [997, 1, 1, "", "count_matches"], [998, 1, 1, "", "diff"], [999, 1, 1, "", "difference"], [1000, 1, 1, "", "drop_nulls"], [1001, 1, 1, "", "eval"], [1002, 1, 1, "", "explode"], [1003, 1, 1, "", "first"], [1004, 1, 1, "", "get"], [1005, 1, 1, "", "head"], [1006, 1, 1, "", "intersection"], [1007, 1, 1, "", "join"], [1008, 1, 1, "", "last"], [1009, 1, 1, "", "len"], [1010, 1, 1, "", "lengths"], [1011, 1, 1, "", "max"], [1012, 1, 1, "", "mean"], [1013, 1, 1, "", "min"], [1014, 1, 1, "", "reverse"], [1015, 1, 1, "", "sample"], [1016, 1, 1, "", "set_difference"], [1017, 1, 1, "", "set_intersection"], [1018, 1, 1, "", "set_symmetric_difference"], [1019, 1, 1, "", "set_union"], [1020, 1, 1, "", "shift"], [1021, 1, 1, "", "slice"], [1022, 1, 1, "", "sort"], [1023, 1, 1, "", "sum"], [1024, 1, 1, "", "symmetric_difference"], [1025, 1, 1, "", "tail"], [1026, 1, 1, "", "take"], [1027, 1, 1, "", "to_array"], [1028, 1, 1, "", "to_struct"], [1029, 1, 1, "", "union"], [1030, 1, 1, "", "unique"]], "polars.Series.str": [[1097, 1, 1, "", "concat"], [1098, 1, 1, "", "contains"], [1099, 1, 1, "", "count_match"], [1100, 1, 1, "", "count_matches"], [1101, 1, 1, "", "decode"], [1102, 1, 1, "", "encode"], [1103, 1, 1, "", "ends_with"], [1104, 1, 1, "", "explode"], [1105, 1, 1, "", "extract"], [1106, 1, 1, "", "extract_all"], [1107, 1, 1, "", "extract_groups"], [1108, 1, 1, "", "json_extract"], [1109, 1, 1, "", "json_path_match"], [1110, 1, 1, "", "len_bytes"], [1111, 1, 1, "", "len_chars"], [1112, 1, 1, "", "lengths"], [1113, 1, 1, "", "ljust"], [1114, 1, 1, "", "lstrip"], [1115, 1, 1, "", "n_chars"], [1116, 1, 1, "", "pad_end"], [1117, 1, 1, "", "pad_start"], [1118, 1, 1, "", "parse_int"], [1119, 1, 1, "", "replace"], [1120, 1, 1, "", "replace_all"], [1121, 1, 1, "", "rjust"], [1122, 1, 1, "", "rstrip"], [1123, 1, 1, "", "slice"], [1124, 1, 1, "", "split"], [1125, 1, 1, "", "split_exact"], [1126, 1, 1, "", "splitn"], [1127, 1, 1, "", "starts_with"], [1128, 1, 1, "", "strip"], [1129, 1, 1, "", "strip_chars"], [1130, 1, 1, "", "strip_chars_end"], [1131, 1, 1, "", "strip_chars_start"], [1132, 1, 1, "", "strip_prefix"], [1133, 1, 1, "", "strip_suffix"], [1134, 1, 1, "", "strptime"], [1135, 1, 1, "", "to_date"], [1136, 1, 1, "", "to_datetime"], [1137, 1, 1, "", "to_decimal"], [1138, 1, 1, "", "to_lowercase"], [1139, 1, 1, "", "to_time"], [1140, 1, 1, "", "to_titlecase"], [1141, 1, 1, "", "to_uppercase"], [1142, 1, 1, "", "zfill"]], "polars.Series.struct": [[1143, 1, 1, "", "field"], [1144, 3, 1, "", "fields"], [1145, 1, 1, "", "rename_fields"], [1146, 3, 1, "", "schema"], [1147, 1, 1, "", "unnest"]], "polars.StringCache": [[63, 1, 1, "", "__init__"]], "polars.Struct": [[64, 1, 1, "", "__init__"]], "polars.Time": [[65, 1, 1, "", "__init__"]], "polars.UInt16": [[66, 1, 1, "", "__init__"]], "polars.UInt32": [[67, 1, 1, "", "__init__"]], "polars.UInt64": [[68, 1, 1, "", "__init__"]], "polars.UInt8": [[69, 1, 1, "", "__init__"]], "polars.Unknown": [[70, 1, 1, "", "__init__"]], "polars.Utf8": [[71, 1, 1, "", "__init__"]], "polars.api": [[73, 4, 1, "", "register_dataframe_namespace"], [74, 4, 1, "", "register_expr_namespace"], [75, 4, 1, "", "register_lazyframe_namespace"], [76, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[257, 1, 1, "", "__iter__"], [258, 1, 1, "", "agg"], [259, 1, 1, "", "all"], [260, 1, 1, "", "apply"], [261, 1, 1, "", "count"], [262, 1, 1, "", "first"], [263, 1, 1, "", "head"], [264, 1, 1, "", "last"], [265, 1, 1, "", "map_groups"], [266, 1, 1, "", "max"], [267, 1, 1, "", "mean"], [268, 1, 1, "", "median"], [269, 1, 1, "", "min"], [270, 1, 1, "", "n_unique"], [271, 1, 1, "", "quantile"], [272, 1, 1, "", "sum"], [273, 1, 1, "", "tail"]], "polars.exceptions": [[83, 5, 1, "", "ArrowError"], [84, 5, 1, "", "ColumnNotFoundError"], [85, 5, 1, "", "ComputeError"], [86, 5, 1, "", "DuplicateError"], [87, 5, 1, "", "InvalidOperationError"], [88, 5, 1, "", "NoDataError"], [89, 5, 1, "", "NoRowsReturnedError"], [90, 5, 1, "", "PolarsPanicError"], [91, 5, 1, "", "RowsError"], [92, 5, 1, "", "SchemaError"], [93, 5, 1, "", "SchemaFieldNotFoundError"], [94, 5, 1, "", "ShapeError"], [95, 5, 1, "", "StructFieldNotFoundError"], [96, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[106, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[806, 1, 1, "", "agg"], [807, 1, 1, "", "all"], [808, 1, 1, "", "apply"], [809, 1, 1, "", "count"], [810, 1, 1, "", "first"], [811, 1, 1, "", "head"], [812, 1, 1, "", "last"], [813, 1, 1, "", "map_groups"], [814, 1, 1, "", "max"], [815, 1, 1, "", "mean"], [816, 1, 1, "", "median"], [817, 1, 1, "", "min"], [818, 1, 1, "", "n_unique"], [819, 1, 1, "", "quantile"], [820, 1, 1, "", "sum"], [821, 1, 1, "", "tail"]], "polars.selectors": [[828, 4, 1, "", "all"], [828, 4, 1, "", "by_dtype"], [828, 4, 1, "", "by_name"], [828, 4, 1, "", "categorical"], [828, 4, 1, "", "contains"], [828, 4, 1, "", "date"], [828, 4, 1, "", "datetime"], [828, 4, 1, "", "duration"], [828, 4, 1, "", "ends_with"], [828, 4, 1, "", "expand_selector"], [828, 4, 1, "", "first"], [828, 4, 1, "", "float"], [828, 4, 1, "", "integer"], [828, 4, 1, "", "is_selector"], [828, 4, 1, "", "last"], [828, 4, 1, "", "matches"], [828, 4, 1, "", "numeric"], [828, 4, 1, "", "starts_with"], [828, 4, 1, "", "string"], [828, 4, 1, "", "temporal"], [828, 4, 1, "", "time"]], "polars.testing": [[131, 4, 1, "", "assert_frame_equal"], [132, 4, 1, "", "assert_frame_not_equal"], [133, 4, 1, "", "assert_series_equal"], [134, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[135, 0, 1, "", "column"], [136, 4, 1, "", "columns"], [137, 4, 1, "", "create_list_strategy"], [138, 4, 1, "", "dataframes"], [139, 4, 1, "", "load_profile"], [140, 4, 1, "", "series"], [141, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[135, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 163, 948], "api": [1, 73, 74, 75, 76, 726], "provid": 1, "new": 1, "function": [1, 144, 713, 725, 828], "avail": 1, "registr": 1, "exampl": [1, 828, 1186], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1186], "arrai": [2, 706, 1170], "binari": [3, 707, 720, 1172], "boolean": [4, 708, 1173], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 144], "activate_decim": 6, "load": [7, 144], "load_from_fil": 8, "restore_default": 9, "save": [10, 144], "save_to_fil": 11, "set_ascii_t": 12, "set_fmt_float": 13, "set_fmt_str_length": 14, "set_fmt_table_cell_list_len": 15, "set_streaming_chunk_s": 16, "set_tbl_cell_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_verbos": 28, "state": [29, 144], "datafram": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279], "write_avro": 30, "write_csv": 31, "write_databas": 32, "write_delta": 33, "write_excel": 34, "write_ipc": 35, "write_ipc_stream": 36, "write_json": [37, 502, 805], "write_ndjson": 38, "write_parquet": 39, "datatyp": 40, "date": [41, 347, 657, 892], "datetim": [42, 348, 660, 893], "decim": 43, "durat": [44, 663], "float32": 45, "float64": 46, "int16": 47, "int32": 48, "int64": 49, "int8": 50, "lazyfram": [51, 52, 53, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825], "sink_csv": 51, "sink_ipc": 52, "sink_parquet": 53, "list": [54, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 715, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1179], "null": 55, "object": 56, "sqlcontext": [57, 58, 59, 60, 61, 62], "execut": 57, "regist": 58, "register_glob": 59, "register_mani": 60, "tabl": 61, "unregist": 62, "stringcach": [63, 725], "struct": [64, 615, 616, 696, 722, 1143, 1144, 1145, 1146, 1147, 1183], "time": [65, 376, 700, 925], "uint16": 66, "uint32": 67, "uint64": 68, "uint8": 69, "unknown": 70, "utf8": 71, "align_fram": 72, "register_dataframe_namespac": 73, "register_expr_namespac": 74, "register_lazyframe_namespac": 75, "register_series_namespac": 76, "build_info": 77, "collect_al": 78, "collect_all_async": 79, "concat": [80, 443, 569, 994, 1097], "disable_string_cach": 81, "enable_string_cach": 82, "except": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 283], "arrowerror": 83, "columnnotfounderror": 84, "computeerror": 85, "duplicateerror": 86, "invalidoperationerror": 87, "nodataerror": 88, "norowsreturnederror": 89, "polarspanicerror": 90, "rowserror": 91, "schemaerror": 92, "schemafieldnotfounderror": 93, "shapeerror": 94, "structfieldnotfounderror": 95, "toomanyrowsreturnederror": 96, "from_arrow": 97, "from_datafram": 98, "from_dict": [99, 100], "from_numpi": 101, "from_panda": 102, "from_record": 103, "from_repr": 104, "get_index_typ": 105, "io": 106, "csv": [106, 727], "batched_read": 106, "batchedcsvread": [106, 727], "next_batch": 106, "read_avro": 107, "read_csv": 108, "read_csv_batch": 109, "read_databas": 110, "read_database_uri": 111, "read_delta": 112, "read_excel": 113, "read_ipc": 114, "read_ipc_schema": 115, "read_ipc_stream": 116, "read_json": [117, 777], "read_ndjson": 118, "read_od": 119, "read_parquet": 120, "read_parquet_schema": 121, "scan_csv": 122, "scan_delta": 123, "scan_iceberg": 124, "scan_ipc": 125, "scan_ndjson": 126, "scan_parquet": 127, "scan_pyarrow_dataset": 128, "set_random_se": 129, "show_vers": 130, "test": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 1186], "assert_frame_equ": 131, "assert_frame_not_equ": 132, "assert_series_equ": 133, "assert_series_not_equ": 134, "parametr": [135, 136, 137, 138, 139, 140, 141, 1186], "column": [135, 136, 154, 711, 738], "create_list_strategi": 137, "load_profil": 139, "seri": [140, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1178], "set_profil": 141, "threadpool_s": 142, "using_string_cach": 143, "option": 144, "current": 144, "us": 144, "context": 144, "manag": 144, "decor": 144, "aggreg": [145, 284, 728, 829], "__dataframe__": 146, "appli": [147, 260, 293, 639, 808, 835], "approx_n_uniqu": [148, 294, 640, 729], "approx_uniqu": [149, 730], "bottom_k": [150, 317, 731, 857], "cast": [151, 319, 733, 858], "clear": [152, 734, 868], "clone": [153, 735, 872], "corr": [155, 650], "describ": [156, 882], "drop": [157, 740], "drop_in_plac": 158, "drop_nul": [159, 342, 449, 741, 886, 1000], "dtype": [160, 742, 940], "estimated_s": [161, 942], "explod": [162, 399, 451, 576, 744, 947, 1002, 1104], "fill_nan": [164, 401, 746, 950], "fill_nul": [165, 402, 747, 951], "filter": [166, 403, 748, 952], "find_idx_by_nam": 167, "flag": [168, 953], "fold": [169, 667], "frame_equ": 170, "get_column": [171, 172], "glimps": 173, "group_bi": [174, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 751, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821], "group_by_dynam": [175, 752], "group_by_rol": [176, 753], "groupbi": [177, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 278, 754, 824], "groupby_dynam": [178, 755], "groupby_rol": [179, 756], "hash_row": 180, "head": [181, 263, 414, 454, 671, 757, 811, 958, 1005], "height": 182, "hstack": 183, "insert_at_idx": 184, "interpol": [185, 417, 759, 962], "is_dupl": [186, 419, 965], "is_empti": [187, 966], "is_uniqu": [188, 432, 983], "item": [189, 985], "iter_row": 190, "iter_slic": 191, "join": [192, 456, 760, 1007], "join_asof": [193, 761], "lazi": [194, 763], "limit": [195, 438, 764, 988], "map_row": 196, "max": [197, 266, 306, 460, 490, 680, 767, 814, 847, 902, 1011, 1037], "mean": [198, 267, 461, 491, 682, 768, 815, 903, 1012, 1038], "median": [199, 268, 492, 683, 769, 816, 904, 1039], "melt": [200, 770], "merge_sort": [201, 771], "min": [202, 269, 307, 462, 503, 684, 772, 817, 848, 909, 1013, 1040], "n_chunk": [203, 1042], "n_uniqu": [204, 270, 507, 686, 818, 1043], "null_count": [205, 519, 773, 1049], "partition_bi": 206, "pipe": [207, 525, 774], "pivot": 208, "product": [209, 528, 1053], "quantil": [210, 271, 530, 688, 776, 819, 1055], "rechunk": [211, 533, 1057], "renam": [212, 778, 1059], "replac": [213, 591, 1119], "replace_at_idx": 214, "revers": [215, 463, 537, 779, 1014, 1061], "roll": [216, 540, 780], "row": [217, 218], "rows_by_kei": 219, "sampl": [220, 464, 553, 1015, 1076], "schema": [221, 781, 1146], "select": [222, 281, 693, 718, 782, 827, 1181], "select_seq": [223, 783], "set_sort": [224, 555, 785, 1081], "shape": [225, 1082], "shift": [226, 469, 556, 786, 1020, 1083], "shift_and_fil": [227, 557, 787, 1084], "shrink_to_fit": [228, 1086], "slice": [229, 470, 564, 595, 789, 1021, 1092, 1123], "sort": [230, 471, 565, 790, 1022, 1093], "std": [231, 568, 695, 791, 1095], "sum": [232, 272, 308, 472, 619, 697, 792, 820, 849, 1023, 1148], "tail": [233, 273, 474, 620, 699, 793, 821, 1025, 1149], "take_everi": [234, 622, 794, 1151], "to_arrow": [235, 1154], "to_dict": [236, 237], "to_dummi": [238, 1155], "to_init_repr": [239, 1157], "to_numpi": [240, 1159], "to_panda": [241, 1160], "to_seri": 242, "to_struct": [243, 477, 1028], "top_k": [244, 626, 795, 1162], "transpos": 245, "uniqu": [246, 310, 479, 628, 796, 851, 1030, 1163], "unnest": [247, 797, 1147], "unstack": 248, "updat": [249, 798], "upsampl": 250, "var": [251, 632, 703, 799, 1167], "vstack": 252, "width": [253, 800], "with_column": [254, 801], "with_columns_seq": [255, 802], "with_row_count": [256, 804], "__iter__": 257, "agg": [258, 806], "all": [259, 289, 439, 635, 807, 832, 990], "count": [261, 330, 651, 809], "first": [262, 404, 452, 666, 749, 810, 1003], "last": [264, 435, 457, 675, 762, 812, 1008], "map_group": [265, 679, 813], "attribut": [274, 822, 1171], "comput": [275, 712, 1175], "descript": [276, 823, 1176], "export": [277, 1177], "miscellan": [280, 717, 725, 826, 1180], "manipul": [281, 718, 827, 1181], "data": 282, "type": 282, "numer": [282, 720], "tempor": [282, 723, 1184], "nest": 282, "other": 282, "expr": [285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634], "ab": [285, 830], "add": 286, "agg_group": 287, "alia": [288, 831], "and_": 290, "ani": [291, 440, 637, 833, 991], "append": [292, 834], "arcco": [295, 836], "arccosh": [296, 837], "arcsin": [297, 838], "arcsinh": [298, 839], "arctan": [299, 840], "arctanh": [300, 841], "arg_max": [301, 441, 842, 992], "arg_min": [302, 442, 843, 993], "arg_sort": [303, 844], "arg_tru": [304, 845], "arg_uniqu": [305, 846], "arr": [306, 307, 308, 309, 310, 847, 848, 849, 850, 851], "to_list": [309, 850, 1158], "backward_fil": 311, "bin": [312, 313, 314, 315, 316, 852, 853, 854, 855, 856], "contain": [312, 444, 570, 852, 995, 1098], "decod": [313, 573, 853, 1101], "encod": [314, 574, 854, 1102], "ends_with": [315, 575, 855, 1103], "starts_with": [316, 599, 856, 1127], "cach": [318, 732], "cat": [320, 321, 859, 860, 861, 862, 863, 864], "get_categori": [320, 860], "set_ord": [321, 862], "cbrt": [322, 865], "ceil": [323, 866], "clip": [324, 869], "clip_max": [325, 870], "clip_min": [326, 871], "co": [327, 873], "cosh": [328, 874], "cot": [329, 875], "cumcount": 331, "cummax": [332, 876], "cummin": [333, 877], "cumprod": [334, 878], "cumsum": [335, 655, 879], "cumulative_ev": [336, 880], "cut": [337, 881], "degre": 338, "diff": [339, 447, 883, 998], "dot": [340, 884], "drop_nan": [341, 885], "dt": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939], "base_utc_offset": [343, 888], "cast_time_unit": [344, 889], "combin": [345, 890], "convert_time_zon": [346, 891], "dai": [349, 350, 894, 895], "dst_offset": [351, 896], "epoch": [352, 897], "hour": [353, 354, 898, 899], "is_leap_year": [355, 900], "iso_year": [356, 901], "microsecond": [357, 358, 905, 906], "millisecond": [359, 360, 907, 908], "minut": [361, 362, 910, 911], "month": [363, 912], "month_end": [364, 913], "month_start": [365, 914], "nanosecond": [366, 367, 915, 916], "offset_bi": [368, 917], "ordinal_dai": [369, 918], "quarter": [370, 919], "replace_time_zon": [371, 920], "round": [372, 552, 921, 1075], "second": [373, 374, 922, 923], "strftime": [375, 924], "timestamp": [377, 926], "to_str": [378, 927], "total_dai": [379, 928], "total_hour": [380, 929], "total_microsecond": [381, 930], "total_millisecond": [382, 931], "total_minut": [383, 932], "total_nanosecond": [384, 933], "total_second": [385, 934], "truncat": [386, 935], "week": [387, 936], "weekdai": [388, 937], "with_time_unit": [389, 938], "year": [390, 939], "entropi": [391, 941], "eq": [392, 493], "eq_miss": 393, "ewm_mean": [394, 943], "ewm_std": [395, 944], "ewm_var": [396, 945], "exclud": [397, 665], "exp": [398, 946], "extend_const": [400, 949], "flatten": 405, "floor": [406, 954], "floordiv": 407, "forward_fil": 408, "from_json": [409, 750], "ge": 410, "get": [411, 453, 1004], "gt": 412, "hash": [413, 957], "implod": [415, 672, 960], "inspect": [416, 758], "is_between": [418, 963], "is_finit": [420, 967], "is_first": [421, 968], "is_first_distinct": [422, 969], "is_in": [423, 971], "is_infinit": [424, 972], "is_last": [425, 974], "is_last_distinct": [426, 975], "is_nan": [427, 976], "is_not": 428, "is_not_nan": [429, 977], "is_not_nul": [430, 978], "is_nul": [431, 979], "keep_nam": 433, "kurtosi": [434, 986], "le": 436, "len": [437, 458, 987, 1009], "count_match": [445, 446, 571, 572, 996, 997, 1099, 1100], "differ": [448, 999], "eval": [450, 1001], "intersect": [455, 1006], "length": [459, 584, 1010, 1112], "set_differ": [465, 1016], "set_intersect": [466, 1017], "set_symmetric_differ": [467, 1018], "set_union": [468, 1019], "symmetric_differ": [473, 1024], "take": [475, 621, 1026, 1150], "to_arrai": [476, 1027], "union": [478, 1029], "log": [480, 1031], "log10": [481, 1032], "log1p": [482, 1033], "lower_bound": [483, 1034], "lt": 484, "map": [485, 509, 677, 765], "map_alia": 486, "map_batch": [487, 678, 766], "map_dict": [488, 1035], "map_el": [489, 1036], "meta": [493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 716], "has_multiple_output": 494, "is_regex_project": 495, "ne": [496, 516], "output_nam": 497, "pop": 498, "root_nam": 499, "tree_format": 500, "undo_alias": 501, "mod": 504, "mode": [505, 1041], "mul": 506, "name": [508, 509, 510, 511, 512, 513, 711, 719, 1044], "keep": 508, "prefix": [510, 527], "suffix": [511, 618], "to_lowercas": [512, 610, 1138], "to_uppercas": [513, 613, 1141], "nan_max": [514, 1045], "nan_min": [515, 1046], "ne_miss": 517, "not_": [518, 1048], "or_": 520, "over": 521, "pct_chang": [522, 1050], "peak_max": [523, 1051], "peak_min": [524, 1052], "pow": 526, "qcut": [529, 1054], "radian": 531, "rank": [532, 1056], "reinterpret": [534, 1058], "repeat_bi": 535, "reshap": [536, 1060], "rle": [538, 1062], "rle_id": [539, 1063], "rolling_appli": [541, 1064], "rolling_map": [542, 1065], "rolling_max": [543, 1066], "rolling_mean": [544, 1067], "rolling_median": [545, 1068], "rolling_min": [546, 1069], "rolling_quantil": [547, 1070], "rolling_skew": [548, 1071], "rolling_std": [549, 1072], "rolling_sum": [550, 1073], "rolling_var": [551, 1074], "search_sort": [554, 1077], "shrink_dtyp": [558, 1085], "shuffl": [559, 1087], "sign": [560, 1088], "sin": [561, 1089], "sinh": [562, 1090], "skew": [563, 1091], "sort_bi": 566, "sqrt": [567, 1094], "str": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142], "extract": [577, 1105], "extract_al": [578, 1106], "extract_group": [579, 1107], "json_extract": [580, 1108], "json_path_match": [581, 1109], "len_byt": [582, 1110], "len_char": [583, 1111], "ljust": [585, 1113], "lstrip": [586, 1114], "n_char": [587, 1115], "pad_end": [588, 1116], "pad_start": [589, 1117], "parse_int": [590, 1118], "replace_al": [592, 1120], "rjust": [593, 1121], "rstrip": [594, 1122], "split": [596, 1124], "split_exact": [597, 1125], "splitn": [598, 1126], "strip": [600, 1128], "strip_char": [601, 1129], "strip_chars_end": [602, 1130], "strip_chars_start": [603, 1131], "strip_prefix": [604, 1132], "strip_suffix": [605, 1133], "strptime": [606, 1134], "to_dat": [607, 1135], "to_datetim": [608, 1136], "to_decim": [609, 1137], "to_tim": [611, 1139], "to_titlecas": [612, 1140], "zfill": [614, 1142], "field": [615, 1143, 1144], "rename_field": [616, 1145], "sub": 617, "tan": [623, 1152], "tanh": [624, 1153], "to_phys": [625, 1161], "truediv": 627, "unique_count": [629, 1164], "upper_bound": [630, 1165], "value_count": [631, 1166], "where": 633, "xor": 634, "all_horizont": 636, "any_horizont": 638, "arang": 641, "arctan2": 642, "arctan2d": 643, "arg_sort_bi": 644, "arg_wher": 645, "avg": 646, "coalesc": 647, "concat_list": 648, "concat_str": 649, "cov": 652, "cumfold": 653, "cumreduc": 654, "cumsum_horizont": 656, "date_rang": [658, 659], "datetime_rang": [661, 662], "element": 664, "format": 668, "from_epoch": 669, "group": 670, "int_rang": [673, 674], "lit": 676, "max_horizont": 681, "min_horizont": 685, "ones": 687, "reduc": 689, "repeat": 690, "rolling_corr": 691, "rolling_cov": 692, "sql_expr": 694, "sum_horizont": 698, "time_rang": [701, 702], "when": 704, "zero": 705, "categori": [709, 1174], "col": 710, "express": 714, "oper": [720, 828], "conjunct": 720, "comparison": 720, "string": [721, 1182], "window": 724, "convers": 725, "parallel": 725, "random": 725, "refer": 726, "input": 727, "output": 727, "feather": 727, "ipc": 727, "parquet": 727, "databas": 727, "json": 727, "avro": 727, "spreadsheet": 727, "apach": 727, "iceberg": 727, "delta": 727, "lake": 727, "dataset": 727, "collect": 736, "collect_async": 737, "deseri": 739, "explain": 743, "fetch": 745, "profil": [775, 1186], "serial": 784, "show_graph": 788, "with_context": 803, "lazygroupbi": [806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821], "read": 826, "write": 826, "logic": 826, "plan": 826, "selector": 828, "import": 828, "set": [828, 1079], "is_loc": 861, "to_loc": 863, "uses_lexical_ord": 864, "chunk_length": 867, "get_chunk": 955, "has_valid": 956, "hist": 959, "inner_dtyp": 961, "is_boolean": 964, "is_float": 970, "is_integ": 973, "is_numer": 980, "is_sort": 981, "is_tempor": 982, "is_utf8": 984, "new_from_index": 1047, "series_equ": 1078, "set_at_idx": 1080, "to_fram": 1156, "view": 1168, "zip_with": 1169, "sql": 1185, "method": 1185, "assert": 1186, "primit": 1186, "strategi": 1186, "helper": 1186, "util": 1187}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.exceptions.NoRowsReturnedError": [[89, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.SchemaFieldNotFoundError": [[93, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.clear": [[152, "polars-dataframe-clear"]], "polars.from_arrow": [[97, "polars-from-arrow"]], "polars.exceptions.NoDataError": [[88, "polars-exceptions-nodataerror"]], "polars.DataFrame.approx_unique": [[149, "polars-dataframe-approx-unique"]], "polars.read_avro": [[107, "polars-read-avro"]], "polars.DataFrame.__dataframe__": [[146, "polars-dataframe-dataframe"]], "polars.testing.parametric.load_profile": [[139, "polars-testing-parametric-load-profile"]], "polars.read_parquet_schema": [[121, "polars-read-parquet-schema"]], "polars.exceptions.SchemaError": [[92, "polars-exceptions-schemaerror"]], "polars.scan_delta": [[123, "polars-scan-delta"]], "polars.exceptions.RowsError": [[91, "polars-exceptions-rowserror"]], "polars.exceptions.DuplicateError": [[86, "polars-exceptions-duplicateerror"]], "polars.testing.parametric.dataframes": [[138, "polars-testing-parametric-dataframes"]], "Aggregation": [[145, "aggregation"], [829, "aggregation"], [728, "aggregation"], [284, "aggregation"]], "polars.from_dicts": [[100, "polars-from-dicts"]], "polars.scan_ndjson": [[126, "polars-scan-ndjson"]], "polars.set_random_seed": [[129, "polars-set-random-seed"]], "polars.scan_csv": [[122, "polars-scan-csv"]], "polars.DataFrame.approx_n_unique": [[148, "polars-dataframe-approx-n-unique"]], "polars.from_dataframe": [[98, "polars-from-dataframe"]], "polars.read_csv_batched": [[109, "polars-read-csv-batched"]], "polars.read_csv": [[108, "polars-read-csv"]], "polars.concat": [[80, "polars-concat"]], "polars.exceptions.InvalidOperationError": [[87, "polars-exceptions-invalidoperationerror"]], "polars.testing.assert_series_equal": [[133, "polars-testing-assert-series-equal"]], "polars.read_excel": [[113, "polars-read-excel"]], "polars.collect_all_async": [[79, "polars-collect-all-async"]], "polars.disable_string_cache": [[81, "polars-disable-string-cache"]], "polars.exceptions.TooManyRowsReturnedError": [[96, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.ComputeError": [[85, "polars-exceptions-computeerror"]], "polars.exceptions.ArrowError": [[83, "polars-exceptions-arrowerror"]], "polars.testing.parametric.columns": [[136, "polars-testing-parametric-columns"]], "Config": [[144, "config"]], "Config options": [[144, "config-options"]], "Config load, save, and current state": [[144, "config-load-save-and-current-state"]], "Use as a context manager": [[144, "use-as-a-context-manager"]], "Use as a function decorator": [[144, "use-as-a-function-decorator"]], "polars.read_parquet": [[120, "polars-read-parquet"]], "polars.DataFrame.apply": [[147, "polars-dataframe-apply"]], "polars.build_info": [[77, "polars-build-info"]], "polars.testing.parametric.create_list_strategy": [[137, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.column": [[135, "polars-testing-parametric-column"]], "polars.testing.assert_series_not_equal": [[134, "polars-testing-assert-series-not-equal"]], "polars.testing.assert_frame_equal": [[131, "polars-testing-assert-frame-equal"]], "polars.DataFrame.clone": [[153, "polars-dataframe-clone"]], "polars.DataFrame.cast": [[151, "polars-dataframe-cast"]], "polars.testing.parametric.set_profile": [[141, "polars-testing-parametric-set-profile"]], "polars.read_database": [[110, "polars-read-database"]], "polars.scan_ipc": [[125, "polars-scan-ipc"]], "polars.get_index_type": [[105, "polars-get-index-type"]], "polars.threadpool_size": [[142, "polars-threadpool-size"]], "polars.testing.assert_frame_not_equal": [[132, "polars-testing-assert-frame-not-equal"]], "polars.scan_parquet": [[127, "polars-scan-parquet"]], "polars.show_versions": [[130, "polars-show-versions"]], "polars.exceptions.StructFieldNotFoundError": [[95, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_iceberg": [[124, "polars-scan-iceberg"]], "polars.DataFrame.bottom_k": [[150, "polars-dataframe-bottom-k"]], "polars.read_database_uri": [[111, "polars-read-database-uri"]], "polars.read_ods": [[119, "polars-read-ods"]], "polars.read_ipc_stream": [[116, "polars-read-ipc-stream"]], "polars.from_repr": [[104, "polars-from-repr"]], "polars.testing.parametric.series": [[140, "polars-testing-parametric-series"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[106, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.from_records": [[103, "polars-from-records"]], "polars.from_dict": [[99, "polars-from-dict"]], "polars.read_delta": [[112, "polars-read-delta"]], "polars.from_pandas": [[102, "polars-from-pandas"]], "polars.enable_string_cache": [[82, "polars-enable-string-cache"]], "polars.read_json": [[117, "polars-read-json"]], "polars.collect_all": [[78, "polars-collect-all"]], "polars.using_string_cache": [[143, "polars-using-string-cache"]], "polars.read_ndjson": [[118, "polars-read-ndjson"]], "polars.exceptions.ColumnNotFoundError": [[84, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.PolarsPanicError": [[90, "polars-exceptions-polarspanicerror"]], "polars.from_numpy": [[101, "polars-from-numpy"]], "polars.read_ipc_schema": [[115, "polars-read-ipc-schema"]], "polars.read_ipc": [[114, "polars-read-ipc"]], "polars.exceptions.ShapeError": [[94, "polars-exceptions-shapeerror"]], "polars.scan_pyarrow_dataset": [[128, "polars-scan-pyarrow-dataset"]], "polars.SQLContext.unregister": [[62, "polars-sqlcontext-unregister"]], "polars.SQLContext.register_many": [[60, "polars-sqlcontext-register-many"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1186, "examples"], [828, "examples"]], "polars.Config.state": [[29, "polars-config-state"]], "polars.Utf8": [[71, "polars-utf8"]], "polars.LazyFrame.sink_ipc": [[52, "polars-lazyframe-sink-ipc"]], "polars.UInt8": [[69, "polars-uint8"]], "polars.SQLContext.execute": [[57, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_database": [[32, "polars-dataframe-write-database"]], "polars.DataFrame.write_avro": [[30, "polars-dataframe-write-avro"]], "polars.Null": [[55, "polars-null"]], "polars.Float64": [[46, "polars-float64"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_ipc_stream": [[36, "polars-dataframe-write-ipc-stream"]], "polars.Int8": [[50, "polars-int8"]], "polars.Config.set_fmt_table_cell_list_len": [[15, "polars-config-set-fmt-table-cell-list-len"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Array": [[2, "polars-array"]], "polars.LazyFrame.sink_parquet": [[53, "polars-lazyframe-sink-parquet"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_json": [[37, "polars-dataframe-write-json"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.SQLContext.tables": [[61, "polars-sqlcontext-tables"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "polars.api.register_expr_namespace": [[74, "polars-api-register-expr-namespace"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.set_streaming_chunk_size": [[16, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_ndjson": [[38, "polars-dataframe-write-ndjson"]], "polars.Struct": [[64, "polars-struct"]], "polars.Object": [[56, "polars-object"]], "polars.align_frames": [[72, "polars-align-frames"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.api.register_series_namespace": [[76, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.SQLContext.register": [[58, "polars-sqlcontext-register"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.DataFrame.write_excel": [[34, "polars-dataframe-write-excel"]], "polars.DataFrame.write_csv": [[31, "polars-dataframe-write-csv"]], "polars.Config.set_verbose": [[28, "polars-config-set-verbose"]], "polars.Int32": [[48, "polars-int32"]], "polars.UInt16": [[66, "polars-uint16"]], "polars.StringCache": [[63, "polars-stringcache"]], "polars.Decimal": [[43, "polars-decimal"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Duration": [[44, "polars-duration"]], "polars.LazyFrame.sink_csv": [[51, "polars-lazyframe-sink-csv"]], "polars.Float32": [[45, "polars-float32"]], "polars.List": [[54, "polars-list"]], "polars.DataFrame.write_parquet": [[39, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.Int16": [[47, "polars-int16"]], "polars.Config.set_tbl_cell_alignment": [[17, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_delta": [[33, "polars-dataframe-write-delta"]], "polars.DataType": [[40, "polars-datatype"]], "polars.Time": [[65, "polars-time"]], "polars.Config.set_fmt_float": [[13, "polars-config-set-fmt-float"]], "polars.api.register_dataframe_namespace": [[73, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_ipc": [[35, "polars-dataframe-write-ipc"]], "polars.Unknown": [[70, "polars-unknown"]], "polars.Date": [[41, "polars-date"]], "polars.Datetime": [[42, "polars-datetime"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.UInt64": [[68, "polars-uint64"]], "Index": [[0, "index"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.SQLContext.register_globals": [[59, "polars-sqlcontext-register-globals"]], "polars.api.register_lazyframe_namespace": [[75, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_fmt_str_lengths": [[14, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.Int64": [[49, "polars-int64"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.UInt32": [[67, "polars-uint32"]], "polars.Series.str.lengths": [[1112, "polars-series-str-lengths"]], "polars.Series.str.to_decimal": [[1137, "polars-series-str-to-decimal"]], "polars.Series.str.rjust": [[1121, "polars-series-str-rjust"]], "polars.Series.tail": [[1149, "polars-series-tail"]], "polars.Series.str.explode": [[1104, "polars-series-str-explode"]], "polars.Series.str.count_matches": [[1100, "polars-series-str-count-matches"]], "polars.Series.str.ljust": [[1113, "polars-series-str-ljust"]], "polars.Series.str.pad_end": [[1116, "polars-series-str-pad-end"]], "polars.Series.str.encode": [[1102, "polars-series-str-encode"]], "polars.Series.struct.unnest": [[1147, "polars-series-struct-unnest"]], "polars.Series.sum": [[1148, "polars-series-sum"]], "polars.Series.shift_and_fill": [[1084, "polars-series-shift-and-fill"]], "polars.Series.str.lstrip": [[1114, "polars-series-str-lstrip"]], "polars.Series.str.contains": [[1098, "polars-series-str-contains"]], "polars.Series.str": [[1096, "polars-series-str"]], "polars.Series.str.strip_chars_start": [[1131, "polars-series-str-strip-chars-start"]], "polars.Series.struct.rename_fields": [[1145, "polars-series-struct-rename-fields"]], "polars.Series.tan": [[1152, "polars-series-tan"]], "polars.Series.str.ends_with": [[1103, "polars-series-str-ends-with"]], "polars.Series.str.count_match": [[1099, "polars-series-str-count-match"]], "polars.Series.str.json_path_match": [[1109, "polars-series-str-json-path-match"]], "polars.Series.take": [[1150, "polars-series-take"]], "polars.Series.str.concat": [[1097, "polars-series-str-concat"]], "polars.Series.str.replace": [[1119, "polars-series-str-replace"]], "polars.Series.str.parse_int": [[1118, "polars-series-str-parse-int"]], "polars.Series.str.len_bytes": [[1110, "polars-series-str-len-bytes"]], "polars.Series.str.slice": [[1123, "polars-series-str-slice"]], "polars.Series.struct.schema": [[1146, "polars-series-struct-schema"]], "polars.Series.str.replace_all": [[1120, "polars-series-str-replace-all"]], "polars.Series.str.splitn": [[1126, "polars-series-str-splitn"]], "polars.Series.str.extract_groups": [[1107, "polars-series-str-extract-groups"]], "polars.Series.str.pad_start": [[1117, "polars-series-str-pad-start"]], "polars.Series.set_sorted": [[1081, "polars-series-set-sorted"]], "polars.Series.str.split": [[1124, "polars-series-str-split"]], "polars.Series.str.strip_chars": [[1129, "polars-series-str-strip-chars"]], "polars.Series.str.to_datetime": [[1136, "polars-series-str-to-datetime"]], "polars.Series.take_every": [[1151, "polars-series-take-every"]], "polars.Series.str.starts_with": [[1127, "polars-series-str-starts-with"]], "polars.Series.str.strip_suffix": [[1133, "polars-series-str-strip-suffix"]], "polars.Series.sqrt": [[1094, "polars-series-sqrt"]], "polars.Series.std": [[1095, "polars-series-std"]], "polars.Series.str.rstrip": [[1122, "polars-series-str-rstrip"]], "polars.Series.skew": [[1091, "polars-series-skew"]], "polars.Series.series_equal": [[1078, "polars-series-series-equal"]], "polars.Series.sign": [[1088, "polars-series-sign"]], "polars.Series.slice": [[1092, "polars-series-slice"]], "polars.Series.str.strptime": [[1134, "polars-series-str-strptime"]], "polars.Series.struct.fields": [[1144, "polars-series-struct-fields"]], "polars.Series.str.to_date": [[1135, "polars-series-str-to-date"]], "polars.Series.str.to_lowercase": [[1138, "polars-series-str-to-lowercase"]], "polars.Series.shift": [[1083, "polars-series-shift"]], "polars.Series.struct.field": [[1143, "polars-series-struct-field"]], "polars.Series.str.zfill": [[1142, "polars-series-str-zfill"]], "polars.Series.str.strip_chars_end": [[1130, "polars-series-str-strip-chars-end"]], "polars.Series.str.split_exact": [[1125, "polars-series-str-split-exact"]], "polars.Series.str.strip_prefix": [[1132, "polars-series-str-strip-prefix"]], "polars.Series.shuffle": [[1087, "polars-series-shuffle"]], "polars.Series.sin": [[1089, "polars-series-sin"]], "polars.Series.str.to_titlecase": [[1140, "polars-series-str-to-titlecase"]], "polars.Series.str.to_time": [[1139, "polars-series-str-to-time"]], "polars.Series.str.json_extract": [[1108, "polars-series-str-json-extract"]], "polars.Series.shape": [[1082, "polars-series-shape"]], "polars.Series.str.decode": [[1101, "polars-series-str-decode"]], "polars.Series.sort": [[1093, "polars-series-sort"]], "polars.Series.set_at_idx": [[1080, "polars-series-set-at-idx"]], "polars.Series.tanh": [[1153, "polars-series-tanh"]], "polars.Series.to_arrow": [[1154, "polars-series-to-arrow"]], "polars.Series.shrink_to_fit": [[1086, "polars-series-shrink-to-fit"]], "polars.Series.str.extract_all": [[1106, "polars-series-str-extract-all"]], "polars.Series.str.strip": [[1128, "polars-series-str-strip"]], "polars.Series.shrink_dtype": [[1085, "polars-series-shrink-dtype"]], "polars.Series.str.to_uppercase": [[1141, "polars-series-str-to-uppercase"]], "polars.Series.sinh": [[1090, "polars-series-sinh"]], "polars.Series.set": [[1079, "polars-series-set"]], "polars.Series.str.n_chars": [[1115, "polars-series-str-n-chars"]], "polars.Series.str.len_chars": [[1111, "polars-series-str-len-chars"]], "polars.Series.str.extract": [[1105, "polars-series-str-extract"]], "polars.Series.log1p": [[1033, "polars-series-log1p"]], "polars.Series.mean": [[1038, "polars-series-mean"]], "polars.Series.min": [[1040, "polars-series-min"]], "polars.Series.rolling_var": [[1074, "polars-series-rolling-var"]], "polars.Series.list.shift": [[1020, "polars-series-list-shift"]], "polars.Series.log10": [[1032, "polars-series-log10"]], "polars.Series.list.max": [[1011, "polars-series-list-max"]], "polars.Series.rechunk": [[1057, "polars-series-rechunk"]], "polars.Series.list.join": [[1007, "polars-series-list-join"]], "polars.Series.list.last": [[1008, "polars-series-list-last"]], "polars.Series.nan_min": [[1046, "polars-series-nan-min"]], "polars.Series.list.eval": [[1001, "polars-series-list-eval"]], "polars.Series.new_from_index": [[1047, "polars-series-new-from-index"]], "polars.Series.list.set_symmetric_difference": [[1018, "polars-series-list-set-symmetric-difference"]], "polars.Series.median": [[1039, "polars-series-median"]], "polars.Series.list.mean": [[1012, "polars-series-list-mean"]], "polars.Series.n_chunks": [[1042, "polars-series-n-chunks"]], "polars.Series.quantile": [[1055, "polars-series-quantile"]], "polars.Series.list.set_intersection": [[1017, "polars-series-list-set-intersection"]], "polars.Series.list.sample": [[1015, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1016, "polars-series-list-set-difference"]], "polars.Series.n_unique": [[1043, "polars-series-n-unique"]], "polars.Series.rolling_quantile": [[1070, "polars-series-rolling-quantile"]], "polars.Series.log": [[1031, "polars-series-log"]], "polars.Series.sample": [[1076, "polars-series-sample"]], "polars.Series.list.slice": [[1021, "polars-series-list-slice"]], "polars.Series.peak_max": [[1051, "polars-series-peak-max"]], "polars.Series.nan_max": [[1045, "polars-series-nan-max"]], "polars.Series.search_sorted": [[1077, "polars-series-search-sorted"]], "polars.Series.product": [[1053, "polars-series-product"]], "polars.Series.list.intersection": [[1006, "polars-series-list-intersection"]], "polars.Series.rolling_max": [[1066, "polars-series-rolling-max"]], "polars.Series.rolling_std": [[1072, "polars-series-rolling-std"]], "polars.Series.rolling_apply": [[1064, "polars-series-rolling-apply"]], "polars.Series.list.sort": [[1022, "polars-series-list-sort"]], "polars.Series.list.union": [[1029, "polars-series-list-union"]], "polars.Series.list.first": [[1003, "polars-series-list-first"]], "polars.Series.list.to_array": [[1027, "polars-series-list-to-array"]], "polars.Series.list.tail": [[1025, "polars-series-list-tail"]], "polars.Series.mode": [[1041, "polars-series-mode"]], "polars.Series.rle_id": [[1063, "polars-series-rle-id"]], "polars.Series.map_dict": [[1035, "polars-series-map-dict"]], "polars.Series.rank": [[1056, "polars-series-rank"]], "polars.Series.map_elements": [[1036, "polars-series-map-elements"]], "polars.Series.name": [[1044, "polars-series-name"]], "polars.Series.list.min": [[1013, "polars-series-list-min"]], "polars.Series.reshape": [[1060, "polars-series-reshape"]], "polars.Series.pct_change": [[1050, "polars-series-pct-change"]], "polars.Series.list.to_struct": [[1028, "polars-series-list-to-struct"]], "polars.Series.list.len": [[1009, "polars-series-list-len"]], "polars.Series.list.unique": [[1030, "polars-series-list-unique"]], "polars.Series.lower_bound": [[1034, "polars-series-lower-bound"]], "polars.Series.peak_min": [[1052, "polars-series-peak-min"]], "polars.Series.list.set_union": [[1019, "polars-series-list-set-union"]], "polars.Series.list.get": [[1004, "polars-series-list-get"]], "polars.Series.rolling_mean": [[1067, "polars-series-rolling-mean"]], "polars.Series.rle": [[1062, "polars-series-rle"]], "polars.Series.rename": [[1059, "polars-series-rename"]], "polars.Series.reverse": [[1061, "polars-series-reverse"]], "polars.Series.null_count": [[1049, "polars-series-null-count"]], "polars.Series.rolling_median": [[1068, "polars-series-rolling-median"]], "polars.Series.qcut": [[1054, "polars-series-qcut"]], "polars.Series.reinterpret": [[1058, "polars-series-reinterpret"]], "polars.Series.round": [[1075, "polars-series-round"]], "polars.Series.rolling_min": [[1069, "polars-series-rolling-min"]], "polars.Series.list.symmetric_difference": [[1024, "polars-series-list-symmetric-difference"]], "polars.Series.rolling_skew": [[1071, "polars-series-rolling-skew"]], "polars.Series.max": [[1037, "polars-series-max"]], "polars.Series.list.sum": [[1023, "polars-series-list-sum"]], "polars.Series.list.explode": [[1002, "polars-series-list-explode"]], "polars.Series.not_": [[1048, "polars-series-not"]], "polars.Series.list.reverse": [[1014, "polars-series-list-reverse"]], "polars.Series.list.take": [[1026, "polars-series-list-take"]], "polars.Series.rolling_sum": [[1073, "polars-series-rolling-sum"]], "polars.Series.list.lengths": [[1010, "polars-series-list-lengths"]], "polars.Series.list.head": [[1005, "polars-series-list-head"]], "polars.Series.rolling_map": [[1065, "polars-series-rolling-map"]], "polars.Series.list.count_match": [[996, "polars-series-list-count-match"]], "polars.Series.hash": [[957, "polars-series-hash"]], "polars.Series.filter": [[952, "polars-series-filter"]], "polars.Series.get_chunks": [[955, "polars-series-get-chunks"]], "polars.Series.item": [[985, "polars-series-item"]], "polars.Series.list.contains": [[995, "polars-series-list-contains"]], "polars.Series.is_unique": [[983, "polars-series-is-unique"]], "polars.Series.dt.total_nanoseconds": [[933, "polars-series-dt-total-nanoseconds"]], "polars.Series.is_integer": [[973, "polars-series-is-integer"]], "polars.Series.list.arg_min": [[993, "polars-series-list-arg-min"]], "polars.Series.exp": [[946, "polars-series-exp"]], "polars.Series.dt.total_milliseconds": [[931, "polars-series-dt-total-milliseconds"]], "polars.Series.dtype": [[940, "polars-series-dtype"]], "polars.Series.ewm_std": [[944, "polars-series-ewm-std"]], "polars.Series.list.any": [[991, "polars-series-list-any"]], "polars.Series.list.drop_nulls": [[1000, "polars-series-list-drop-nulls"]], "polars.Series.dt.total_hours": [[929, "polars-series-dt-total-hours"]], "polars.Series.explode": [[947, "polars-series-explode"]], "polars.Series.is_infinite": [[972, "polars-series-is-infinite"]], "polars.Series.dt.with_time_unit": [[938, "polars-series-dt-with-time-unit"]], "polars.Series.is_temporal": [[982, "polars-series-is-temporal"]], "polars.Series.dt.total_days": [[928, "polars-series-dt-total-days"]], "polars.Series.dt.year": [[939, "polars-series-dt-year"]], "polars.Series.interpolate": [[962, "polars-series-interpolate"]], "polars.Series.is_last_distinct": [[975, "polars-series-is-last-distinct"]], "polars.Series.extend": [[948, "polars-series-extend"]], "polars.Series.limit": [[988, "polars-series-limit"]], "polars.Series.is_between": [[963, "polars-series-is-between"]], "polars.Series.list.concat": [[994, "polars-series-list-concat"]], "polars.Series.is_in": [[971, "polars-series-is-in"]], "polars.Series.is_sorted": [[981, "polars-series-is-sorted"]], "polars.Series.dt.week": [[936, "polars-series-dt-week"]], "polars.Series.extend_constant": [[949, "polars-series-extend-constant"]], "polars.Series.dt.weekday": [[937, "polars-series-dt-weekday"]], "polars.Series.dt.timestamp": [[926, "polars-series-dt-timestamp"]], "polars.Series.hist": [[959, "polars-series-hist"]], "polars.Series.ewm_mean": [[943, "polars-series-ewm-mean"]], "polars.Series.kurtosis": [[986, "polars-series-kurtosis"]], "polars.Series.floor": [[954, "polars-series-floor"]], "polars.Series.is_boolean": [[964, "polars-series-is-boolean"]], "polars.Series.list.all": [[990, "polars-series-list-all"]], "polars.Series.dt.strftime": [[924, "polars-series-dt-strftime"]], "polars.Series.estimated_size": [[942, "polars-series-estimated-size"]], "polars.Series.is_empty": [[966, "polars-series-is-empty"]], "polars.Series.is_finite": [[967, "polars-series-is-finite"]], "polars.Series.ewm_var": [[945, "polars-series-ewm-var"]], "polars.Series.is_duplicated": [[965, "polars-series-is-duplicated"]], "polars.Series.inner_dtype": [[961, "polars-series-inner-dtype"]], "polars.Series.is_nan": [[976, "polars-series-is-nan"]], "polars.Series.flags": [[953, "polars-series-flags"]], "polars.Series.list.diff": [[998, "polars-series-list-diff"]], "polars.Series.is_not_null": [[978, "polars-series-is-not-null"]], "polars.Series.fill_null": [[951, "polars-series-fill-null"]], "polars.Series.dt.total_seconds": [[934, "polars-series-dt-total-seconds"]], "polars.Series.fill_nan": [[950, "polars-series-fill-nan"]], "polars.Series.list": [[989, "polars-series-list"]], "polars.Series.dt.total_minutes": [[932, "polars-series-dt-total-minutes"]], "polars.Series.is_first_distinct": [[969, "polars-series-is-first-distinct"]], "polars.Series.dt.to_string": [[927, "polars-series-dt-to-string"]], "polars.Series.dt.time": [[925, "polars-series-dt-time"]], "polars.Series.is_numeric": [[980, "polars-series-is-numeric"]], "polars.Series.is_float": [[970, "polars-series-is-float"]], "polars.Series.list.count_matches": [[997, "polars-series-list-count-matches"]], "polars.Series.is_last": [[974, "polars-series-is-last"]], "polars.Series.dt.total_microseconds": [[930, "polars-series-dt-total-microseconds"]], "polars.Series.has_validity": [[956, "polars-series-has-validity"]], "polars.Series.list.arg_max": [[992, "polars-series-list-arg-max"]], "polars.Series.list.difference": [[999, "polars-series-list-difference"]], "polars.Series.is_utf8": [[984, "polars-series-is-utf8"]], "polars.Series.dt.truncate": [[935, "polars-series-dt-truncate"]], "polars.Series.entropy": [[941, "polars-series-entropy"]], "polars.Series.is_null": [[979, "polars-series-is-null"]], "polars.Series.is_first": [[968, "polars-series-is-first"]], "polars.Series.is_not_nan": [[977, "polars-series-is-not-nan"]], "polars.Series.head": [[958, "polars-series-head"]], "polars.Series.len": [[987, "polars-series-len"]], "polars.Series.implode": [[960, "polars-series-implode"]], "polars.Series.dt.minute": [[910, "polars-series-dt-minute"]], "polars.Series.dt.milliseconds": [[908, "polars-series-dt-milliseconds"]], "polars.Series.clear": [[868, "polars-series-clear"]], "polars.Series.dt.second": [[922, "polars-series-dt-second"]], "polars.Series.bin.encode": [[854, "polars-series-bin-encode"]], "polars.Series.cat.to_local": [[863, "polars-series-cat-to-local"]], "polars.Series.dt.iso_year": [[901, "polars-series-dt-iso-year"]], "polars.Series.cot": [[875, "polars-series-cot"]], "polars.Series.diff": [[883, "polars-series-diff"]], "polars.Series.dt.round": [[921, "polars-series-dt-round"]], "polars.Series.arr.unique": [[851, "polars-series-arr-unique"]], "polars.Series.dt.microsecond": [[905, "polars-series-dt-microsecond"]], "polars.Series.dt.nanoseconds": [[916, "polars-series-dt-nanoseconds"]], "polars.Series.clip": [[869, "polars-series-clip"]], "polars.Series.describe": [[882, "polars-series-describe"]], "polars.Series.dt.microseconds": [[906, "polars-series-dt-microseconds"]], "polars.Series.dt.month_start": [[914, "polars-series-dt-month-start"]], "polars.Series.cumulative_eval": [[880, "polars-series-cumulative-eval"]], "polars.Series.cast": [[858, "polars-series-cast"]], "polars.Series.dt.datetime": [[893, "polars-series-dt-datetime"]], "polars.Series.dot": [[884, "polars-series-dot"]], "polars.Series.cat.get_categories": [[860, "polars-series-cat-get-categories"]], "polars.Series.clip_max": [[870, "polars-series-clip-max"]], "polars.Series.dt.replace_time_zone": [[920, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.month": [[912, "polars-series-dt-month"]], "polars.Series.cos": [[873, "polars-series-cos"]], "polars.Series.dt.max": [[902, "polars-series-dt-max"]], "polars.Series.arr.min": [[848, "polars-series-arr-min"]], "polars.Series.cat.set_ordering": [[862, "polars-series-cat-set-ordering"]], "polars.Series.cat.is_local": [[861, "polars-series-cat-is-local"]], "polars.Series.cat.uses_lexical_ordering": [[864, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.dt.hour": [[898, "polars-series-dt-hour"]], "polars.Series.dt.nanosecond": [[915, "polars-series-dt-nanosecond"]], "polars.Series.cumprod": [[878, "polars-series-cumprod"]], "polars.Series.dt.day": [[894, "polars-series-dt-day"]], "polars.Series.dt": [[887, "polars-series-dt"]], "polars.Series.bin.decode": [[853, "polars-series-bin-decode"]], "polars.Series.dt.is_leap_year": [[900, "polars-series-dt-is-leap-year"]], "polars.Series.dt.offset_by": [[917, "polars-series-dt-offset-by"]], "polars.Series.dt.dst_offset": [[896, "polars-series-dt-dst-offset"]], "polars.Series.drop_nans": [[885, "polars-series-drop-nans"]], "polars.Series.dt.seconds": [[923, "polars-series-dt-seconds"]], "polars.Series.dt.median": [[904, "polars-series-dt-median"]], "polars.Series.dt.days": [[895, "polars-series-dt-days"]], "polars.Series.dt.quarter": [[919, "polars-series-dt-quarter"]], "polars.Series.dt.mean": [[903, "polars-series-dt-mean"]], "polars.Series.dt.epoch": [[897, "polars-series-dt-epoch"]], "polars.Series.dt.base_utc_offset": [[888, "polars-series-dt-base-utc-offset"]], "polars.Series.chunk_lengths": [[867, "polars-series-chunk-lengths"]], "polars.Series.dt.hours": [[899, "polars-series-dt-hours"]], "polars.Series.cumsum": [[879, "polars-series-cumsum"]], "polars.Series.cbrt": [[865, "polars-series-cbrt"]], "polars.Series.clip_min": [[871, "polars-series-clip-min"]], "polars.Series.cummin": [[877, "polars-series-cummin"]], "polars.Series.arr.max": [[847, "polars-series-arr-max"]], "polars.Series.bin.contains": [[852, "polars-series-bin-contains"]], "polars.Series.dt.cast_time_unit": [[889, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.month_end": [[913, "polars-series-dt-month-end"]], "polars.Series.cosh": [[874, "polars-series-cosh"]], "polars.Series.arr.sum": [[849, "polars-series-arr-sum"]], "polars.Series.cummax": [[876, "polars-series-cummax"]], "polars.Series.dt.combine": [[890, "polars-series-dt-combine"]], "polars.Series.drop_nulls": [[886, "polars-series-drop-nulls"]], "polars.Series.cat": [[859, "polars-series-cat"]], "polars.Series.arr.to_list": [[850, "polars-series-arr-to-list"]], "polars.Series.clone": [[872, "polars-series-clone"]], "polars.Series.bottom_k": [[857, "polars-series-bottom-k"]], "polars.Series.dt.minutes": [[911, "polars-series-dt-minutes"]], "polars.Series.dt.date": [[892, "polars-series-dt-date"]], "polars.Series.dt.min": [[909, "polars-series-dt-min"]], "polars.Series.dt.millisecond": [[907, "polars-series-dt-millisecond"]], "polars.Series.bin.ends_with": [[855, "polars-series-bin-ends-with"]], "polars.Series.bin.starts_with": [[856, "polars-series-bin-starts-with"]], "polars.Series.ceil": [[866, "polars-series-ceil"]], "polars.Series.cut": [[881, "polars-series-cut"]], "polars.Series.dt.convert_time_zone": [[891, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.ordinal_day": [[918, "polars-series-dt-ordinal-day"]], "polars.Series.to_physical": [[1161, "polars-series-to-physical"]], "Struct": [[1183, "struct"], [722, "struct"]], "Manipulation/selection": [[1181, "manipulation-selection"], [827, "manipulation-selection"], [718, "manipulation-selection"], [281, "manipulation-selection"]], "polars.Series.var": [[1167, "polars-series-var"]], "polars.Series.to_frame": [[1156, "polars-series-to-frame"]], "polars.Series.zip_with": [[1169, "polars-series-zip-with"]], "Testing": [[1186, "testing"]], "Asserts": [[1186, "asserts"]], "Parametric testing": [[1186, "parametric-testing"]], "Polars primitives": [[1186, "polars-primitives"]], "Strategy helpers": [[1186, "strategy-helpers"]], "Profiles": [[1186, "profiles"]], "Array": [[1170, "array"], [706, "array"]], "List": [[1179, "list"], [715, "list"]], "String": [[1182, "string"], [721, "string"]], "SQL": [[1185, "sql"]], "Methods": [[1185, "methods"]], "polars.Series.top_k": [[1162, "polars-series-top-k"]], "Binary": [[1172, "binary"], [707, "binary"], [720, "binary"]], "Utils": [[1187, "utils"]], "Attributes": [[1171, "attributes"], [822, "attributes"], [274, "attributes"]], "polars.Series.value_counts": [[1166, "polars-series-value-counts"]], "polars.Series.to_list": [[1158, "polars-series-to-list"]], "polars.Series.to_pandas": [[1160, "polars-series-to-pandas"]], "polars.Series.upper_bound": [[1165, "polars-series-upper-bound"]], "Categories": [[1174, "categories"], [709, "categories"]], "Boolean": [[1173, "boolean"], [708, "boolean"]], "Series": [[1178, "series"]], "polars.Series.unique": [[1163, "polars-series-unique"]], "Computation": [[1175, "computation"], [712, "computation"], [275, "computation"]], "polars.Series.view": [[1168, "polars-series-view"]], "polars.Series.to_init_repr": [[1157, "polars-series-to-init-repr"]], "polars.Series.to_numpy": [[1159, "polars-series-to-numpy"]], "Export": [[1177, "export"], [277, "export"]], "Temporal": [[1184, "temporal"], [723, "temporal"], [282, "temporal"]], "Miscellaneous": [[1180, "miscellaneous"], [826, "miscellaneous"], [717, "miscellaneous"], [725, "miscellaneous"], [280, "miscellaneous"]], "polars.Series.to_dummies": [[1155, "polars-series-to-dummies"]], "Descriptive": [[1176, "descriptive"], [823, "descriptive"], [276, "descriptive"]], "polars.Series.unique_counts": [[1164, "polars-series-unique-counts"]], "polars.Series.arcsinh": [[839, "polars-series-arcsinh"]], "polars.LazyFrame.width": [[800, "polars-lazyframe-width"]], "polars.LazyFrame.null_count": [[773, "polars-lazyframe-null-count"]], "LazyFrame": [[825, "lazyframe"]], "polars.LazyFrame.with_row_count": [[804, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.slice": [[789, "polars-lazyframe-slice"]], "polars.LazyFrame.shift": [[786, "polars-lazyframe-shift"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[818, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.rolling": [[780, "polars-lazyframe-rolling"]], "Selectors": [[828, "selectors"]], "Importing": [[828, "importing"]], "Set operations": [[828, "set-operations"]], "Functions": [[828, "functions"], [725, "functions"], [713, "functions"]], "polars.Series.arg_max": [[842, "polars-series-arg-max"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[807, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.melt": [[770, "polars-lazyframe-melt"]], "polars.LazyFrame.unique": [[796, "polars-lazyframe-unique"]], "polars.Series.arctan": [[840, "polars-series-arctan"]], "polars.LazyFrame.unnest": [[797, "polars-lazyframe-unnest"]], "polars.LazyFrame.top_k": [[795, "polars-lazyframe-top-k"]], "polars.Series.apply": [[835, "polars-series-apply"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[820, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[816, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.append": [[834, "polars-series-append"]], "polars.Series.arcsin": [[838, "polars-series-arcsin"]], "polars.LazyFrame.shift_and_fill": [[787, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[811, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.serialize": [[784, "polars-lazyframe-serialize"]], "polars.LazyFrame.with_columns_seq": [[802, "polars-lazyframe-with-columns-seq"]], "polars.Series.arg_sort": [[844, "polars-series-arg-sort"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[814, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.alias": [[831, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[810, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.read_json": [[777, "polars-lazyframe-read-json"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[819, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.reverse": [[779, "polars-lazyframe-reverse"]], "polars.Series.abs": [[830, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[812, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arctanh": [[841, "polars-series-arctanh"]], "polars.LazyFrame.with_columns": [[801, "polars-lazyframe-with-columns"]], "polars.LazyFrame.schema": [[781, "polars-lazyframe-schema"]], "polars.LazyFrame.sum": [[792, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[815, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.write_json": [[805, "polars-lazyframe-write-json"]], "polars.LazyFrame.var": [[799, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[809, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.set_sorted": [[785, "polars-lazyframe-set-sorted"]], "polars.Series.any": [[833, "polars-series-any"]], "polars.Series.arccosh": [[837, "polars-series-arccosh"]], "polars.LazyFrame.profile": [[775, "polars-lazyframe-profile"]], "polars.LazyFrame.update": [[798, "polars-lazyframe-update"]], "polars.LazyFrame.select": [[782, "polars-lazyframe-select"]], "polars.LazyFrame.with_context": [[803, "polars-lazyframe-with-context"]], "polars.LazyFrame.std": [[791, "polars-lazyframe-std"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[813, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "Read/write logical plan": [[826, "read-write-logical-plan"]], "polars.LazyFrame.pipe": [[774, "polars-lazyframe-pipe"]], "polars.LazyFrame.merge_sorted": [[771, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.take_every": [[794, "polars-lazyframe-take-every"]], "polars.LazyFrame.quantile": [[776, "polars-lazyframe-quantile"]], "polars.LazyFrame.select_seq": [[783, "polars-lazyframe-select-seq"]], "polars.LazyFrame.tail": [[793, "polars-lazyframe-tail"]], "polars.Series.all": [[832, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[808, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.Series.arg_unique": [[846, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[821, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.arccos": [[836, "polars-series-arccos"]], "polars.LazyFrame.rename": [[778, "polars-lazyframe-rename"]], "polars.LazyFrame.sort": [[790, "polars-lazyframe-sort"]], "polars.LazyFrame.show_graph": [[788, "polars-lazyframe-show-graph"]], "polars.Series.arg_min": [[843, "polars-series-arg-min"]], "polars.LazyFrame.min": [[772, "polars-lazyframe-min"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[817, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.arg_true": [[845, "polars-series-arg-true"]], "GroupBy": [[824, "groupby"], [278, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[806, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.any": [[637, "polars-any"]], "polars.ones": [[687, "polars-ones"]], "polars.Expr.upper_bound": [[630, "polars-expr-upper-bound"]], "polars.reduce": [[689, "polars-reduce"]], "polars.arg_where": [[645, "polars-arg-where"]], "polars.all_horizontal": [[636, "polars-all-horizontal"]], "polars.mean": [[682, "polars-mean"]], "polars.format": [[668, "polars-format"]], "polars.arg_sort_by": [[644, "polars-arg-sort-by"]], "polars.max_horizontal": [[681, "polars-max-horizontal"]], "polars.exclude": [[665, "polars-exclude"]], "polars.Expr.to_physical": [[625, "polars-expr-to-physical"]], "polars.date_ranges": [[659, "polars-date-ranges"]], "polars.max": [[680, "polars-max"]], "polars.corr": [[650, "polars-corr"]], "polars.from_epoch": [[669, "polars-from-epoch"]], "polars.all": [[635, "polars-all"]], "polars.date_range": [[658, "polars-date-range"]], "polars.cumreduce": [[654, "polars-cumreduce"]], "polars.head": [[671, "polars-head"]], "polars.fold": [[667, "polars-fold"]], "polars.cumsum": [[655, "polars-cumsum"]], "polars.cov": [[652, "polars-cov"]], "polars.datetime_ranges": [[662, "polars-datetime-ranges"]], "polars.Expr.tanh": [[624, "polars-expr-tanh"]], "polars.map_batches": [[678, "polars-map-batches"]], "polars.Expr.tail": [[620, "polars-expr-tail"]], "polars.cumfold": [[653, "polars-cumfold"]], "polars.arange": [[641, "polars-arange"]], "polars.Expr.sum": [[619, "polars-expr-sum"]], "polars.Expr.take_every": [[622, "polars-expr-take-every"]], "polars.Expr.unique_counts": [[629, "polars-expr-unique-counts"]], "polars.Expr.unique": [[628, "polars-expr-unique"]], "polars.Expr.sub": [[617, "polars-expr-sub"]], "polars.lit": [[676, "polars-lit"]], "polars.map": [[677, "polars-map"]], "polars.groups": [[670, "polars-groups"]], "polars.Expr.value_counts": [[631, "polars-expr-value-counts"]], "polars.cumsum_horizontal": [[656, "polars-cumsum-horizontal"]], "polars.int_ranges": [[674, "polars-int-ranges"]], "polars.apply": [[639, "polars-apply"]], "polars.datetime": [[660, "polars-datetime"]], "polars.map_groups": [[679, "polars-map-groups"]], "polars.coalesce": [[647, "polars-coalesce"]], "polars.first": [[666, "polars-first"]], "polars.arctan2d": [[643, "polars-arctan2d"]], "polars.Expr.top_k": [[626, "polars-expr-top-k"]], "polars.duration": [[663, "polars-duration"]], "polars.avg": [[646, "polars-avg"]], "polars.concat_str": [[649, "polars-concat-str"]], "polars.rolling_cov": [[692, "polars-rolling-cov"]], "polars.element": [[664, "polars-element"]], "polars.date": [[657, "polars-date"]], "polars.Expr.take": [[621, "polars-expr-take"]], "polars.Expr.suffix": [[618, "polars-expr-suffix"]], "polars.Expr.where": [[633, "polars-expr-where"]], "polars.datetime_range": [[661, "polars-datetime-range"]], "polars.any_horizontal": [[638, "polars-any-horizontal"]], "polars.last": [[675, "polars-last"]], "polars.repeat": [[690, "polars-repeat"]], "polars.int_range": [[673, "polars-int-range"]], "polars.n_unique": [[686, "polars-n-unique"]], "polars.median": [[683, "polars-median"]], "polars.Expr.tan": [[623, "polars-expr-tan"]], "polars.count": [[651, "polars-count"]], "polars.Expr.struct.rename_fields": [[616, "polars-expr-struct-rename-fields"]], "polars.Expr.var": [[632, "polars-expr-var"]], "polars.min": [[684, "polars-min"]], "polars.rolling_corr": [[691, "polars-rolling-corr"]], "polars.approx_n_unique": [[640, "polars-approx-n-unique"]], "polars.implode": [[672, "polars-implode"]], "polars.concat_list": [[648, "polars-concat-list"]], "polars.Expr.truediv": [[627, "polars-expr-truediv"]], "polars.Expr.xor": [[634, "polars-expr-xor"]], "polars.quantile": [[688, "polars-quantile"]], "polars.min_horizontal": [[685, "polars-min-horizontal"]], "polars.arctan2": [[642, "polars-arctan2"]], "polars.Expr.rolling_std": [[549, "polars-expr-rolling-std"]], "polars.Expr.search_sorted": [[554, "polars-expr-search-sorted"]], "polars.Expr.str.split_exact": [[597, "polars-expr-str-split-exact"]], "polars.Expr.str.contains": [[570, "polars-expr-str-contains"]], "polars.Expr.str.decode": [[573, "polars-expr-str-decode"]], "polars.Expr.str.strip_chars": [[601, "polars-expr-str-strip-chars"]], "polars.Expr.str.ends_with": [[575, "polars-expr-str-ends-with"]], "polars.Expr.str.strip_chars_end": [[602, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.lengths": [[584, "polars-expr-str-lengths"]], "polars.Expr.rolling_skew": [[548, "polars-expr-rolling-skew"]], "polars.Expr.str.concat": [[569, "polars-expr-str-concat"]], "polars.Expr.rolling_min": [[546, "polars-expr-rolling-min"]], "polars.Expr.str.pad_start": [[589, "polars-expr-str-pad-start"]], "polars.Expr.str.split": [[596, "polars-expr-str-split"]], "polars.Expr.rolling_sum": [[550, "polars-expr-rolling-sum"]], "polars.Expr.str.rjust": [[593, "polars-expr-str-rjust"]], "polars.Expr.str.strip": [[600, "polars-expr-str-strip"]], "polars.Expr.rolling_var": [[551, "polars-expr-rolling-var"]], "polars.Expr.shift": [[556, "polars-expr-shift"]], "polars.Expr.str.replace_all": [[592, "polars-expr-str-replace-all"]], "polars.Expr.str.slice": [[595, "polars-expr-str-slice"]], "polars.Expr.shuffle": [[559, "polars-expr-shuffle"]], "polars.Expr.round": [[552, "polars-expr-round"]], "polars.Expr.rolling_quantile": [[547, "polars-expr-rolling-quantile"]], "polars.Expr.shift_and_fill": [[557, "polars-expr-shift-and-fill"]], "polars.Expr.str.to_uppercase": [[613, "polars-expr-str-to-uppercase"]], "polars.Expr.str.to_date": [[607, "polars-expr-str-to-date"]], "polars.Expr.str.extract_groups": [[579, "polars-expr-str-extract-groups"]], "polars.Expr.str.replace": [[591, "polars-expr-str-replace"]], "polars.Expr.rolling_mean": [[544, "polars-expr-rolling-mean"]], "polars.Expr.str.rstrip": [[594, "polars-expr-str-rstrip"]], "polars.Expr.str.strip_prefix": [[604, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_time": [[611, "polars-expr-str-to-time"]], "polars.Expr.str.len_chars": [[583, "polars-expr-str-len-chars"]], "polars.Expr.sin": [[561, "polars-expr-sin"]], "polars.Expr.sign": [[560, "polars-expr-sign"]], "polars.Expr.struct.field": [[615, "polars-expr-struct-field"]], "polars.Expr.str.count_match": [[571, "polars-expr-str-count-match"]], "polars.Expr.str.to_titlecase": [[612, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_lowercase": [[610, "polars-expr-str-to-lowercase"]], "polars.Expr.str.len_bytes": [[582, "polars-expr-str-len-bytes"]], "polars.Expr.rle_id": [[539, "polars-expr-rle-id"]], "polars.Expr.rolling_map": [[542, "polars-expr-rolling-map"]], "polars.Expr.rolling": [[540, "polars-expr-rolling"]], "polars.Expr.std": [[568, "polars-expr-std"]], "polars.Expr.str.count_matches": [[572, "polars-expr-str-count-matches"]], "polars.Expr.skew": [[563, "polars-expr-skew"]], "polars.Expr.rolling_apply": [[541, "polars-expr-rolling-apply"]], "polars.Expr.slice": [[564, "polars-expr-slice"]], "polars.Expr.str.encode": [[574, "polars-expr-str-encode"]], "polars.Expr.str.ljust": [[585, "polars-expr-str-ljust"]], "polars.Expr.sinh": [[562, "polars-expr-sinh"]], "polars.Expr.str.pad_end": [[588, "polars-expr-str-pad-end"]], "polars.Expr.str.json_path_match": [[581, "polars-expr-str-json-path-match"]], "polars.Expr.sample": [[553, "polars-expr-sample"]], "polars.Expr.sort": [[565, "polars-expr-sort"]], "polars.Expr.str.n_chars": [[587, "polars-expr-str-n-chars"]], "polars.Expr.sort_by": [[566, "polars-expr-sort-by"]], "polars.Expr.str.strip_chars_start": [[603, "polars-expr-str-strip-chars-start"]], "polars.Expr.rolling_max": [[543, "polars-expr-rolling-max"]], "polars.Expr.rolling_median": [[545, "polars-expr-rolling-median"]], "polars.Expr.str.json_extract": [[580, "polars-expr-str-json-extract"]], "polars.Expr.shrink_dtype": [[558, "polars-expr-shrink-dtype"]], "polars.Expr.str.lstrip": [[586, "polars-expr-str-lstrip"]], "polars.Expr.str.strip_suffix": [[605, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[606, "polars-expr-str-strptime"]], "polars.Expr.str.zfill": [[614, "polars-expr-str-zfill"]], "polars.Expr.str.explode": [[576, "polars-expr-str-explode"]], "polars.Expr.str.splitn": [[598, "polars-expr-str-splitn"]], "polars.Expr.str.parse_int": [[590, "polars-expr-str-parse-int"]], "polars.Expr.str.extract": [[577, "polars-expr-str-extract"]], "polars.Expr.str.starts_with": [[599, "polars-expr-str-starts-with"]], "polars.Expr.set_sorted": [[555, "polars-expr-set-sorted"]], "polars.Expr.str.to_datetime": [[608, "polars-expr-str-to-datetime"]], "polars.Expr.str.extract_all": [[578, "polars-expr-str-extract-all"]], "polars.Expr.sqrt": [[567, "polars-expr-sqrt"]], "polars.Expr.str.to_decimal": [[609, "polars-expr-str-to-decimal"]], "polars.Expr.lt": [[484, "polars-expr-lt"]], "polars.Expr.nan_min": [[515, "polars-expr-nan-min"]], "polars.Expr.meta.output_name": [[497, "polars-expr-meta-output-name"]], "polars.Expr.meta.undo_aliases": [[501, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.shift": [[469, "polars-expr-list-shift"]], "polars.Expr.median": [[492, "polars-expr-median"]], "polars.Expr.reshape": [[536, "polars-expr-reshape"]], "polars.Expr.list.set_union": [[468, "polars-expr-list-set-union"]], "polars.Expr.qcut": [[529, "polars-expr-qcut"]], "polars.Expr.pow": [[526, "polars-expr-pow"]], "polars.Expr.list.sample": [[464, "polars-expr-list-sample"]], "polars.Expr.meta.tree_format": [[500, "polars-expr-meta-tree-format"]], "polars.Expr.not_": [[518, "polars-expr-not"]], "polars.Expr.product": [[528, "polars-expr-product"]], "polars.Expr.pct_change": [[522, "polars-expr-pct-change"]], "polars.Expr.prefix": [[527, "polars-expr-prefix"]], "polars.Expr.name.keep": [[508, "polars-expr-name-keep"]], "polars.Expr.radians": [[531, "polars-expr-radians"]], "polars.Expr.name.prefix": [[510, "polars-expr-name-prefix"]], "polars.Expr.meta.eq": [[493, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[494, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.max": [[490, "polars-expr-max"]], "polars.Expr.or_": [[520, "polars-expr-or"]], "polars.Expr.list.tail": [[474, "polars-expr-list-tail"]], "polars.Expr.list.unique": [[479, "polars-expr-list-unique"]], "polars.Expr.map_batches": [[487, "polars-expr-map-batches"]], "polars.Expr.log10": [[481, "polars-expr-log10"]], "polars.Expr.null_count": [[519, "polars-expr-null-count"]], "polars.Expr.name.to_uppercase": [[513, "polars-expr-name-to-uppercase"]], "polars.Expr.list.to_array": [[476, "polars-expr-list-to-array"]], "polars.Expr.list.reverse": [[463, "polars-expr-list-reverse"]], "polars.Expr.list.min": [[462, "polars-expr-list-min"]], "polars.Expr.list.set_symmetric_difference": [[467, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.sort": [[471, "polars-expr-list-sort"]], "polars.Expr.meta.ne": [[496, "polars-expr-meta-ne"]], "polars.Expr.list.union": [[478, "polars-expr-list-union"]], "polars.Expr.list.take": [[475, "polars-expr-list-take"]], "polars.Expr.list.symmetric_difference": [[473, "polars-expr-list-symmetric-difference"]], "polars.Expr.map": [[485, "polars-expr-map"]], "polars.Expr.meta.pop": [[498, "polars-expr-meta-pop"]], "polars.Expr.reverse": [[537, "polars-expr-reverse"]], "polars.Expr.rechunk": [[533, "polars-expr-rechunk"]], "polars.Expr.repeat_by": [[535, "polars-expr-repeat-by"]], "polars.Expr.peak_min": [[524, "polars-expr-peak-min"]], "polars.Expr.mode": [[505, "polars-expr-mode"]], "polars.Expr.mul": [[506, "polars-expr-mul"]], "polars.Expr.meta.write_json": [[502, "polars-expr-meta-write-json"]], "polars.Expr.log": [[480, "polars-expr-log"]], "polars.Expr.over": [[521, "polars-expr-over"]], "polars.Expr.name.to_lowercase": [[512, "polars-expr-name-to-lowercase"]], "polars.Expr.log1p": [[482, "polars-expr-log1p"]], "polars.Expr.min": [[503, "polars-expr-min"]], "polars.Expr.list.set_difference": [[465, "polars-expr-list-set-difference"]], "polars.Expr.name.suffix": [[511, "polars-expr-name-suffix"]], "polars.Expr.list.to_struct": [[477, "polars-expr-list-to-struct"]], "polars.Expr.mod": [[504, "polars-expr-mod"]], "polars.Expr.map_dict": [[488, "polars-expr-map-dict"]], "polars.Expr.mean": [[491, "polars-expr-mean"]], "polars.Expr.list.slice": [[470, "polars-expr-list-slice"]], "polars.Expr.rle": [[538, "polars-expr-rle"]], "polars.Expr.n_unique": [[507, "polars-expr-n-unique"]], "polars.Expr.map_elements": [[489, "polars-expr-map-elements"]], "polars.Expr.list.sum": [[472, "polars-expr-list-sum"]], "polars.Expr.ne": [[516, "polars-expr-ne"]], "polars.Expr.meta.root_names": [[499, "polars-expr-meta-root-names"]], "polars.Expr.peak_max": [[523, "polars-expr-peak-max"]], "polars.Expr.list.set_intersection": [[466, "polars-expr-list-set-intersection"]], "polars.Expr.name.map": [[509, "polars-expr-name-map"]], "polars.Expr.lower_bound": [[483, "polars-expr-lower-bound"]], "polars.Expr.meta.is_regex_projection": [[495, "polars-expr-meta-is-regex-projection"]], "polars.Expr.nan_max": [[514, "polars-expr-nan-max"]], "polars.Expr.reinterpret": [[534, "polars-expr-reinterpret"]], "polars.Expr.quantile": [[530, "polars-expr-quantile"]], "polars.Expr.ne_missing": [[517, "polars-expr-ne-missing"]], "polars.Expr.pipe": [[525, "polars-expr-pipe"]], "polars.Expr.map_alias": [[486, "polars-expr-map-alias"]], "polars.Expr.rank": [[532, "polars-expr-rank"]], "polars.LazyFrame.groupby": [[754, "polars-lazyframe-groupby"]], "polars.LazyFrame.head": [[757, "polars-lazyframe-head"]], "polars.sum": [[697, "polars-sum"]], "polars.LazyFrame.lazy": [[763, "polars-lazyframe-lazy"]], "polars.tail": [[699, "polars-tail"]], "polars.LazyFrame.explain": [[743, "polars-lazyframe-explain"]], "polars.LazyFrame.map": [[765, "polars-lazyframe-map"]], "polars.LazyFrame.groupby_rolling": [[756, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.bottom_k": [[731, "polars-lazyframe-bottom-k"]], "polars.time_ranges": [[702, "polars-time-ranges"]], "Input/output": [[727, "input-output"]], "CSV": [[727, "csv"]], "Feather/ IPC": [[727, "feather-ipc"]], "Parquet": [[727, "parquet"]], "Database": [[727, "database"]], "JSON": [[727, "json"]], "AVRO": [[727, "avro"]], "Spreadsheet": [[727, "spreadsheet"]], "Apache Iceberg": [[727, "apache-iceberg"]], "Delta Lake": [[727, "delta-lake"]], "Datasets": [[727, "datasets"]], "BatchedCsvReader": [[727, "batchedcsvreader"]], "polars.col": [[710, "polars-col"]], "polars.LazyFrame.group_by_rolling": [[753, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.interpolate": [[759, "polars-lazyframe-interpolate"]], "polars.LazyFrame.fill_null": [[747, "polars-lazyframe-fill-null"]], "polars.LazyFrame.fill_nan": [[746, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.median": [[769, "polars-lazyframe-median"]], "polars.LazyFrame.cast": [[733, "polars-lazyframe-cast"]], "polars.var": [[703, "polars-var"]], "Window": [[724, "window"]], "polars.LazyFrame.join_asof": [[761, "polars-lazyframe-join-asof"]], "polars.LazyFrame.approx_unique": [[730, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.fetch": [[745, "polars-lazyframe-fetch"]], "polars.std": [[695, "polars-std"]], "polars.LazyFrame.deserialize": [[739, "polars-lazyframe-deserialize"]], "polars.select": [[693, "polars-select"]], "polars.LazyFrame.approx_n_unique": [[729, "polars-lazyframe-approx-n-unique"]], "polars.zeros": [[705, "polars-zeros"]], "API reference": [[726, "api-reference"]], "polars.time": [[700, "polars-time"]], "polars.LazyFrame.mean": [[768, "polars-lazyframe-mean"]], "polars.LazyFrame.inspect": [[758, "polars-lazyframe-inspect"]], "polars.LazyFrame.clear": [[734, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[735, "polars-lazyframe-clone"]], "Meta": [[716, "meta"]], "polars.LazyFrame.first": [[749, "polars-lazyframe-first"]], "polars.LazyFrame.dtypes": [[742, "polars-lazyframe-dtypes"]], "Operators": [[720, "operators"]], "Conjunction": [[720, "conjunction"]], "Comparison": [[720, "comparison"]], "Numeric": [[720, "numeric"], [282, "numeric"]], "polars.LazyFrame.collect_async": [[737, "polars-lazyframe-collect-async"]], "polars.LazyFrame.explode": [[744, "polars-lazyframe-explode"]], "polars.LazyFrame.group_by": [[751, "polars-lazyframe-group-by"]], "Columns / names": [[711, "columns-names"]], "polars.LazyFrame.drop_nulls": [[741, "polars-lazyframe-drop-nulls"]], "Name": [[719, "name"]], "Expressions": [[714, "expressions"]], "polars.LazyFrame.join": [[760, "polars-lazyframe-join"]], "polars.LazyFrame.max": [[767, "polars-lazyframe-max"]], "polars.LazyFrame.group_by_dynamic": [[752, "polars-lazyframe-group-by-dynamic"]], "Conversion": [[725, "conversion"]], "Parallelization": [[725, "parallelization"]], "Random": [[725, "random"]], "StringCache": [[725, "stringcache"]], "polars.LazyFrame.collect": [[736, "polars-lazyframe-collect"]], "polars.time_range": [[701, "polars-time-range"]], "polars.LazyFrame.groupby_dynamic": [[755, "polars-lazyframe-groupby-dynamic"]], "polars.sum_horizontal": [[698, "polars-sum-horizontal"]], "polars.when": [[704, "polars-when"]], "polars.LazyFrame.last": [[762, "polars-lazyframe-last"]], "polars.LazyFrame.from_json": [[750, "polars-lazyframe-from-json"]], "polars.LazyFrame.filter": [[748, "polars-lazyframe-filter"]], "polars.sql_expr": [[694, "polars-sql-expr"]], "polars.LazyFrame.drop": [[740, "polars-lazyframe-drop"]], "polars.LazyFrame.limit": [[764, "polars-lazyframe-limit"]], "polars.struct": [[696, "polars-struct"]], "polars.LazyFrame.map_batches": [[766, "polars-lazyframe-map-batches"]], "polars.LazyFrame.cache": [[732, "polars-lazyframe-cache"]], "polars.LazyFrame.columns": [[738, "polars-lazyframe-columns"]], "polars.Expr.forward_fill": [[408, "polars-expr-forward-fill"]], "polars.Expr.implode": [[415, "polars-expr-implode"]], "polars.Expr.get": [[411, "polars-expr-get"]], "polars.Expr.list.eval": [[450, "polars-expr-list-eval"]], "polars.Expr.dt.weekday": [[388, "polars-expr-dt-weekday"]], "polars.Expr.dt.year": [[390, "polars-expr-dt-year"]], "polars.Expr.is_infinite": [[424, "polars-expr-is-infinite"]], "polars.Expr.keep_name": [[433, "polars-expr-keep-name"]], "polars.Expr.is_last_distinct": [[426, "polars-expr-is-last-distinct"]], "polars.Expr.is_unique": [[432, "polars-expr-is-unique"]], "polars.Expr.fill_nan": [[401, "polars-expr-fill-nan"]], "polars.Expr.list.difference": [[448, "polars-expr-list-difference"]], "polars.Expr.filter": [[403, "polars-expr-filter"]], "polars.Expr.dt.week": [[387, "polars-expr-dt-week"]], "polars.Expr.dt.with_time_unit": [[389, "polars-expr-dt-with-time-unit"]], "polars.Expr.interpolate": [[417, "polars-expr-interpolate"]], "polars.Expr.len": [[437, "polars-expr-len"]], "polars.Expr.kurtosis": [[434, "polars-expr-kurtosis"]], "polars.Expr.is_nan": [[427, "polars-expr-is-nan"]], "polars.Expr.dt.truncate": [[386, "polars-expr-dt-truncate"]], "polars.Expr.list.count_matches": [[446, "polars-expr-list-count-matches"]], "polars.Expr.hash": [[413, "polars-expr-hash"]], "polars.Expr.list.explode": [[451, "polars-expr-list-explode"]], "polars.Expr.ge": [[410, "polars-expr-ge"]], "polars.Expr.list.head": [[454, "polars-expr-list-head"]], "polars.Expr.from_json": [[409, "polars-expr-from-json"]], "polars.Expr.list.get": [[453, "polars-expr-list-get"]], "polars.Expr.eq_missing": [[393, "polars-expr-eq-missing"]], "polars.Expr.list.contains": [[444, "polars-expr-list-contains"]], "polars.Expr.is_first": [[421, "polars-expr-is-first"]], "polars.Expr.limit": [[438, "polars-expr-limit"]], "polars.Expr.exclude": [[397, "polars-expr-exclude"]], "polars.Expr.is_between": [[418, "polars-expr-is-between"]], "polars.Expr.is_first_distinct": [[422, "polars-expr-is-first-distinct"]], "polars.Expr.entropy": [[391, "polars-expr-entropy"]], "polars.Expr.list.first": [[452, "polars-expr-list-first"]], "polars.Expr.inspect": [[416, "polars-expr-inspect"]], "polars.Expr.explode": [[399, "polars-expr-explode"]], "polars.Expr.ewm_var": [[396, "polars-expr-ewm-var"]], "polars.Expr.gt": [[412, "polars-expr-gt"]], "polars.Expr.is_not": [[428, "polars-expr-is-not"]], "polars.Expr.flatten": [[405, "polars-expr-flatten"]], "polars.Expr.dt.total_seconds": [[385, "polars-expr-dt-total-seconds"]], "polars.Expr.floordiv": [[407, "polars-expr-floordiv"]], "polars.Expr.list.join": [[456, "polars-expr-list-join"]], "polars.Expr.last": [[435, "polars-expr-last"]], "polars.Expr.is_not_nan": [[429, "polars-expr-is-not-nan"]], "polars.Expr.list.concat": [[443, "polars-expr-list-concat"]], "polars.Expr.list.arg_min": [[442, "polars-expr-list-arg-min"]], "polars.Expr.list.diff": [[447, "polars-expr-list-diff"]], "polars.Expr.list.max": [[460, "polars-expr-list-max"]], "polars.Expr.list.count_match": [[445, "polars-expr-list-count-match"]], "polars.Expr.list.intersection": [[455, "polars-expr-list-intersection"]], "polars.Expr.eq": [[392, "polars-expr-eq"]], "polars.Expr.list.arg_max": [[441, "polars-expr-list-arg-max"]], "polars.Expr.ewm_std": [[395, "polars-expr-ewm-std"]], "polars.Expr.list.last": [[457, "polars-expr-list-last"]], "polars.Expr.list.lengths": [[459, "polars-expr-list-lengths"]], "polars.Expr.fill_null": [[402, "polars-expr-fill-null"]], "polars.Expr.exp": [[398, "polars-expr-exp"]], "polars.Expr.is_duplicated": [[419, "polars-expr-is-duplicated"]], "polars.Expr.list.mean": [[461, "polars-expr-list-mean"]], "polars.Expr.extend_constant": [[400, "polars-expr-extend-constant"]], "polars.Expr.head": [[414, "polars-expr-head"]], "polars.Expr.is_null": [[431, "polars-expr-is-null"]], "polars.Expr.list.any": [[440, "polars-expr-list-any"]], "polars.Expr.is_not_null": [[430, "polars-expr-is-not-null"]], "polars.Expr.list.all": [[439, "polars-expr-list-all"]], "polars.Expr.is_last": [[425, "polars-expr-is-last"]], "polars.Expr.ewm_mean": [[394, "polars-expr-ewm-mean"]], "polars.Expr.list.len": [[458, "polars-expr-list-len"]], "polars.Expr.floor": [[406, "polars-expr-floor"]], "polars.Expr.first": [[404, "polars-expr-first"]], "polars.Expr.le": [[436, "polars-expr-le"]], "polars.Expr.is_finite": [[420, "polars-expr-is-finite"]], "polars.Expr.is_in": [[423, "polars-expr-is-in"]], "polars.Expr.list.drop_nulls": [[449, "polars-expr-list-drop-nulls"]], "polars.Expr.bin.starts_with": [[316, "polars-expr-bin-starts-with"]], "polars.Expr.dt.microseconds": [[358, "polars-expr-dt-microseconds"]], "polars.Expr.clip_max": [[325, "polars-expr-clip-max"]], "polars.Expr.dt.iso_year": [[356, "polars-expr-dt-iso-year"]], "polars.Expr.bottom_k": [[317, "polars-expr-bottom-k"]], "polars.Expr.dt.round": [[372, "polars-expr-dt-round"]], "polars.Expr.dt.month_start": [[365, "polars-expr-dt-month-start"]], "polars.Expr.clip": [[324, "polars-expr-clip"]], "polars.Expr.cos": [[327, "polars-expr-cos"]], "polars.Expr.bin.ends_with": [[315, "polars-expr-bin-ends-with"]], "polars.Expr.cut": [[337, "polars-expr-cut"]], "polars.Expr.dt.total_nanoseconds": [[384, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.time": [[376, "polars-expr-dt-time"]], "polars.Expr.count": [[330, "polars-expr-count"]], "polars.Expr.drop_nans": [[341, "polars-expr-drop-nans"]], "polars.Expr.dt.ordinal_day": [[369, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.total_hours": [[380, "polars-expr-dt-total-hours"]], "polars.Expr.dt.nanoseconds": [[367, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.timestamp": [[377, "polars-expr-dt-timestamp"]], "polars.Expr.arr.to_list": [[309, "polars-expr-arr-to-list"]], "polars.Expr.bin.contains": [[312, "polars-expr-bin-contains"]], "polars.Expr.clip_min": [[326, "polars-expr-clip-min"]], "polars.Expr.ceil": [[323, "polars-expr-ceil"]], "polars.Expr.cumsum": [[335, "polars-expr-cumsum"]], "polars.Expr.dt.cast_time_unit": [[344, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.seconds": [[374, "polars-expr-dt-seconds"]], "polars.Expr.dt.strftime": [[375, "polars-expr-dt-strftime"]], "polars.Expr.dt.month": [[363, "polars-expr-dt-month"]], "polars.Expr.cummin": [[333, "polars-expr-cummin"]], "polars.Expr.bin.encode": [[314, "polars-expr-bin-encode"]], "polars.Expr.dt.to_string": [[378, "polars-expr-dt-to-string"]], "polars.Expr.dt.replace_time_zone": [[371, "polars-expr-dt-replace-time-zone"]], "polars.Expr.arr.unique": [[310, "polars-expr-arr-unique"]], "polars.Expr.dt.second": [[373, "polars-expr-dt-second"]], "polars.Expr.cot": [[329, "polars-expr-cot"]], "polars.Expr.dt.is_leap_year": [[355, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.epoch": [[352, "polars-expr-dt-epoch"]], "polars.Expr.cumulative_eval": [[336, "polars-expr-cumulative-eval"]], "polars.Expr.dt.offset_by": [[368, "polars-expr-dt-offset-by"]], "polars.Expr.dt.days": [[350, "polars-expr-dt-days"]], "polars.Expr.cat.set_ordering": [[321, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.milliseconds": [[360, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.convert_time_zone": [[346, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.total_minutes": [[383, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.datetime": [[348, "polars-expr-dt-datetime"]], "polars.Expr.arr.sum": [[308, "polars-expr-arr-sum"]], "polars.Expr.dt.total_days": [[379, "polars-expr-dt-total-days"]], "polars.Expr.dt.date": [[347, "polars-expr-dt-date"]], "polars.Expr.cat.get_categories": [[320, "polars-expr-cat-get-categories"]], "polars.Expr.cache": [[318, "polars-expr-cache"]], "polars.Expr.degrees": [[338, "polars-expr-degrees"]], "polars.Expr.diff": [[339, "polars-expr-diff"]], "polars.Expr.dt.hour": [[353, "polars-expr-dt-hour"]], "polars.Expr.dt.hours": [[354, "polars-expr-dt-hours"]], "polars.Expr.cummax": [[332, "polars-expr-cummax"]], "polars.Expr.dt.minute": [[361, "polars-expr-dt-minute"]], "polars.Expr.dt.month_end": [[364, "polars-expr-dt-month-end"]], "polars.Expr.cumcount": [[331, "polars-expr-cumcount"]], "polars.Expr.dt.total_milliseconds": [[382, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.day": [[349, "polars-expr-dt-day"]], "polars.Expr.cumprod": [[334, "polars-expr-cumprod"]], "polars.Expr.backward_fill": [[311, "polars-expr-backward-fill"]], "polars.Expr.cosh": [[328, "polars-expr-cosh"]], "polars.Expr.dt.base_utc_offset": [[343, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.microsecond": [[357, "polars-expr-dt-microsecond"]], "polars.Expr.dt.minutes": [[362, "polars-expr-dt-minutes"]], "polars.Expr.dt.millisecond": [[359, "polars-expr-dt-millisecond"]], "polars.Expr.bin.decode": [[313, "polars-expr-bin-decode"]], "polars.Expr.drop_nulls": [[342, "polars-expr-drop-nulls"]], "polars.Expr.cast": [[319, "polars-expr-cast"]], "polars.Expr.dot": [[340, "polars-expr-dot"]], "polars.Expr.cbrt": [[322, "polars-expr-cbrt"]], "polars.Expr.dt.dst_offset": [[351, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.nanosecond": [[366, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.combine": [[345, "polars-expr-dt-combine"]], "polars.Expr.dt.quarter": [[370, "polars-expr-dt-quarter"]], "polars.Expr.dt.total_microseconds": [[381, "polars-expr-dt-total-microseconds"]], "polars.DataFrame.find_idx_by_name": [[167, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.mean": [[198, "polars-dataframe-mean"]], "polars.DataFrame.pipe": [[207, "polars-dataframe-pipe"]], "polars.DataFrame.map_rows": [[196, "polars-dataframe-map-rows"]], "polars.DataFrame.rechunk": [[211, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[212, "polars-dataframe-rename"]], "polars.DataFrame.row": [[217, "polars-dataframe-row"]], "polars.DataFrame.columns": [[154, "polars-dataframe-columns"]], "polars.DataFrame.rows": [[218, "polars-dataframe-rows"]], "polars.DataFrame.partition_by": [[206, "polars-dataframe-partition-by"]], "polars.DataFrame.group_by_dynamic": [[175, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.select_seq": [[223, "polars-dataframe-select-seq"]], "polars.DataFrame.extend": [[163, "polars-dataframe-extend"]], "polars.DataFrame.fold": [[169, "polars-dataframe-fold"]], "polars.DataFrame.median": [[199, "polars-dataframe-median"]], "polars.DataFrame.reverse": [[215, "polars-dataframe-reverse"]], "polars.DataFrame.groupby": [[177, "polars-dataframe-groupby"]], "polars.DataFrame.set_sorted": [[224, "polars-dataframe-set-sorted"]], "polars.DataFrame.is_empty": [[187, "polars-dataframe-is-empty"]], "polars.DataFrame.group_by": [[174, "polars-dataframe-group-by"]], "polars.DataFrame.iter_slices": [[191, "polars-dataframe-iter-slices"]], "polars.DataFrame.filter": [[166, "polars-dataframe-filter"]], "polars.DataFrame.groupby_dynamic": [[178, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.drop_in_place": [[158, "polars-dataframe-drop-in-place"]], "polars.DataFrame.hstack": [[183, "polars-dataframe-hstack"]], "polars.DataFrame.null_count": [[205, "polars-dataframe-null-count"]], "polars.DataFrame.sample": [[220, "polars-dataframe-sample"]], "polars.DataFrame.replace_at_idx": [[214, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.quantile": [[210, "polars-dataframe-quantile"]], "polars.DataFrame.group_by_rolling": [[176, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.is_duplicated": [[186, "polars-dataframe-is-duplicated"]], "polars.DataFrame.rolling": [[216, "polars-dataframe-rolling"]], "polars.DataFrame.melt": [[200, "polars-dataframe-melt"]], "polars.DataFrame.replace": [[213, "polars-dataframe-replace"]], "polars.DataFrame.get_column": [[171, "polars-dataframe-get-column"]], "polars.DataFrame.height": [[182, "polars-dataframe-height"]], "polars.DataFrame.is_unique": [[188, "polars-dataframe-is-unique"]], "polars.DataFrame.sort": [[230, "polars-dataframe-sort"]], "polars.DataFrame.join_asof": [[193, "polars-dataframe-join-asof"]], "polars.DataFrame.dtypes": [[160, "polars-dataframe-dtypes"]], "polars.DataFrame.corr": [[155, "polars-dataframe-corr"]], "polars.DataFrame.max": [[197, "polars-dataframe-max"]], "polars.DataFrame.groupby_rolling": [[179, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.n_chunks": [[203, "polars-dataframe-n-chunks"]], "polars.DataFrame.rows_by_key": [[219, "polars-dataframe-rows-by-key"]], "polars.DataFrame.shift": [[226, "polars-dataframe-shift"]], "polars.DataFrame.product": [[209, "polars-dataframe-product"]], "polars.DataFrame.glimpse": [[173, "polars-dataframe-glimpse"]], "polars.DataFrame.min": [[202, "polars-dataframe-min"]], "polars.DataFrame.estimated_size": [[161, "polars-dataframe-estimated-size"]], "polars.DataFrame.head": [[181, "polars-dataframe-head"]], "polars.DataFrame.lazy": [[194, "polars-dataframe-lazy"]], "polars.DataFrame.slice": [[229, "polars-dataframe-slice"]], "polars.DataFrame.select": [[222, "polars-dataframe-select"]], "polars.DataFrame.shape": [[225, "polars-dataframe-shape"]], "polars.DataFrame.shrink_to_fit": [[228, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.drop_nulls": [[159, "polars-dataframe-drop-nulls"]], "polars.DataFrame.frame_equal": [[170, "polars-dataframe-frame-equal"]], "polars.DataFrame.hash_rows": [[180, "polars-dataframe-hash-rows"]], "polars.DataFrame.schema": [[221, "polars-dataframe-schema"]], "polars.DataFrame.shift_and_fill": [[227, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.item": [[189, "polars-dataframe-item"]], "polars.DataFrame.insert_at_idx": [[184, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.drop": [[157, "polars-dataframe-drop"]], "polars.DataFrame.fill_nan": [[164, "polars-dataframe-fill-nan"]], "polars.DataFrame.pivot": [[208, "polars-dataframe-pivot"]], "polars.DataFrame.describe": [[156, "polars-dataframe-describe"]], "polars.DataFrame.get_columns": [[172, "polars-dataframe-get-columns"]], "polars.DataFrame.fill_null": [[165, "polars-dataframe-fill-null"]], "polars.DataFrame.n_unique": [[204, "polars-dataframe-n-unique"]], "polars.DataFrame.interpolate": [[185, "polars-dataframe-interpolate"]], "polars.DataFrame.flags": [[168, "polars-dataframe-flags"]], "polars.DataFrame.merge_sorted": [[201, "polars-dataframe-merge-sorted"]], "polars.DataFrame.explode": [[162, "polars-dataframe-explode"]], "polars.DataFrame.join": [[192, "polars-dataframe-join"]], "polars.DataFrame.iter_rows": [[190, "polars-dataframe-iter-rows"]], "polars.DataFrame.limit": [[195, "polars-dataframe-limit"]], "polars.Expr.arcsinh": [[298, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.first": [[262, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.arcsin": [[297, "polars-expr-arcsin"]], "polars.Expr.arg_max": [[301, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.n_unique": [[270, "polars-dataframe-group-by-groupby-n-unique"]], "polars.DataFrame.with_columns_seq": [[255, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.to_numpy": [[240, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_struct": [[243, "polars-dataframe-to-struct"]], "polars.dataframe.group_by.GroupBy.apply": [[260, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.arg_true": [[304, "polars-expr-arg-true"]], "polars.DataFrame.update": [[249, "polars-dataframe-update"]], "polars.DataFrame.vstack": [[252, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.last": [[264, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.apply": [[293, "polars-expr-apply"]], "polars.Expr.add": [[286, "polars-expr-add"]], "polars.DataFrame.unstack": [[248, "polars-dataframe-unstack"]], "polars.Expr.abs": [[285, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.all": [[259, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.with_row_count": [[256, "polars-dataframe-with-row-count"]], "polars.Expr.arccosh": [[296, "polars-expr-arccosh"]], "polars.DataFrame.to_pandas": [[241, "polars-dataframe-to-pandas"]], "polars.dataframe.group_by.GroupBy.tail": [[273, "polars-dataframe-group-by-groupby-tail"]], "polars.DataFrame.with_columns": [[254, "polars-dataframe-with-columns"]], "polars.DataFrame.unnest": [[247, "polars-dataframe-unnest"]], "polars.dataframe.group_by.GroupBy.quantile": [[271, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.mean": [[267, "polars-dataframe-group-by-groupby-mean"]], "polars.DataFrame.var": [[251, "polars-dataframe-var"]], "polars.Expr.arctanh": [[300, "polars-expr-arctanh"]], "polars.Expr.and_": [[290, "polars-expr-and"]], "polars.Expr.arr.max": [[306, "polars-expr-arr-max"]], "polars.dataframe.group_by.GroupBy.median": [[268, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.count": [[261, "polars-dataframe-group-by-groupby-count"]], "polars.DataFrame.to_series": [[242, "polars-dataframe-to-series"]], "polars.Expr.arr.min": [[307, "polars-expr-arr-min"]], "polars.Expr.alias": [[288, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.max": [[266, "polars-dataframe-group-by-groupby-max"]], "polars.DataFrame.top_k": [[244, "polars-dataframe-top-k"]], "polars.Expr.arg_sort": [[303, "polars-expr-arg-sort"]], "Data types": [[282, "data-types"]], "Nested": [[282, "nested"]], "Other": [[282, "other"]], "polars.dataframe.group_by.GroupBy.agg": [[258, "polars-dataframe-group-by-groupby-agg"]], "polars.Expr.arccos": [[295, "polars-expr-arccos"]], "polars.Expr.approx_n_unique": [[294, "polars-expr-approx-n-unique"]], "polars.DataFrame.to_dict": [[236, "polars-dataframe-to-dict"]], "polars.Expr.agg_groups": [[287, "polars-expr-agg-groups"]], "polars.Expr.any": [[291, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.map_groups": [[265, "polars-dataframe-group-by-groupby-map-groups"]], "polars.DataFrame.sum": [[232, "polars-dataframe-sum"]], "polars.DataFrame.take_every": [[234, "polars-dataframe-take-every"]], "polars.DataFrame.to_dicts": [[237, "polars-dataframe-to-dicts"]], "polars.dataframe.group_by.GroupBy.min": [[269, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.append": [[292, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.head": [[263, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.transpose": [[245, "polars-dataframe-transpose"]], "polars.dataframe.group_by.GroupBy.sum": [[272, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arg_min": [[302, "polars-expr-arg-min"]], "polars.Expr.arg_unique": [[305, "polars-expr-arg-unique"]], "polars.DataFrame.to_dummies": [[238, "polars-dataframe-to-dummies"]], "polars.Expr.arctan": [[299, "polars-expr-arctan"]], "polars.DataFrame.std": [[231, "polars-dataframe-std"]], "polars.DataFrame.unique": [[246, "polars-dataframe-unique"]], "Exceptions": [[283, "exceptions"]], "polars.Expr.all": [[289, "polars-expr-all"]], "polars.DataFrame.to_arrow": [[235, "polars-dataframe-to-arrow"]], "polars.dataframe.group_by.GroupBy.__iter__": [[257, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.upsample": [[250, "polars-dataframe-upsample"]], "polars.DataFrame.width": [[253, "polars-dataframe-width"]], "DataFrame": [[279, "dataframe"]], "polars.DataFrame.to_init_repr": [[239, "polars-dataframe-to-init-repr"]], "polars.DataFrame.tail": [[233, "polars-dataframe-tail"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[13, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[14, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[15, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[16, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[28, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[29, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[30, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[31, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[32, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[33, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[34, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[35, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[36, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[37, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[38, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[39, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[40, "polars.DataType"]], "__init__() (polars.datatype method)": [[40, "polars.DataType.__init__"]], "date (class in polars)": [[41, "polars.Date"]], "__init__() (polars.date method)": [[41, "polars.Date.__init__"]], "datetime (class in polars)": [[42, "polars.Datetime"]], "__init__() (polars.datetime method)": [[42, "polars.Datetime.__init__"]], "decimal (class in polars)": [[43, "polars.Decimal"]], "__init__() (polars.decimal method)": [[43, "polars.Decimal.__init__"]], "duration (class in polars)": [[44, "polars.Duration"]], "__init__() (polars.duration method)": [[44, "polars.Duration.__init__"]], "float32 (class in polars)": [[45, "polars.Float32"]], "__init__() (polars.float32 method)": [[45, "polars.Float32.__init__"]], "float64 (class in polars)": [[46, "polars.Float64"]], "__init__() (polars.float64 method)": [[46, "polars.Float64.__init__"]], "int16 (class in polars)": [[47, "polars.Int16"]], "__init__() (polars.int16 method)": [[47, "polars.Int16.__init__"]], "int32 (class in polars)": [[48, "polars.Int32"]], "__init__() (polars.int32 method)": [[48, "polars.Int32.__init__"]], "int64 (class in polars)": [[49, "polars.Int64"]], "__init__() (polars.int64 method)": [[49, "polars.Int64.__init__"]], "int8 (class in polars)": [[50, "polars.Int8"]], "__init__() (polars.int8 method)": [[50, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[53, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[54, "polars.List"]], "__init__() (polars.list method)": [[54, "polars.List.__init__"]], "null (class in polars)": [[55, "polars.Null"]], "__init__() (polars.null method)": [[55, "polars.Null.__init__"]], "object (class in polars)": [[56, "polars.Object"]], "__init__() (polars.object method)": [[56, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[57, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[58, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[59, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[60, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[61, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[62, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[63, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[63, "polars.StringCache.__init__"]], "struct (class in polars)": [[64, "polars.Struct"]], "__init__() (polars.struct method)": [[64, "polars.Struct.__init__"]], "time (class in polars)": [[65, "polars.Time"]], "__init__() (polars.time method)": [[65, "polars.Time.__init__"]], "uint16 (class in polars)": [[66, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[66, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[67, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[67, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[68, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[68, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[69, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[69, "polars.UInt8.__init__"]], "unknown (class in polars)": [[70, "polars.Unknown"]], "__init__() (polars.unknown method)": [[70, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[71, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[71, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[72, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[73, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[74, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[75, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[76, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[77, "polars.build_info"]], "collect_all() (in module polars)": [[78, "polars.collect_all"]], "collect_all_async() (in module polars)": [[79, "polars.collect_all_async"]], "concat() (in module polars)": [[80, "polars.concat"]], "disable_string_cache() (in module polars)": [[81, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[82, "polars.enable_string_cache"]], "arrowerror": [[83, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[84, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[85, "polars.exceptions.ComputeError"]], "duplicateerror": [[86, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[87, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[88, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[89, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[90, "polars.exceptions.PolarsPanicError"]], "rowserror": [[91, "polars.exceptions.RowsError"]], "schemaerror": [[92, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[93, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[94, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[95, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[96, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[97, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[98, "polars.from_dataframe"]], "from_dict() (in module polars)": [[99, "polars.from_dict"]], "from_dicts() (in module polars)": [[100, "polars.from_dicts"]], "from_numpy() (in module polars)": [[101, "polars.from_numpy"]], "from_pandas() (in module polars)": [[102, "polars.from_pandas"]], "from_records() (in module polars)": [[103, "polars.from_records"]], "from_repr() (in module polars)": [[104, "polars.from_repr"]], "get_index_type() (in module polars)": [[105, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[106, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[107, "polars.read_avro"]], "read_csv() (in module polars)": [[108, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[109, "polars.read_csv_batched"]], "read_database() (in module polars)": [[110, "polars.read_database"]], "read_database_uri() (in module polars)": [[111, "polars.read_database_uri"]], "read_delta() (in module polars)": [[112, "polars.read_delta"]], "read_excel() (in module polars)": [[113, "polars.read_excel"]], "read_ipc() (in module polars)": [[114, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[115, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[116, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[117, "polars.read_json"]], "read_ndjson() (in module polars)": [[118, "polars.read_ndjson"]], "read_ods() (in module polars)": [[119, "polars.read_ods"]], "read_parquet() (in module polars)": [[120, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[121, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[122, "polars.scan_csv"]], "scan_delta() (in module polars)": [[123, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[124, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[125, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[126, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[127, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[128, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[129, "polars.set_random_seed"]], "show_versions() (in module polars)": [[130, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[131, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[132, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[133, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[134, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[135, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[135, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[136, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[137, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[138, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[139, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[140, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[141, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[142, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[143, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[146, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[147, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[148, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[149, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[150, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[151, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[152, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[153, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[154, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[155, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[156, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[157, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[158, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[159, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[160, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[161, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[162, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[163, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[164, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[165, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[166, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[167, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[168, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[169, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[170, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[171, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[172, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[173, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[174, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[175, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[176, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[177, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[178, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[179, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[180, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[181, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[182, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[183, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[184, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[185, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[186, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[187, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[188, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[189, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[190, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[191, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[192, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[193, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[194, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[195, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[196, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[197, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[198, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[199, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[200, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[201, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[202, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[203, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[204, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[205, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[206, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[207, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[208, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[209, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[210, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[211, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[212, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[213, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[214, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[215, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[216, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[217, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[218, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[219, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[220, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[221, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[222, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[223, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[224, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[225, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[226, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[227, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[228, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[229, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[230, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[231, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[232, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[233, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[234, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[235, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[236, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[237, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[238, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[239, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[240, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[241, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[242, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[243, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[244, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[245, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[246, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[247, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[248, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[249, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[250, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[251, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[252, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[253, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[254, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[255, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[256, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[257, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[258, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[259, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[260, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[261, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[262, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[263, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[264, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[265, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[266, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[267, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[268, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[269, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[270, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[271, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[285, "polars.Expr.abs"]], "add() (polars.expr method)": [[286, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[287, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[288, "polars.Expr.alias"]], "all() (polars.expr method)": [[289, "polars.Expr.all"]], "and_() (polars.expr method)": [[290, "polars.Expr.and_"]], "any() (polars.expr method)": [[291, "polars.Expr.any"]], "append() (polars.expr method)": [[292, "polars.Expr.append"]], "apply() (polars.expr method)": [[293, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[294, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[295, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[296, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[297, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[298, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[299, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[300, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[301, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[302, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[303, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[304, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[305, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[306, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[307, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[308, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[309, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[310, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[311, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[312, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[313, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[314, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[315, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[316, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[317, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[318, "polars.Expr.cache"]], "cast() (polars.expr method)": [[319, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[320, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[321, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[322, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[323, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[324, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[325, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[326, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[327, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[328, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[329, "polars.Expr.cot"]], "count() (polars.expr method)": [[330, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[331, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[332, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[333, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[334, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[335, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[336, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[337, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[338, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[339, "polars.Expr.diff"]], "dot() (polars.expr method)": [[340, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[341, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[342, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[343, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[344, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[345, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[346, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[347, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[348, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[349, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[350, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[351, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[352, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[353, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[354, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[355, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[356, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[357, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[358, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[359, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[360, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[361, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[362, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[363, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[364, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[365, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[366, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[367, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[368, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[369, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[370, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[371, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[372, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[373, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[374, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[375, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[376, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[377, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[378, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[379, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[380, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[381, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[382, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[383, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[384, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[385, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[386, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[387, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[388, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[389, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[390, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[391, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[392, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[393, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[394, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[395, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[396, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[397, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[398, "polars.Expr.exp"]], "explode() (polars.expr method)": [[399, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[400, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[401, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[402, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[403, "polars.Expr.filter"]], "first() (polars.expr method)": [[404, "polars.Expr.first"]], "flatten() (polars.expr method)": [[405, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[406, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[407, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[408, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[409, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[410, "polars.Expr.ge"]], "get() (polars.expr method)": [[411, "polars.Expr.get"]], "gt() (polars.expr method)": [[412, "polars.Expr.gt"]], "hash() (polars.expr method)": [[413, "polars.Expr.hash"]], "head() (polars.expr method)": [[414, "polars.Expr.head"]], "implode() (polars.expr method)": [[415, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[416, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[417, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[418, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[419, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[420, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[421, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[422, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[423, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[424, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[425, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[426, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[427, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[428, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[429, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[430, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[431, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[432, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[433, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[434, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[435, "polars.Expr.last"]], "le() (polars.expr method)": [[436, "polars.Expr.le"]], "len() (polars.expr method)": [[437, "polars.Expr.len"]], "limit() (polars.expr method)": [[438, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[439, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[440, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[441, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[442, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[443, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[444, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[445, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[446, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[447, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[448, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[449, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[450, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[451, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[452, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[453, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[454, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[455, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[456, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[457, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[458, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[459, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[460, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[461, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[462, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[463, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[464, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[465, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[466, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[467, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[468, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[469, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[470, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[471, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[472, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[473, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[474, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[475, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[476, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[477, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[478, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[479, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[480, "polars.Expr.log"]], "log10() (polars.expr method)": [[481, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[482, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[483, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[484, "polars.Expr.lt"]], "map() (polars.expr method)": [[485, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[486, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[487, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[488, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[489, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[490, "polars.Expr.max"]], "mean() (polars.expr method)": [[491, "polars.Expr.mean"]], "median() (polars.expr method)": [[492, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[493, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[494, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[495, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[496, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[497, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[498, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[499, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[500, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[501, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[502, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[503, "polars.Expr.min"]], "mod() (polars.expr method)": [[504, "polars.Expr.mod"]], "mode() (polars.expr method)": [[505, "polars.Expr.mode"]], "mul() (polars.expr method)": [[506, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[507, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[508, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[509, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[510, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[511, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[512, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[513, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[514, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[515, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[516, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[517, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[518, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[519, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[520, "polars.Expr.or_"]], "over() (polars.expr method)": [[521, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[522, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[523, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[524, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[525, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[526, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[527, "polars.Expr.prefix"]], "product() (polars.expr method)": [[528, "polars.Expr.product"]], "qcut() (polars.expr method)": [[529, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[530, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[531, "polars.Expr.radians"]], "rank() (polars.expr method)": [[532, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[533, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[534, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[535, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[536, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[537, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[538, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[539, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[540, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[541, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[542, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[543, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[544, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[545, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[546, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[547, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[548, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[549, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[550, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[551, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[552, "polars.Expr.round"]], "sample() (polars.expr method)": [[553, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[554, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[555, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[556, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[557, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[558, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[559, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[560, "polars.Expr.sign"]], "sin() (polars.expr method)": [[561, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[562, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[563, "polars.Expr.skew"]], "slice() (polars.expr method)": [[564, "polars.Expr.slice"]], "sort() (polars.expr method)": [[565, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[566, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[567, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[568, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[569, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[570, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[571, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[572, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[573, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[574, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[575, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[576, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[577, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[578, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[579, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[580, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[581, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[582, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[583, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[584, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[585, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[586, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[587, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[588, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[589, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[590, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[591, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[592, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[593, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[594, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[595, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[596, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[597, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[598, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[599, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[600, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[601, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[602, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[603, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[604, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[605, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[606, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[607, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[608, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[609, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[610, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[611, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[612, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[613, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[614, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[615, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[616, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[617, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[618, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[619, "polars.Expr.sum"]], "tail() (polars.expr method)": [[620, "polars.Expr.tail"]], "take() (polars.expr method)": [[621, "polars.Expr.take"]], "take_every() (polars.expr method)": [[622, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[623, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[624, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[625, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[626, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[627, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[628, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[629, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[630, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[631, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[632, "polars.Expr.var"]], "where() (polars.expr method)": [[633, "polars.Expr.where"]], "xor() (polars.expr method)": [[634, "polars.Expr.xor"]], "all() (in module polars)": [[635, "polars.all"]], "all_horizontal() (in module polars)": [[636, "polars.all_horizontal"]], "any() (in module polars)": [[637, "polars.any"]], "any_horizontal() (in module polars)": [[638, "polars.any_horizontal"]], "apply() (in module polars)": [[639, "polars.apply"]], "approx_n_unique() (in module polars)": [[640, "polars.approx_n_unique"]], "arange() (in module polars)": [[641, "polars.arange"]], "arctan2() (in module polars)": [[642, "polars.arctan2"]], "arctan2d() (in module polars)": [[643, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[644, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[645, "polars.arg_where"]], "avg() (in module polars)": [[646, "polars.avg"]], "coalesce() (in module polars)": [[647, "polars.coalesce"]], "concat_list() (in module polars)": [[648, "polars.concat_list"]], "concat_str() (in module polars)": [[649, "polars.concat_str"]], "corr() (in module polars)": [[650, "polars.corr"]], "count() (in module polars)": [[651, "polars.count"]], "cov() (in module polars)": [[652, "polars.cov"]], "cumfold() (in module polars)": [[653, "polars.cumfold"]], "cumreduce() (in module polars)": [[654, "polars.cumreduce"]], "cumsum() (in module polars)": [[655, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[656, "polars.cumsum_horizontal"]], "date() (in module polars)": [[657, "polars.date"]], "date_range() (in module polars)": [[658, "polars.date_range"]], "date_ranges() (in module polars)": [[659, "polars.date_ranges"]], "datetime() (in module polars)": [[660, "polars.datetime"]], "datetime_range() (in module polars)": [[661, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[662, "polars.datetime_ranges"]], "duration() (in module polars)": [[663, "polars.duration"]], "element() (in module polars)": [[664, "polars.element"]], "exclude() (in module polars)": [[665, "polars.exclude"]], "first() (in module polars)": [[666, "polars.first"]], "fold() (in module polars)": [[667, "polars.fold"]], "format() (in module polars)": [[668, "polars.format"]], "from_epoch() (in module polars)": [[669, "polars.from_epoch"]], "groups() (in module polars)": [[670, "polars.groups"]], "head() (in module polars)": [[671, "polars.head"]], "implode() (in module polars)": [[672, "polars.implode"]], "int_range() (in module polars)": [[673, "polars.int_range"]], "int_ranges() (in module polars)": [[674, "polars.int_ranges"]], "last() (in module polars)": [[675, "polars.last"]], "lit() (in module polars)": [[676, "polars.lit"]], "map() (in module polars)": [[677, "polars.map"]], "map_batches() (in module polars)": [[678, "polars.map_batches"]], "map_groups() (in module polars)": [[679, "polars.map_groups"]], "max() (in module polars)": [[680, "polars.max"]], "max_horizontal() (in module polars)": [[681, "polars.max_horizontal"]], "mean() (in module polars)": [[682, "polars.mean"]], "median() (in module polars)": [[683, "polars.median"]], "min() (in module polars)": [[684, "polars.min"]], "min_horizontal() (in module polars)": [[685, "polars.min_horizontal"]], "n_unique() (in module polars)": [[686, "polars.n_unique"]], "ones() (in module polars)": [[687, "polars.ones"]], "quantile() (in module polars)": [[688, "polars.quantile"]], "reduce() (in module polars)": [[689, "polars.reduce"]], "repeat() (in module polars)": [[690, "polars.repeat"]], "rolling_corr() (in module polars)": [[691, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[692, "polars.rolling_cov"]], "select() (in module polars)": [[693, "polars.select"]], "sql_expr() (in module polars)": [[694, "polars.sql_expr"]], "std() (in module polars)": [[695, "polars.std"]], "struct() (in module polars)": [[696, "polars.struct"]], "sum() (in module polars)": [[697, "polars.sum"]], "sum_horizontal() (in module polars)": [[698, "polars.sum_horizontal"]], "tail() (in module polars)": [[699, "polars.tail"]], "time() (in module polars)": [[700, "polars.time"]], "time_range() (in module polars)": [[701, "polars.time_range"]], "time_ranges() (in module polars)": [[702, "polars.time_ranges"]], "var() (in module polars)": [[703, "polars.var"]], "when() (in module polars)": [[704, "polars.when"]], "zeros() (in module polars)": [[705, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[729, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[730, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[731, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[732, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[733, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[734, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[735, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[736, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[737, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[738, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[739, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[740, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[741, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[742, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[743, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[744, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[745, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[746, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[747, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[748, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[749, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[750, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[751, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[752, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[753, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[754, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[755, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[756, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[757, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[758, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[759, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[760, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[761, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[762, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[763, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[764, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[765, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[766, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[767, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[768, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[769, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[770, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[771, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[772, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[773, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[774, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[775, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[776, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[777, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[778, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[779, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[780, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[781, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[782, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[783, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[784, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[785, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[786, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[787, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[788, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[789, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[790, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[791, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[792, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[793, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[794, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[795, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[796, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[797, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[798, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[799, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[800, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[801, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[802, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[803, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[804, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[805, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[806, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[807, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[808, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[809, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[810, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[811, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[812, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[813, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[814, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[815, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[816, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[817, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[818, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[819, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[820, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[821, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[828, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[828, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[828, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[828, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[828, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[828, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[828, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[828, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[828, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[828, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[828, "polars.selectors.first"]], "float() (in module polars.selectors)": [[828, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[828, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[828, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[828, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[828, "polars.selectors.matches"]], "module": [[828, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[828, "polars.selectors.numeric"]], "polars.selectors": [[828, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[828, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[828, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[828, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[828, "polars.selectors.time"]], "abs() (polars.series method)": [[830, "polars.Series.abs"]], "alias() (polars.series method)": [[831, "polars.Series.alias"]], "all() (polars.series method)": [[832, "polars.Series.all"]], "any() (polars.series method)": [[833, "polars.Series.any"]], "append() (polars.series method)": [[834, "polars.Series.append"]], "apply() (polars.series method)": [[835, "polars.Series.apply"]], "arccos() (polars.series method)": [[836, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[837, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[838, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[839, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[840, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[841, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[842, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[843, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[844, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[845, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[846, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[847, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[848, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[849, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[850, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[851, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[852, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[853, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[854, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[855, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[856, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[857, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[858, "polars.Series.cast"]], "cat (polars.series attribute)": [[859, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[860, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[861, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[862, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[863, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[864, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[865, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[866, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[867, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[868, "polars.Series.clear"]], "clip() (polars.series method)": [[869, "polars.Series.clip"]], "clip_max() (polars.series method)": [[870, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[871, "polars.Series.clip_min"]], "clone() (polars.series method)": [[872, "polars.Series.clone"]], "cos() (polars.series method)": [[873, "polars.Series.cos"]], "cosh() (polars.series method)": [[874, "polars.Series.cosh"]], "cot() (polars.series method)": [[875, "polars.Series.cot"]], "cummax() (polars.series method)": [[876, "polars.Series.cummax"]], "cummin() (polars.series method)": [[877, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[878, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[879, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[880, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[881, "polars.Series.cut"]], "describe() (polars.series method)": [[882, "polars.Series.describe"]], "diff() (polars.series method)": [[883, "polars.Series.diff"]], "dot() (polars.series method)": [[884, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[885, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[886, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[887, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[888, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[889, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[890, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[891, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[892, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[893, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[894, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[895, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[896, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[897, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[898, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[899, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[900, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[901, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[902, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[903, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[904, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[905, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[906, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[907, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[908, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[909, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[910, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[911, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[912, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[913, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[914, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[915, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[916, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[917, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[918, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[919, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[920, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[921, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[922, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[923, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[924, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[925, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[926, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[927, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[928, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[929, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[930, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[931, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[932, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[933, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[934, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[935, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[936, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[937, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[938, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[939, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[940, "polars.Series.dtype"]], "entropy() (polars.series method)": [[941, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[942, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[943, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[944, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[945, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[946, "polars.Series.exp"]], "explode() (polars.series method)": [[947, "polars.Series.explode"]], "extend() (polars.series method)": [[948, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[949, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[950, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[951, "polars.Series.fill_null"]], "filter() (polars.series method)": [[952, "polars.Series.filter"]], "flags (polars.series attribute)": [[953, "polars.Series.flags"]], "floor() (polars.series method)": [[954, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[955, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[956, "polars.Series.has_validity"]], "hash() (polars.series method)": [[957, "polars.Series.hash"]], "head() (polars.series method)": [[958, "polars.Series.head"]], "hist() (polars.series method)": [[959, "polars.Series.hist"]], "implode() (polars.series method)": [[960, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[961, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[962, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[963, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[964, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[965, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[966, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[967, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[968, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[969, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[970, "polars.Series.is_float"]], "is_in() (polars.series method)": [[971, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[972, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[973, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[974, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[975, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[976, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[977, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[978, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[979, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[980, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[981, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[982, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[983, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[984, "polars.Series.is_utf8"]], "item() (polars.series method)": [[985, "polars.Series.item"]], "kurtosis() (polars.series method)": [[986, "polars.Series.kurtosis"]], "len() (polars.series method)": [[987, "polars.Series.len"]], "limit() (polars.series method)": [[988, "polars.Series.limit"]], "list (polars.series attribute)": [[989, "polars.Series.list"]], "all() (polars.series.list method)": [[990, "polars.Series.list.all"]], "any() (polars.series.list method)": [[991, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[992, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[993, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[994, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[995, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[996, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[997, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[998, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[999, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[1000, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1001, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1002, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1003, "polars.Series.list.first"]], "get() (polars.series.list method)": [[1004, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1005, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[1006, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[1007, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1008, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1009, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1010, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1011, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1012, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1013, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1014, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1015, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1016, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1017, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1018, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1019, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1020, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1021, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1022, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1023, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[1024, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[1025, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1026, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1027, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1028, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[1029, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[1030, "polars.Series.list.unique"]], "log() (polars.series method)": [[1031, "polars.Series.log"]], "log10() (polars.series method)": [[1032, "polars.Series.log10"]], "log1p() (polars.series method)": [[1033, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1034, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1035, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1036, "polars.Series.map_elements"]], "max() (polars.series method)": [[1037, "polars.Series.max"]], "mean() (polars.series method)": [[1038, "polars.Series.mean"]], "median() (polars.series method)": [[1039, "polars.Series.median"]], "min() (polars.series method)": [[1040, "polars.Series.min"]], "mode() (polars.series method)": [[1041, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1042, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1043, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1044, "polars.Series.name"]], "nan_max() (polars.series method)": [[1045, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1046, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1047, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1048, "polars.Series.not_"]], "null_count() (polars.series method)": [[1049, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1050, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1051, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1052, "polars.Series.peak_min"]], "product() (polars.series method)": [[1053, "polars.Series.product"]], "qcut() (polars.series method)": [[1054, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1055, "polars.Series.quantile"]], "rank() (polars.series method)": [[1056, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1057, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1058, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1059, "polars.Series.rename"]], "reshape() (polars.series method)": [[1060, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1061, "polars.Series.reverse"]], "rle() (polars.series method)": [[1062, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1063, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1064, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1065, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1066, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1067, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1068, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1069, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1070, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1071, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1072, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1073, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1074, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1075, "polars.Series.round"]], "sample() (polars.series method)": [[1076, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1077, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1078, "polars.Series.series_equal"]], "set() (polars.series method)": [[1079, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1080, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1081, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1082, "polars.Series.shape"]], "shift() (polars.series method)": [[1083, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1084, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1085, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1086, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1087, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1088, "polars.Series.sign"]], "sin() (polars.series method)": [[1089, "polars.Series.sin"]], "sinh() (polars.series method)": [[1090, "polars.Series.sinh"]], "skew() (polars.series method)": [[1091, "polars.Series.skew"]], "slice() (polars.series method)": [[1092, "polars.Series.slice"]], "sort() (polars.series method)": [[1093, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1094, "polars.Series.sqrt"]], "std() (polars.series method)": [[1095, "polars.Series.std"]], "str (polars.series attribute)": [[1096, "polars.Series.str"]], "concat() (polars.series.str method)": [[1097, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1098, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1099, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1100, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1101, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1102, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1103, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1104, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1105, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1106, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1107, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1108, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1109, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1110, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1111, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1112, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1113, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1114, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1115, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1116, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1117, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1118, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1119, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1120, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1121, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1122, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1123, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1124, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1125, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1126, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1127, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1128, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1129, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1130, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1131, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1132, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1133, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1134, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1135, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1136, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1137, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1138, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1139, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1140, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1141, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1142, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1143, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1144, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1145, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1146, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1147, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1148, "polars.Series.sum"]], "tail() (polars.series method)": [[1149, "polars.Series.tail"]], "take() (polars.series method)": [[1150, "polars.Series.take"]], "take_every() (polars.series method)": [[1151, "polars.Series.take_every"]], "tan() (polars.series method)": [[1152, "polars.Series.tan"]], "tanh() (polars.series method)": [[1153, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1154, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1155, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1156, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1157, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1158, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1159, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1160, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1161, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1162, "polars.Series.top_k"]], "unique() (polars.series method)": [[1163, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1164, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1165, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1166, "polars.Series.value_counts"]], "var() (polars.series method)": [[1167, "polars.Series.var"]], "view() (polars.series method)": [[1168, "polars.Series.view"]], "zip_with() (polars.series method)": [[1169, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1185, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1185, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1185, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1185, "polars.SQLContext.__init__"]]}})